{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"HTTable%20-%20Basics/","text":"Documentation HTTable 1. Introduction HTTable est une structure de donn\u00e9es avanc\u00e9e pour manipuler des tableaux comportant des ent\u00eates hi\u00e9rarchiques en lignes et colonnes. Elle facilite l'analyse et la transformation de donn\u00e9es tabulaires complexes. Structure fondamentale Une HTTable comporte trois parties principales : Ent\u00eates - Hi\u00e9rarchiques et multi-niveaux : Ent\u00eates de colonnes (horizontaux) Ent\u00eates de lignes (verticaux) Corps du tableau - Contient les donn\u00e9es effectives Annotations - M\u00e9tadonn\u00e9es associ\u00e9es \u00e0 la table Terminologie essentielle Axe : Ensemble d'\u00e9l\u00e9ments organis\u00e9s selon une direction (ligne ou colonne) Niveau : Ligne ou colonne sp\u00e9cifique dans une dimension (un niveau d'ent\u00eate) Dimension : Regroupe tous les niveaux de hi\u00e9rarchie dans une direction (lignes ou colonnes) Calcul : Valeur d\u00e9riv\u00e9e pouvant \u00eatre plac\u00e9e dans diff\u00e9rentes parties de la table Cellule : Unit\u00e9 fondamentale de stockage des donn\u00e9es 3. Concepts structurels Hi\u00e9rarchie des concepts HTTable \u251c\u2500\u2500 ColumnsDimension (tous les niveaux d'ent\u00eates de colonnes) \u2502 \u2514\u2500\u2500 Columns (feuilles de la dimension) \u251c\u2500\u2500 RowsDimension (tous les niveaux d'ent\u00eates de lignes) \u2502 \u2514\u2500\u2500 Rows (feuilles de la dimension) \u251c\u2500\u2500 Calculations (peut \u00eatre en lignes, colonnes ou cellules) \u251c\u2500\u2500 Annotations (m\u00e9tadonn\u00e9es) \u2514\u2500\u2500 Body (corps de la table) Axes et dimensions La structure d'une HTTable s'articule autour de plusieurs axes et dimensions : # Dimensions (regroupent tous les niveaux hi\u00e9rarchiques) colDim = table.ColumnsDimension # Tous les niveaux d'ent\u00eates de colonnes rowDim = table.RowsDimension # Tous les niveaux d'ent\u00eates de lignes # Axes des feuilles (niveau le plus bas de la hi\u00e9rarchie) cols = table.Columns # Acc\u00e8s simplifi\u00e9 aux colonnes du corps rows = table.Rows # Acc\u00e8s simplifi\u00e9 aux lignes du corps # Calculs (plac\u00e9s en lignes, colonnes ou cellules) calcs = table.Calculations Niveaux des dimensions Les dimensions contiennent plusieurs niveaux, qui repr\u00e9sentent les diff\u00e9rentes couches de la hi\u00e9rarchie : # Acc\u00e8s aux niveaux d'une dimension (origine 1) level1 = colDim.Levels[1] # Premier niveau (racine) level2 = colDim.Levels[2] # Deuxi\u00e8me niveau leafLevel = colDim.Leaves # Dernier niveau (feuilles) # Acc\u00e8s avec indexation n\u00e9gative rootLevel = rowDim.Roots # Premier niveau (\u00e9quivalent \u00e0 Levels[1]) subTitleLevel = rowDim.SubTitles # Avant-dernier niveau Ent\u00eates Les ent\u00eates d\u00e9finissent la structure et organisent les donn\u00e9es : # Acc\u00e8s aux ent\u00eates colHeader = table.ColumnsHeader rowHeader = table.RowsHeader # Nombre de niveaux dans les ent\u00eates colHeaderLevels = table.ColumnHeaderSize rowHeaderLevels = table.RowHeaderSize Corps Le corps contient les donn\u00e9es sans les ent\u00eates : # Acc\u00e8s au corps (table sans les ent\u00eates) body = table.Body # Tailles du corps bodyRowCount = table.RowCount bodyColCount = table.ColumnCount # Tailles de la table compl\u00e8te (avec ent\u00eates) tableRowCount = table.TableRowCount tableColCount = table.TableColumnCount 4. Acc\u00e8s aux donn\u00e9es Acc\u00e8s par axes et dimensions L'acc\u00e8s aux donn\u00e9es via les axes est le moyen principal de manipuler une HTTable. Important : Ces op\u00e9rations retournent une HTTable qui r\u00e9f\u00e9rence la table parent, permettant ainsi de lire et modifier les donn\u00e9es dans une sous-partie de la table d'origine : # Acc\u00e8s \u00e0 une colonne (retourne une HTTable li\u00e9e \u00e0 la table parente) firstCol = table.Columns[1] # Premi\u00e8re colonne colsA_C = table.Columns[\"A\", \"B\", \"C\"] # S\u00e9lection par noms # Acc\u00e8s \u00e0 une ligne (retourne une HTTable li\u00e9e \u00e0 la table parente) secondRow = table.Rows[2] # Deuxi\u00e8me ligne totalsRow = table.Rows[\"Totals\"] # S\u00e9lection par nom # Acc\u00e8s \u00e0 un niveau sp\u00e9cifique dans une dimension prodCategories = table.ColumnsDimension.Levels[1] # Premier niveau d'ent\u00eate de colonnes monthLevel = table.RowsDimension.Levels[2] # Deuxi\u00e8me niveau d'ent\u00eate de lignes # Acc\u00e8s aux \u00e9l\u00e9ments d'un niveau sp\u00e9cifique categoryNames = prodCategories.Texts # Textes du premier niveau d'ent\u00eate de colonnes monthNames = monthLevel.Texts # Textes du deuxi\u00e8me niveau d'ent\u00eate de lignes # Modification via la vue (affecte la table parente) firstCol.SetAt(1, 1, \"Nouvelle valeur\") # Modifie la premi\u00e8re cellule de la premi\u00e8re colonne Acc\u00e8s par croisement d'axes Les croisements d'axes permettent d'acc\u00e9der \u00e0 des zones sp\u00e9cifiques : # S\u00e9lection d'une cellule par croisement de coords cell = table.Rows[3].Columns[2] # S\u00e9lection d'une zone quarterData = table.Rows[\"Q1\"].Columns[\"Product A\", \"Product B\"] # S\u00e9lection avec un calcul sp\u00e9cifique revenueForQ1 = table.Rows[\"Q1\"].Calculations[\"REVENUE\"] Acc\u00e8s et modification des valeurs HTTable offre plusieurs fa\u00e7ons d'acc\u00e9der et de modifier les valeurs selon les zones (corps, ent\u00eates) et les types de donn\u00e9es. Acc\u00e8s aux valeurs # Acc\u00e8s aux valeurs brutes du corps colValues = table.Columns[1].Values # Toutes les valeurs de la premi\u00e8re colonne rowValues = table.Rows[2].Values # Toutes les valeurs de la deuxi\u00e8me ligne cellValue = table.Columns[1].Rows[3].Value # Valeur \u00e0 l'intersection # Acc\u00e8s typ\u00e9 aux valeurs num\u00e9riques colNumbers = table.Columns[\"Revenue\"].Numbers # En tant que doubles rowIntegers = table.Rows[\"Count\"].Integers # En tant qu'entiers # Acc\u00e8s aux textes (conversion automatique en cha\u00eenes) colTexts = table.Columns[1].Texts # Textes du corps headerTexts = table.Columns.Texts # Textes de l'ent\u00eate des colonnes (niveau feuilles) levelTexts = table.ColumnsDimension.Levels[1].Texts # Textes d'un niveau sp\u00e9cifique d'ent\u00eate Modification des valeurs La modification des valeurs d\u00e9pend de la zone cibl\u00e9e (corps ou ent\u00eates) : # Modification du corps du tableau table.Columns[1].Rows[2].Value = 42 # Modifie une cellule sp\u00e9cifique du corps table.Columns[\"Q1\", \"Q2\"].Value = 0 # Met \u00e0 z\u00e9ro toutes les cellules des colonnes Q1 et Q2 # Modification des ent\u00eates table.Columns.Value = \"Trimestre\" # Modifie le texte de l'ent\u00eate des colonnes (niveau feuilles) table.Rows.Texts = [\"A\", \"B\", \"C\"] # Modifie les textes de l'ent\u00eate des lignes (niveau feuilles) table.ColumnsDimension.Levels[1].Value = \"Ann\u00e9e\" # Modifie un niveau sp\u00e9cifique d'ent\u00eate # Distribution de valeurs multiples table.Columns[1].Values = [10, 20, 30, 40] # Affecte ces valeurs aux 4 premi\u00e8res lignes table.Rows[\"Total\"].Values = [100, 200, 300] # Affecte ces valeurs aux 3 premi\u00e8res colonnes # Pour les grandes s\u00e9lections, les valeurs se r\u00e9p\u00e8tent si la collection est plus petite table.Columns[\"Q1\", \"Q2\", \"Q3\", \"Q4\"].Values = [0, 1] # Affecte alternativement 0 et 1 Manipulation des cellules (style + valeur) Les cellules permettent d'acc\u00e9der et de modifier \u00e0 la fois les valeurs et leur mise en forme : # Acc\u00e8s aux cellules colCells = table.Columns[\"Revenue\"].Cells # Collection de cellules firstCell = table.Columns[1].Rows[1].Cell # Une cellule sp\u00e9cifique # Modification du contenu et du style cell = table.Columns[1].Rows[2].Cell cell.Content = \"Nouveau contenu\" # Valeur de la cellule cell.Bold = True # Mise en gras cell.Italic = True # Mise en italique cell.Foreground = Color.Red # Couleur du texte cell.Background = Color.LightGray # Couleur de fond cell.Format = \"#,##0.00\" # Format d'affichage (nombres) cell.HorizontalAlignment = HorizontalAlignment.Right # Alignement # Cr\u00e9ation d'une cellule format\u00e9e formattedCell = Cell(\"Valeur importante\") formattedCell.Bold = True formattedCell.Foreground = Color.Blue table.Columns[1].Rows[3].Cell = formattedCell 5. Manipulations des dimensions et axes Extraction et s\u00e9lection # Extraction d'une sous-table \u00e0 partir d'axes revenueByQuarter = table.Columns[\"Revenue\"].Rows[\"Q1\", \"Q2\", \"Q3\", \"Q4\"] # Extraction d'un niveau de dimension productLevel = table.ColumnsDimension.Levels[1].Extract() # Extraction de toutes les colonnes correspondant \u00e0 un motif europeColumns = table.Columns[\"Europe*\"] # Utilise des patterns Ajout et suppression # Ajout d'un niveau d'ent\u00eate tableWithNewHeader = table.ColumnsDimension.AppendLevel([\"Cat1\", \"Cat1\", \"Cat2\", \"Cat2\"]) # Ajout d'une colonne (\u00e0 la fin) tableWithNewCol = table.Columns.Append(\"Nouvelle colonne\") # Ajout d'une ligne (au d\u00e9but) tableWithNewRow = table.Rows.Prepend(\"Nouvelle ligne\") # Suppression d'une colonne tableWithoutFirstCol = table.Columns.Remove(1) # Suppression de plusieurs lignes tableWithoutRows = table.Rows.Remove(\"Ligne A\", \"Ligne C\") R\u00e9organisation des ent\u00eates # R\u00e9organisation d'un ent\u00eate de colonne # (positif = depuis racine, n\u00e9gatif = depuis feuilles) newColOrder = table.ColumnsDimension.ReorganizeHeader(2, 1, -1) # Niveaux 2, 1, puis feuilles # Redimensionnement d'un ent\u00eate (ajoute ou supprime des niveaux) threeRowLevels = table.RowsDimension.ResizeHeader(3) # Force 3 niveaux d'ent\u00eate # R\u00e9\u00e9criture compl\u00e8te d'un ent\u00eate avec diff\u00e9rents types d'\u00e9l\u00e9ments newHeader = table.ColumnsDimension.RewriteHeader([ \"R\u00e9gion\", # Texte litt\u00e9ral \"*\", # Conserve tous les niveaux existants \"[NAME]\" # Valeur d'annotation ]) # R\u00e9\u00e9criture avec format newHeader2 = table.ColumnsDimension.RewriteHeaderUsingFormat(\"-1;-2;\\\"EXTRA\\\"\") D\u00e9placement d'\u00e9l\u00e9ments # D\u00e9placer des \u00e9l\u00e9ments en haut tableWithUSFirst = table.Columns.MoveToTop(\"US\") # D\u00e9placer des \u00e9l\u00e9ments \u00e0 la fin tableWithTotalLast = table.Rows.MoveToBottom(\"Total\") # D\u00e9placer avant/apr\u00e8s tableWithMoved = table.Rows.Move(\"Q2\", MoveKinds.Before) # Options: Before, After, First, Last 6. Op\u00e9rations avanc\u00e9es Fusion de tables # Fusion horizontale (ajoute des colonnes) merged1 = HTTable.MergeColumns( [table1, table2], useSmartMerge=True, annotationsKeys=[\"SOURCE\"] ) # Fusion verticale (ajoute des lignes) merged2 = HTTable.MergeRows([table1, table2]) # Fusion \"intelligente\" qui harmonise d'abord les dimensions harmonizedTables = HTTable.Harmonize(TableDirections.Vertical, [table1, table2]) mergedHarmonized = HTTable.MergeColumns(harmonizedTables) D\u00e9coupage de tables # D\u00e9coupage par dimension northTable, southTable = table.Columns.SplitByDelimiters(\"|\") # D\u00e9coupage en parties \u00e9gales (ici en trois parties) parts = table.Rows.SplitBySizes([5, 5, 5]) # 5 lignes par partie # D\u00e9coupage avanc\u00e9 respectant la hi\u00e9rarchie pages = table.RowsDimension.AdvancedSplit(maxItemsPerPage=20, tolerance=2) # D\u00e9coupage par valeurs q1, q2, q3, q4 = table.Rows.SplitOnValues(\"Quarter\") Transposition # Transformer lignes en colonnes et vice-versa transposed = table.Transpose() Agr\u00e9gation # Agr\u00e9gation avec op\u00e9ration Sum (options : Sum, Count, Min, Max, etc.) totalRow = table.Rows.Aggregate(Aggregator.Sum, AggregatorModes.Last, \"Total\") # Ajout d'une ligne de total withTotalRow = table.Rows.AppendTotal() # R\u00e9ductions rapides sumTable = table.Columns.Sum() avgTable = table.Columns.Mean() Tri # Tri des lignes par une colonne sortedByRevenue = table.Rows.Sort(criteria=\"Revenue\", ascendant=True) # Tri avanc\u00e9 respectant la hi\u00e9rarchie sortedHierarchy = table.RowsDimension.AdvancedSort( criteria=\"Revenue\", ascendant=False, sortGroups=True ) Filtrage # Extraction selon une condition positiveValues = table.Rows.ExtractIf(lambda item: item.AsDouble() > 0) # Suppression des \u00e9l\u00e9ments vides nonEmptyTable = table.Columns.RemoveEmpty() # Filtrage rapide \"WHERE\" style filteredTable = table.Where(\"Country\", \"France\") multiFilter = table.Where([\"Revenue\", \"Margin\"], value => value > 1000, any=True) 7. Manipulation des calculs Types de placements Les calculs peuvent \u00eatre positionn\u00e9s de diff\u00e9rentes fa\u00e7ons : AxisPlacement.InRows : Calculs en lignes AxisPlacement.InColumns : Calculs en colonnes AxisPlacement.Cells : Calculs dans les cellules AxisPlacement.None : Aucun calcul # V\u00e9rifier si la table a des calculs hasCalcs = table.HasCalculations # D\u00e9finir le placement des calculs table.CalculationsPlacement = AxisPlacement.InColumns # D\u00e9placer les calculs table = table.Calculations.MoveToCells() table = table.Calculations.MoveTo(AxisPlacement.InColumns) Acc\u00e8s aux calculs # Acc\u00e8s \u00e0 un calcul par nom (quand ils sont en lignes ou colonnes) revenueTable = table.Calculations[\"REVENUE\"] marginTable = table.Calculations[\"MARGIN\"] # Acc\u00e8s \u00e0 un calcul par indice firstCalc = table.Calculations[1] # Liste des noms de calculs calcNames = table.Calculations.Names Calculs en cellules Lorsque les calculs sont plac\u00e9s dans les cellules, chaque cellule peut contenir plusieurs sous-cellules, une par calcul. # D\u00e9clarer des calculs en cellules avec un nom par d\u00e9faut table.AssumeInCellsCalculation(\"VALUE\") # Acc\u00e9der aux sous-cellules foreach cell in table.Cells: if cell.HasSubCells: valueCalc = cell.SubCells[\"VALUE\"].Content cell.SubCells[\"VALUE\"].Bold = True # Mise en forme Op\u00e9rations entre tables avec calculs # Addition de tables sumTable = table1.CalcSumWith(table2) # Division (par exemple pour calculer des pourcentages) percentTable = marginTable.CalcDivisionWith(revenueTable) # Autres op\u00e9rations disponibles minTable = table1.CalcMinWith(table2) avgTable = table1.CalcMeanWith(table2, table3) 9. Exemples pratiques Exemple 1 : Construction et manipulation d'une table de ventes # Cr\u00e9ation d'une table avec ent\u00eates salesTable = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"Product A\", \"Product B\", \"Product C\"]) # Modification des valeurs for r in range(1, 5): # Lignes (trimestres) for c in range(1, 4): # Colonnes (produits) salesTable.SetAt(r, c, r * c * 100) # Valeurs de vente fictives # Ajout d'un niveau d'ent\u00eate pour grouper les produits salesTable = salesTable.ColumnsDimension.PrependLevel([\"Hardware\", \"Hardware\", \"Software\"]) # Ajout d'une ligne de total salesTable = salesTable.Rows.AppendTotal() # Extraction d'une sous-table pour l'analyse hardwareData = salesTable.Columns[\"Hardware\"].Extract() Exemple 2 : Analyse multidimensionnelle # Table de d\u00e9part avec dimensions R\u00e9gion > Pays et Ann\u00e9e > Trimestre salesData = HTTable.FromFile(\"sales_data.xlsx\") # R\u00e9organisation des ent\u00eates pour placer Ann\u00e9e au plus haut newDimOrder = salesData.ColumnsDimension.ReorganizeHeader(2, 1, -1) # Ann\u00e9e, R\u00e9gion, Trimestre # Extraction des donn\u00e9es europ\u00e9ennes de 2022 europe2022 = newDimOrder.Columns[\"2022\"].Columns[\"Europe*\"].Extract() # Ajout d'une colonne de croissance (%) withGrowth = europe2022.Columns.AppendHeader(\"Growth %\") # Calcul de la croissance (en utilisant les tables pr\u00e9c\u00e9dentes) for r in range(1, europe2022.RowCount + 1): current = europe2022.GetAt(r, 2) # Q2 previous = europe2022.GetAt(r, 1) # Q1 growth = (current - previous) / previous * 100 if previous != 0 else 0 withGrowth.SetAt(r, withGrowth.ColumnCount, growth) # Tri des pays par croissance sortedByGrowth = withGrowth.Rows.Sort(\"Growth %\", ascendant=False) Exemple 3 : Utilisation des calculs et fusions # Cr\u00e9ation d'une table avec plusieurs calculs revenueData = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"US\", \"Europe\", \"Asia\"]) costData = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"US\", \"Europe\", \"Asia\"]) # Remplissage avec des donn\u00e9es # [Code omis pour brevit\u00e9] # Fusion des tables avec annotations financialTable = HTTable.MergeCalculations( [revenueData, costData], useSmartMerge=True, outputCalculations=AxisPlacement.InColumns ) # Renommage des calculs financialTable.Calculations.Names = [\"REVENUE\", \"COST\"] # Calcul de la marge directement via une op\u00e9ration de table marginTable = financialTable.Calculations[\"REVENUE\"].CalcSubtractWith( financialTable.Calculations[\"COST\"] ) # Ajout du calcul de marge \u00e0 la table principale withMargin = HTTable.MergeCalculations( [financialTable, marginTable], outputCalculations=AxisPlacement.InColumns ) # Extraction des donn\u00e9es par r\u00e9gion et calcul usFinancials = withMargin.Columns[\"US\"] europeProfitability = withMargin.Columns[\"Europe\"].Calculations[\"MARGIN\"]","title":"Documentation HTTable"},{"location":"HTTable%20-%20Basics/#documentation-httable","text":"","title":"Documentation HTTable"},{"location":"HTTable%20-%20Basics/#1-introduction","text":"HTTable est une structure de donn\u00e9es avanc\u00e9e pour manipuler des tableaux comportant des ent\u00eates hi\u00e9rarchiques en lignes et colonnes. Elle facilite l'analyse et la transformation de donn\u00e9es tabulaires complexes.","title":"1. Introduction"},{"location":"HTTable%20-%20Basics/#structure-fondamentale","text":"Une HTTable comporte trois parties principales : Ent\u00eates - Hi\u00e9rarchiques et multi-niveaux : Ent\u00eates de colonnes (horizontaux) Ent\u00eates de lignes (verticaux) Corps du tableau - Contient les donn\u00e9es effectives Annotations - M\u00e9tadonn\u00e9es associ\u00e9es \u00e0 la table","title":"Structure fondamentale"},{"location":"HTTable%20-%20Basics/#terminologie-essentielle","text":"Axe : Ensemble d'\u00e9l\u00e9ments organis\u00e9s selon une direction (ligne ou colonne) Niveau : Ligne ou colonne sp\u00e9cifique dans une dimension (un niveau d'ent\u00eate) Dimension : Regroupe tous les niveaux de hi\u00e9rarchie dans une direction (lignes ou colonnes) Calcul : Valeur d\u00e9riv\u00e9e pouvant \u00eatre plac\u00e9e dans diff\u00e9rentes parties de la table Cellule : Unit\u00e9 fondamentale de stockage des donn\u00e9es","title":"Terminologie essentielle"},{"location":"HTTable%20-%20Basics/#3-concepts-structurels","text":"","title":"3. Concepts structurels"},{"location":"HTTable%20-%20Basics/#hierarchie-des-concepts","text":"HTTable \u251c\u2500\u2500 ColumnsDimension (tous les niveaux d'ent\u00eates de colonnes) \u2502 \u2514\u2500\u2500 Columns (feuilles de la dimension) \u251c\u2500\u2500 RowsDimension (tous les niveaux d'ent\u00eates de lignes) \u2502 \u2514\u2500\u2500 Rows (feuilles de la dimension) \u251c\u2500\u2500 Calculations (peut \u00eatre en lignes, colonnes ou cellules) \u251c\u2500\u2500 Annotations (m\u00e9tadonn\u00e9es) \u2514\u2500\u2500 Body (corps de la table)","title":"Hi\u00e9rarchie des concepts"},{"location":"HTTable%20-%20Basics/#axes-et-dimensions","text":"La structure d'une HTTable s'articule autour de plusieurs axes et dimensions : # Dimensions (regroupent tous les niveaux hi\u00e9rarchiques) colDim = table.ColumnsDimension # Tous les niveaux d'ent\u00eates de colonnes rowDim = table.RowsDimension # Tous les niveaux d'ent\u00eates de lignes # Axes des feuilles (niveau le plus bas de la hi\u00e9rarchie) cols = table.Columns # Acc\u00e8s simplifi\u00e9 aux colonnes du corps rows = table.Rows # Acc\u00e8s simplifi\u00e9 aux lignes du corps # Calculs (plac\u00e9s en lignes, colonnes ou cellules) calcs = table.Calculations","title":"Axes et dimensions"},{"location":"HTTable%20-%20Basics/#niveaux-des-dimensions","text":"Les dimensions contiennent plusieurs niveaux, qui repr\u00e9sentent les diff\u00e9rentes couches de la hi\u00e9rarchie : # Acc\u00e8s aux niveaux d'une dimension (origine 1) level1 = colDim.Levels[1] # Premier niveau (racine) level2 = colDim.Levels[2] # Deuxi\u00e8me niveau leafLevel = colDim.Leaves # Dernier niveau (feuilles) # Acc\u00e8s avec indexation n\u00e9gative rootLevel = rowDim.Roots # Premier niveau (\u00e9quivalent \u00e0 Levels[1]) subTitleLevel = rowDim.SubTitles # Avant-dernier niveau","title":"Niveaux des dimensions"},{"location":"HTTable%20-%20Basics/#entetes","text":"Les ent\u00eates d\u00e9finissent la structure et organisent les donn\u00e9es : # Acc\u00e8s aux ent\u00eates colHeader = table.ColumnsHeader rowHeader = table.RowsHeader # Nombre de niveaux dans les ent\u00eates colHeaderLevels = table.ColumnHeaderSize rowHeaderLevels = table.RowHeaderSize","title":"Ent\u00eates"},{"location":"HTTable%20-%20Basics/#corps","text":"Le corps contient les donn\u00e9es sans les ent\u00eates : # Acc\u00e8s au corps (table sans les ent\u00eates) body = table.Body # Tailles du corps bodyRowCount = table.RowCount bodyColCount = table.ColumnCount # Tailles de la table compl\u00e8te (avec ent\u00eates) tableRowCount = table.TableRowCount tableColCount = table.TableColumnCount","title":"Corps"},{"location":"HTTable%20-%20Basics/#4-acces-aux-donnees","text":"","title":"4. Acc\u00e8s aux donn\u00e9es"},{"location":"HTTable%20-%20Basics/#acces-par-axes-et-dimensions","text":"L'acc\u00e8s aux donn\u00e9es via les axes est le moyen principal de manipuler une HTTable. Important : Ces op\u00e9rations retournent une HTTable qui r\u00e9f\u00e9rence la table parent, permettant ainsi de lire et modifier les donn\u00e9es dans une sous-partie de la table d'origine : # Acc\u00e8s \u00e0 une colonne (retourne une HTTable li\u00e9e \u00e0 la table parente) firstCol = table.Columns[1] # Premi\u00e8re colonne colsA_C = table.Columns[\"A\", \"B\", \"C\"] # S\u00e9lection par noms # Acc\u00e8s \u00e0 une ligne (retourne une HTTable li\u00e9e \u00e0 la table parente) secondRow = table.Rows[2] # Deuxi\u00e8me ligne totalsRow = table.Rows[\"Totals\"] # S\u00e9lection par nom # Acc\u00e8s \u00e0 un niveau sp\u00e9cifique dans une dimension prodCategories = table.ColumnsDimension.Levels[1] # Premier niveau d'ent\u00eate de colonnes monthLevel = table.RowsDimension.Levels[2] # Deuxi\u00e8me niveau d'ent\u00eate de lignes # Acc\u00e8s aux \u00e9l\u00e9ments d'un niveau sp\u00e9cifique categoryNames = prodCategories.Texts # Textes du premier niveau d'ent\u00eate de colonnes monthNames = monthLevel.Texts # Textes du deuxi\u00e8me niveau d'ent\u00eate de lignes # Modification via la vue (affecte la table parente) firstCol.SetAt(1, 1, \"Nouvelle valeur\") # Modifie la premi\u00e8re cellule de la premi\u00e8re colonne","title":"Acc\u00e8s par axes et dimensions"},{"location":"HTTable%20-%20Basics/#acces-par-croisement-daxes","text":"Les croisements d'axes permettent d'acc\u00e9der \u00e0 des zones sp\u00e9cifiques : # S\u00e9lection d'une cellule par croisement de coords cell = table.Rows[3].Columns[2] # S\u00e9lection d'une zone quarterData = table.Rows[\"Q1\"].Columns[\"Product A\", \"Product B\"] # S\u00e9lection avec un calcul sp\u00e9cifique revenueForQ1 = table.Rows[\"Q1\"].Calculations[\"REVENUE\"]","title":"Acc\u00e8s par croisement d'axes"},{"location":"HTTable%20-%20Basics/#acces-et-modification-des-valeurs","text":"HTTable offre plusieurs fa\u00e7ons d'acc\u00e9der et de modifier les valeurs selon les zones (corps, ent\u00eates) et les types de donn\u00e9es.","title":"Acc\u00e8s et modification des valeurs"},{"location":"HTTable%20-%20Basics/#acces-aux-valeurs","text":"# Acc\u00e8s aux valeurs brutes du corps colValues = table.Columns[1].Values # Toutes les valeurs de la premi\u00e8re colonne rowValues = table.Rows[2].Values # Toutes les valeurs de la deuxi\u00e8me ligne cellValue = table.Columns[1].Rows[3].Value # Valeur \u00e0 l'intersection # Acc\u00e8s typ\u00e9 aux valeurs num\u00e9riques colNumbers = table.Columns[\"Revenue\"].Numbers # En tant que doubles rowIntegers = table.Rows[\"Count\"].Integers # En tant qu'entiers # Acc\u00e8s aux textes (conversion automatique en cha\u00eenes) colTexts = table.Columns[1].Texts # Textes du corps headerTexts = table.Columns.Texts # Textes de l'ent\u00eate des colonnes (niveau feuilles) levelTexts = table.ColumnsDimension.Levels[1].Texts # Textes d'un niveau sp\u00e9cifique d'ent\u00eate","title":"Acc\u00e8s aux valeurs"},{"location":"HTTable%20-%20Basics/#modification-des-valeurs","text":"La modification des valeurs d\u00e9pend de la zone cibl\u00e9e (corps ou ent\u00eates) : # Modification du corps du tableau table.Columns[1].Rows[2].Value = 42 # Modifie une cellule sp\u00e9cifique du corps table.Columns[\"Q1\", \"Q2\"].Value = 0 # Met \u00e0 z\u00e9ro toutes les cellules des colonnes Q1 et Q2 # Modification des ent\u00eates table.Columns.Value = \"Trimestre\" # Modifie le texte de l'ent\u00eate des colonnes (niveau feuilles) table.Rows.Texts = [\"A\", \"B\", \"C\"] # Modifie les textes de l'ent\u00eate des lignes (niveau feuilles) table.ColumnsDimension.Levels[1].Value = \"Ann\u00e9e\" # Modifie un niveau sp\u00e9cifique d'ent\u00eate # Distribution de valeurs multiples table.Columns[1].Values = [10, 20, 30, 40] # Affecte ces valeurs aux 4 premi\u00e8res lignes table.Rows[\"Total\"].Values = [100, 200, 300] # Affecte ces valeurs aux 3 premi\u00e8res colonnes # Pour les grandes s\u00e9lections, les valeurs se r\u00e9p\u00e8tent si la collection est plus petite table.Columns[\"Q1\", \"Q2\", \"Q3\", \"Q4\"].Values = [0, 1] # Affecte alternativement 0 et 1","title":"Modification des valeurs"},{"location":"HTTable%20-%20Basics/#manipulation-des-cellules-style-valeur","text":"Les cellules permettent d'acc\u00e9der et de modifier \u00e0 la fois les valeurs et leur mise en forme : # Acc\u00e8s aux cellules colCells = table.Columns[\"Revenue\"].Cells # Collection de cellules firstCell = table.Columns[1].Rows[1].Cell # Une cellule sp\u00e9cifique # Modification du contenu et du style cell = table.Columns[1].Rows[2].Cell cell.Content = \"Nouveau contenu\" # Valeur de la cellule cell.Bold = True # Mise en gras cell.Italic = True # Mise en italique cell.Foreground = Color.Red # Couleur du texte cell.Background = Color.LightGray # Couleur de fond cell.Format = \"#,##0.00\" # Format d'affichage (nombres) cell.HorizontalAlignment = HorizontalAlignment.Right # Alignement # Cr\u00e9ation d'une cellule format\u00e9e formattedCell = Cell(\"Valeur importante\") formattedCell.Bold = True formattedCell.Foreground = Color.Blue table.Columns[1].Rows[3].Cell = formattedCell","title":"Manipulation des cellules (style + valeur)"},{"location":"HTTable%20-%20Basics/#5-manipulations-des-dimensions-et-axes","text":"","title":"5. Manipulations des dimensions et axes"},{"location":"HTTable%20-%20Basics/#extraction-et-selection","text":"# Extraction d'une sous-table \u00e0 partir d'axes revenueByQuarter = table.Columns[\"Revenue\"].Rows[\"Q1\", \"Q2\", \"Q3\", \"Q4\"] # Extraction d'un niveau de dimension productLevel = table.ColumnsDimension.Levels[1].Extract() # Extraction de toutes les colonnes correspondant \u00e0 un motif europeColumns = table.Columns[\"Europe*\"] # Utilise des patterns","title":"Extraction et s\u00e9lection"},{"location":"HTTable%20-%20Basics/#ajout-et-suppression","text":"# Ajout d'un niveau d'ent\u00eate tableWithNewHeader = table.ColumnsDimension.AppendLevel([\"Cat1\", \"Cat1\", \"Cat2\", \"Cat2\"]) # Ajout d'une colonne (\u00e0 la fin) tableWithNewCol = table.Columns.Append(\"Nouvelle colonne\") # Ajout d'une ligne (au d\u00e9but) tableWithNewRow = table.Rows.Prepend(\"Nouvelle ligne\") # Suppression d'une colonne tableWithoutFirstCol = table.Columns.Remove(1) # Suppression de plusieurs lignes tableWithoutRows = table.Rows.Remove(\"Ligne A\", \"Ligne C\")","title":"Ajout et suppression"},{"location":"HTTable%20-%20Basics/#reorganisation-des-entetes","text":"# R\u00e9organisation d'un ent\u00eate de colonne # (positif = depuis racine, n\u00e9gatif = depuis feuilles) newColOrder = table.ColumnsDimension.ReorganizeHeader(2, 1, -1) # Niveaux 2, 1, puis feuilles # Redimensionnement d'un ent\u00eate (ajoute ou supprime des niveaux) threeRowLevels = table.RowsDimension.ResizeHeader(3) # Force 3 niveaux d'ent\u00eate # R\u00e9\u00e9criture compl\u00e8te d'un ent\u00eate avec diff\u00e9rents types d'\u00e9l\u00e9ments newHeader = table.ColumnsDimension.RewriteHeader([ \"R\u00e9gion\", # Texte litt\u00e9ral \"*\", # Conserve tous les niveaux existants \"[NAME]\" # Valeur d'annotation ]) # R\u00e9\u00e9criture avec format newHeader2 = table.ColumnsDimension.RewriteHeaderUsingFormat(\"-1;-2;\\\"EXTRA\\\"\")","title":"R\u00e9organisation des ent\u00eates"},{"location":"HTTable%20-%20Basics/#deplacement-delements","text":"# D\u00e9placer des \u00e9l\u00e9ments en haut tableWithUSFirst = table.Columns.MoveToTop(\"US\") # D\u00e9placer des \u00e9l\u00e9ments \u00e0 la fin tableWithTotalLast = table.Rows.MoveToBottom(\"Total\") # D\u00e9placer avant/apr\u00e8s tableWithMoved = table.Rows.Move(\"Q2\", MoveKinds.Before) # Options: Before, After, First, Last","title":"D\u00e9placement d'\u00e9l\u00e9ments"},{"location":"HTTable%20-%20Basics/#6-operations-avancees","text":"","title":"6. Op\u00e9rations avanc\u00e9es"},{"location":"HTTable%20-%20Basics/#fusion-de-tables","text":"# Fusion horizontale (ajoute des colonnes) merged1 = HTTable.MergeColumns( [table1, table2], useSmartMerge=True, annotationsKeys=[\"SOURCE\"] ) # Fusion verticale (ajoute des lignes) merged2 = HTTable.MergeRows([table1, table2]) # Fusion \"intelligente\" qui harmonise d'abord les dimensions harmonizedTables = HTTable.Harmonize(TableDirections.Vertical, [table1, table2]) mergedHarmonized = HTTable.MergeColumns(harmonizedTables)","title":"Fusion de tables"},{"location":"HTTable%20-%20Basics/#decoupage-de-tables","text":"# D\u00e9coupage par dimension northTable, southTable = table.Columns.SplitByDelimiters(\"|\") # D\u00e9coupage en parties \u00e9gales (ici en trois parties) parts = table.Rows.SplitBySizes([5, 5, 5]) # 5 lignes par partie # D\u00e9coupage avanc\u00e9 respectant la hi\u00e9rarchie pages = table.RowsDimension.AdvancedSplit(maxItemsPerPage=20, tolerance=2) # D\u00e9coupage par valeurs q1, q2, q3, q4 = table.Rows.SplitOnValues(\"Quarter\")","title":"D\u00e9coupage de tables"},{"location":"HTTable%20-%20Basics/#transposition","text":"# Transformer lignes en colonnes et vice-versa transposed = table.Transpose()","title":"Transposition"},{"location":"HTTable%20-%20Basics/#agregation","text":"# Agr\u00e9gation avec op\u00e9ration Sum (options : Sum, Count, Min, Max, etc.) totalRow = table.Rows.Aggregate(Aggregator.Sum, AggregatorModes.Last, \"Total\") # Ajout d'une ligne de total withTotalRow = table.Rows.AppendTotal() # R\u00e9ductions rapides sumTable = table.Columns.Sum() avgTable = table.Columns.Mean()","title":"Agr\u00e9gation"},{"location":"HTTable%20-%20Basics/#tri","text":"# Tri des lignes par une colonne sortedByRevenue = table.Rows.Sort(criteria=\"Revenue\", ascendant=True) # Tri avanc\u00e9 respectant la hi\u00e9rarchie sortedHierarchy = table.RowsDimension.AdvancedSort( criteria=\"Revenue\", ascendant=False, sortGroups=True )","title":"Tri"},{"location":"HTTable%20-%20Basics/#filtrage","text":"# Extraction selon une condition positiveValues = table.Rows.ExtractIf(lambda item: item.AsDouble() > 0) # Suppression des \u00e9l\u00e9ments vides nonEmptyTable = table.Columns.RemoveEmpty() # Filtrage rapide \"WHERE\" style filteredTable = table.Where(\"Country\", \"France\") multiFilter = table.Where([\"Revenue\", \"Margin\"], value => value > 1000, any=True)","title":"Filtrage"},{"location":"HTTable%20-%20Basics/#7-manipulation-des-calculs","text":"","title":"7. Manipulation des calculs"},{"location":"HTTable%20-%20Basics/#types-de-placements","text":"Les calculs peuvent \u00eatre positionn\u00e9s de diff\u00e9rentes fa\u00e7ons : AxisPlacement.InRows : Calculs en lignes AxisPlacement.InColumns : Calculs en colonnes AxisPlacement.Cells : Calculs dans les cellules AxisPlacement.None : Aucun calcul # V\u00e9rifier si la table a des calculs hasCalcs = table.HasCalculations # D\u00e9finir le placement des calculs table.CalculationsPlacement = AxisPlacement.InColumns # D\u00e9placer les calculs table = table.Calculations.MoveToCells() table = table.Calculations.MoveTo(AxisPlacement.InColumns)","title":"Types de placements"},{"location":"HTTable%20-%20Basics/#acces-aux-calculs","text":"# Acc\u00e8s \u00e0 un calcul par nom (quand ils sont en lignes ou colonnes) revenueTable = table.Calculations[\"REVENUE\"] marginTable = table.Calculations[\"MARGIN\"] # Acc\u00e8s \u00e0 un calcul par indice firstCalc = table.Calculations[1] # Liste des noms de calculs calcNames = table.Calculations.Names","title":"Acc\u00e8s aux calculs"},{"location":"HTTable%20-%20Basics/#calculs-en-cellules","text":"Lorsque les calculs sont plac\u00e9s dans les cellules, chaque cellule peut contenir plusieurs sous-cellules, une par calcul. # D\u00e9clarer des calculs en cellules avec un nom par d\u00e9faut table.AssumeInCellsCalculation(\"VALUE\") # Acc\u00e9der aux sous-cellules foreach cell in table.Cells: if cell.HasSubCells: valueCalc = cell.SubCells[\"VALUE\"].Content cell.SubCells[\"VALUE\"].Bold = True # Mise en forme","title":"Calculs en cellules"},{"location":"HTTable%20-%20Basics/#operations-entre-tables-avec-calculs","text":"# Addition de tables sumTable = table1.CalcSumWith(table2) # Division (par exemple pour calculer des pourcentages) percentTable = marginTable.CalcDivisionWith(revenueTable) # Autres op\u00e9rations disponibles minTable = table1.CalcMinWith(table2) avgTable = table1.CalcMeanWith(table2, table3)","title":"Op\u00e9rations entre tables avec calculs"},{"location":"HTTable%20-%20Basics/#9-exemples-pratiques","text":"","title":"9. Exemples pratiques"},{"location":"HTTable%20-%20Basics/#exemple-1-construction-et-manipulation-dune-table-de-ventes","text":"# Cr\u00e9ation d'une table avec ent\u00eates salesTable = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"Product A\", \"Product B\", \"Product C\"]) # Modification des valeurs for r in range(1, 5): # Lignes (trimestres) for c in range(1, 4): # Colonnes (produits) salesTable.SetAt(r, c, r * c * 100) # Valeurs de vente fictives # Ajout d'un niveau d'ent\u00eate pour grouper les produits salesTable = salesTable.ColumnsDimension.PrependLevel([\"Hardware\", \"Hardware\", \"Software\"]) # Ajout d'une ligne de total salesTable = salesTable.Rows.AppendTotal() # Extraction d'une sous-table pour l'analyse hardwareData = salesTable.Columns[\"Hardware\"].Extract()","title":"Exemple 1 : Construction et manipulation d'une table de ventes"},{"location":"HTTable%20-%20Basics/#exemple-2-analyse-multidimensionnelle","text":"# Table de d\u00e9part avec dimensions R\u00e9gion > Pays et Ann\u00e9e > Trimestre salesData = HTTable.FromFile(\"sales_data.xlsx\") # R\u00e9organisation des ent\u00eates pour placer Ann\u00e9e au plus haut newDimOrder = salesData.ColumnsDimension.ReorganizeHeader(2, 1, -1) # Ann\u00e9e, R\u00e9gion, Trimestre # Extraction des donn\u00e9es europ\u00e9ennes de 2022 europe2022 = newDimOrder.Columns[\"2022\"].Columns[\"Europe*\"].Extract() # Ajout d'une colonne de croissance (%) withGrowth = europe2022.Columns.AppendHeader(\"Growth %\") # Calcul de la croissance (en utilisant les tables pr\u00e9c\u00e9dentes) for r in range(1, europe2022.RowCount + 1): current = europe2022.GetAt(r, 2) # Q2 previous = europe2022.GetAt(r, 1) # Q1 growth = (current - previous) / previous * 100 if previous != 0 else 0 withGrowth.SetAt(r, withGrowth.ColumnCount, growth) # Tri des pays par croissance sortedByGrowth = withGrowth.Rows.Sort(\"Growth %\", ascendant=False)","title":"Exemple 2 : Analyse multidimensionnelle"},{"location":"HTTable%20-%20Basics/#exemple-3-utilisation-des-calculs-et-fusions","text":"# Cr\u00e9ation d'une table avec plusieurs calculs revenueData = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"US\", \"Europe\", \"Asia\"]) costData = HTTable.Create([\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [\"US\", \"Europe\", \"Asia\"]) # Remplissage avec des donn\u00e9es # [Code omis pour brevit\u00e9] # Fusion des tables avec annotations financialTable = HTTable.MergeCalculations( [revenueData, costData], useSmartMerge=True, outputCalculations=AxisPlacement.InColumns ) # Renommage des calculs financialTable.Calculations.Names = [\"REVENUE\", \"COST\"] # Calcul de la marge directement via une op\u00e9ration de table marginTable = financialTable.Calculations[\"REVENUE\"].CalcSubtractWith( financialTable.Calculations[\"COST\"] ) # Ajout du calcul de marge \u00e0 la table principale withMargin = HTTable.MergeCalculations( [financialTable, marginTable], outputCalculations=AxisPlacement.InColumns ) # Extraction des donn\u00e9es par r\u00e9gion et calcul usFinancials = withMargin.Columns[\"US\"] europeProfitability = withMargin.Columns[\"Europe\"].Calculations[\"MARGIN\"]","title":"Exemple 3 : Utilisation des calculs et fusions"},{"location":"HTTable%20-%20Use%20Cases%201/","text":"Navigation et Acc\u00e8s aux Donn\u00e9es # Exploration d'une table avec ent\u00eates hi\u00e9rarchiques def ExploreTable(table): \"\"\"Illustration des m\u00e9thodes d'acc\u00e8s basiques d'une HTTable\"\"\" # Nombre de cellules dans le corps de la table tableSize = table.RowCount * table.ColumnCount # Nb niveaux d'ent\u00eates colonnes / lignes nbhc = table.ColumnHeaderSize nbhr = table.RowHeaderSize # Acc\u00e8s aux textes d'ent\u00eates columnsLabels = table.Columns.Texts rowsLabels = table.Rows.Texts # Acc\u00e8s au premier niveau de hi\u00e9rarchie (racines) rootColumns = table.ColumnsDimension.Roots.Texts rootRows = table.RowsDimension.Roots.Texts # Acc\u00e8s par indice (positif depuis le d\u00e9but, n\u00e9gatif depuis la fin) firstColumn = table.Columns[1] lastColumn = table.Columns[-1] # Acc\u00e8s par nom specificColumn = table.Columns[\"FR\"] # Le r\u00e9sultat comporte autant de lignes qu'il y a de lignes \"TOTAL\" dans table totalRows = table.Rows[\"TOTAL\"] # Acc\u00e8s crois\u00e9 (cellule sp\u00e9cifique) cell = table.Columns[\"FR\"].Rows[\"TOTAL\"] cellValue = cell.Value # Acc\u00e8s aux valeurs sous forme typ\u00e9e numbersInFirstColumn = table.Columns[1].Numbers textsInLastRow = table.Rows[-1].Texts return firstColumn, specificColumn 2. Extraction et Filtrage # S\u00e9lection et extraction de sous-parties d'une table def ExtractData(salesTable): \"\"\"D\u00e9montre diff\u00e9rentes m\u00e9thodes d'extraction et de filtrage\"\"\" # Extraction de colonnes sp\u00e9cifiques franceAndSpain = salesTable.Columns[\"FR\", \"ES\"] # Extraction par motif/pattern europeanCountries = salesTable.Columns[\"EU*\"] # Extraction sur le 1er niveau hi\u00e9rarchique genderLevel = salesTable.Columns.Roots[1] # Extraction par position relative dans une hi\u00e9rarchie # Select \"$1\" = premier \u00e9l\u00e9ment sous chaque parent firstProductPerCategory = salesTable.Columns[\"$1\"] # Suppression de colonnes withoutFirstColumn = salesTable.Columns.Remove(1) # Suppression de lignes vides withoutEmptyRows = salesTable.Rows.RemoveEmpty() return franceAndSpain, highValues Manipulation des Dimensions # R\u00e9organisation et manipulation des dimensions def ReshapeTable(table): \"\"\"Montre comment manipuler la structure des dimensions\"\"\" # Transposition (lignes \u2194 colonnes) transposed = table.Transpose() # Inversion d'un ordre de dimension ou d'axe reversedColumns = table.Columns.Reverse() # R\u00e9organisation de la hi\u00e9rarchie des ent\u00eates # Les racines (niveau 1) deviennent des feuilles (-1) reorganized = table.ColumnsDimension.ReorganizeHeader(-1, 1) # D\u00e9claration d'un axe personnalis\u00e9 (alias) table.DeclareCustomAxis(\"COUNTRIES\", \"R\", TableDirections.Vertical) # Utilisation de l'axe personnalis\u00e9 franceData = table.Axes[\"COUNTRIES\"][\"FR\"] # Reshaping (modification profonde de la structure) reshaped = table.ReShape([\"V1\", \"H2\"], [\"H1\"]) # D\u00e9placement d'\u00e9l\u00e9ments withTotalOnTop = table.Rows.MoveToTop(\"TOTAL\") return True Fusion et Agr\u00e9gation # Fusion et combinaison de tables def MergeTables(table1, table2): \"\"\"D\u00e9montre les op\u00e9rations de fusion et d'agr\u00e9gation\"\"\" # Fusion horizontale (ajout de colonnes) # \"True\" pour faire un \"SmartMerge\" qui identifie les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedColumns = HTTable.MergeColumns([table1, table2], True) # Fusion verticale (ajout de lignes) # \"True\" pour faire un \"SmartMerge\" qui identifie les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedRows = HTTable.MergeRows([table1, table2], True) # Fusion de calculs (combinaison de mesures) # \"True\" pour faire un \"SmartMerge\" qui identifie les lignes et les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedCalcs = HTTable.MergeCalculations([table1, table2], True) # Ajoute une ligne \"TOTAL\" qui calcule la somme des lignes pour chaque colonne withTotal = table1.Rows.AppendTotal(\"TOTAL\") # Ajoute une colonne \"TOTAL\" qui calcule la somme des colonne pour chaque ligne withTotalColumn = table1.Columns.AppendTotal(\"TOTAL\") return True D\u00e9coupe de tables (Split) : pour boucler sur les lignes/les colonnes # D\u00e9coupe / Split def SplitTable(table): \"\"\"D\u00e9montre les op\u00e9rations de d\u00e9coupe\"\"\" # Retourne une table extraite par ligne splittedRows = table.Rows.Split() # Boucle sur chaque ligne de la table for splittedRow in splittedRows: # Calcul la valeur maximale de la ligne maxi = max(splittedRow.Numbers) # Division d'une table par d\u00e9limiteurs : chaque colonne \"TOTAL\" marquera le d\u00e9but d'une table parts = table.Columns.SplitByDelimiters(\"TOTAL\") # Division en une partie de 2 lignes et une partie de 3 lignes pages = table.Rows.SplitBySizes([2, 3]) # D\u00e9coupe table en 4 parties, aux positions 5, 7, et 11 parts = table.Rows.SplitByPositions([5, 7, 11]) return True","title":"HTTable   Use Cases 1"},{"location":"HTTable%20-%20Use%20Cases%201/#navigation-et-acces-aux-donnees","text":"# Exploration d'une table avec ent\u00eates hi\u00e9rarchiques def ExploreTable(table): \"\"\"Illustration des m\u00e9thodes d'acc\u00e8s basiques d'une HTTable\"\"\" # Nombre de cellules dans le corps de la table tableSize = table.RowCount * table.ColumnCount # Nb niveaux d'ent\u00eates colonnes / lignes nbhc = table.ColumnHeaderSize nbhr = table.RowHeaderSize # Acc\u00e8s aux textes d'ent\u00eates columnsLabels = table.Columns.Texts rowsLabels = table.Rows.Texts # Acc\u00e8s au premier niveau de hi\u00e9rarchie (racines) rootColumns = table.ColumnsDimension.Roots.Texts rootRows = table.RowsDimension.Roots.Texts # Acc\u00e8s par indice (positif depuis le d\u00e9but, n\u00e9gatif depuis la fin) firstColumn = table.Columns[1] lastColumn = table.Columns[-1] # Acc\u00e8s par nom specificColumn = table.Columns[\"FR\"] # Le r\u00e9sultat comporte autant de lignes qu'il y a de lignes \"TOTAL\" dans table totalRows = table.Rows[\"TOTAL\"] # Acc\u00e8s crois\u00e9 (cellule sp\u00e9cifique) cell = table.Columns[\"FR\"].Rows[\"TOTAL\"] cellValue = cell.Value # Acc\u00e8s aux valeurs sous forme typ\u00e9e numbersInFirstColumn = table.Columns[1].Numbers textsInLastRow = table.Rows[-1].Texts return firstColumn, specificColumn","title":"Navigation et Acc\u00e8s aux Donn\u00e9es"},{"location":"HTTable%20-%20Use%20Cases%201/#2-extraction-et-filtrage","text":"# S\u00e9lection et extraction de sous-parties d'une table def ExtractData(salesTable): \"\"\"D\u00e9montre diff\u00e9rentes m\u00e9thodes d'extraction et de filtrage\"\"\" # Extraction de colonnes sp\u00e9cifiques franceAndSpain = salesTable.Columns[\"FR\", \"ES\"] # Extraction par motif/pattern europeanCountries = salesTable.Columns[\"EU*\"] # Extraction sur le 1er niveau hi\u00e9rarchique genderLevel = salesTable.Columns.Roots[1] # Extraction par position relative dans une hi\u00e9rarchie # Select \"$1\" = premier \u00e9l\u00e9ment sous chaque parent firstProductPerCategory = salesTable.Columns[\"$1\"] # Suppression de colonnes withoutFirstColumn = salesTable.Columns.Remove(1) # Suppression de lignes vides withoutEmptyRows = salesTable.Rows.RemoveEmpty() return franceAndSpain, highValues","title":"2. Extraction et Filtrage"},{"location":"HTTable%20-%20Use%20Cases%201/#manipulation-des-dimensions","text":"# R\u00e9organisation et manipulation des dimensions def ReshapeTable(table): \"\"\"Montre comment manipuler la structure des dimensions\"\"\" # Transposition (lignes \u2194 colonnes) transposed = table.Transpose() # Inversion d'un ordre de dimension ou d'axe reversedColumns = table.Columns.Reverse() # R\u00e9organisation de la hi\u00e9rarchie des ent\u00eates # Les racines (niveau 1) deviennent des feuilles (-1) reorganized = table.ColumnsDimension.ReorganizeHeader(-1, 1) # D\u00e9claration d'un axe personnalis\u00e9 (alias) table.DeclareCustomAxis(\"COUNTRIES\", \"R\", TableDirections.Vertical) # Utilisation de l'axe personnalis\u00e9 franceData = table.Axes[\"COUNTRIES\"][\"FR\"] # Reshaping (modification profonde de la structure) reshaped = table.ReShape([\"V1\", \"H2\"], [\"H1\"]) # D\u00e9placement d'\u00e9l\u00e9ments withTotalOnTop = table.Rows.MoveToTop(\"TOTAL\") return True","title":"Manipulation des Dimensions"},{"location":"HTTable%20-%20Use%20Cases%201/#fusion-et-agregation","text":"# Fusion et combinaison de tables def MergeTables(table1, table2): \"\"\"D\u00e9montre les op\u00e9rations de fusion et d'agr\u00e9gation\"\"\" # Fusion horizontale (ajout de colonnes) # \"True\" pour faire un \"SmartMerge\" qui identifie les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedColumns = HTTable.MergeColumns([table1, table2], True) # Fusion verticale (ajout de lignes) # \"True\" pour faire un \"SmartMerge\" qui identifie les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedRows = HTTable.MergeRows([table1, table2], True) # Fusion de calculs (combinaison de mesures) # \"True\" pour faire un \"SmartMerge\" qui identifie les lignes et les colonnes selon leur texte # \"False\" pour faire une fusion na\u00efve : les tables sont d\u00e9j\u00e0 coh\u00e9rentes mergedCalcs = HTTable.MergeCalculations([table1, table2], True) # Ajoute une ligne \"TOTAL\" qui calcule la somme des lignes pour chaque colonne withTotal = table1.Rows.AppendTotal(\"TOTAL\") # Ajoute une colonne \"TOTAL\" qui calcule la somme des colonne pour chaque ligne withTotalColumn = table1.Columns.AppendTotal(\"TOTAL\") return True","title":"Fusion et Agr\u00e9gation"},{"location":"HTTable%20-%20Use%20Cases%201/#decoupe-de-tables-split-pour-boucler-sur-les-lignesles-colonnes","text":"# D\u00e9coupe / Split def SplitTable(table): \"\"\"D\u00e9montre les op\u00e9rations de d\u00e9coupe\"\"\" # Retourne une table extraite par ligne splittedRows = table.Rows.Split() # Boucle sur chaque ligne de la table for splittedRow in splittedRows: # Calcul la valeur maximale de la ligne maxi = max(splittedRow.Numbers) # Division d'une table par d\u00e9limiteurs : chaque colonne \"TOTAL\" marquera le d\u00e9but d'une table parts = table.Columns.SplitByDelimiters(\"TOTAL\") # Division en une partie de 2 lignes et une partie de 3 lignes pages = table.Rows.SplitBySizes([2, 3]) # D\u00e9coupe table en 4 parties, aux positions 5, 7, et 11 parts = table.Rows.SplitByPositions([5, 7, 11]) return True","title":"D\u00e9coupe de tables (Split) : pour boucler sur les lignes/les colonnes"},{"location":"LEXIE/","text":"Lexie \u2013 La codification de verbatims r\u00e9invent\u00e9e Dans le sillage de Harmonie , Slidie et Quizzie , la suite ADN s\u2019enrichit d\u2019un nouvel outil pens\u00e9 pour r\u00e9soudre un probl\u00e8me tr\u00e8s concret\u202f: l\u2019enfer du post\u2011codage dans Excel . Les charg\u00e9s d\u2019\u00e9tudes, les freelances ou les stagiaires passent encore des heures \u00e0 copier\u2011coller des plans de codes, \u00e0 v\u00e9rifier des formules fragiles et \u00e0 r\u00e9\u2011importer des fichiers dans leurs logiciels statistiques. Lexie a \u00e9t\u00e9 con\u00e7u pour simplifier le process et optimiser le travail \u202f: faire le job, vite et bien , sans complexit\u00e9 inutile, et \u00e0 un co\u00fbt accessible. Une r\u00e9ponse directe aux limites d\u2019Excel Excel est universel, mais le codage statique devient vite un obstacle quand il s\u2019agit de coder des milliers de verbatims : difficile de r\u00e9organiser un plan de codes en cours de route, facile de briser une correspondance, impossible d\u2019avoir un contr\u00f4le qualit\u00e9 en temps r\u00e9el. Lexie transforme cette t\u00e2che lin\u00e9aire en un processus vivant : un plan de codes que l\u2019on r\u00e9organise par glisser\u2011d\u00e9poser, une clart\u00e9 d'affichage qui limite drastiquement les erreurs, l'affectation par lots, des statistiques de progression visibles \u00e0 chaque instant. Souverainet\u00e9 et flexibilit\u00e9 technique Beaucoup de solutions concurrentes imposent le tout SaaS . Lexie prend le parti inverse\u202f: 100\u202f% on\u2011premise , donc aucune donn\u00e9e qui quitte l\u2019infrastructure du client. L\u2019application fonctionne enti\u00e8rement hors ligne pour le codage manuel. L\u2019intelligence artificielle est \u00ab branchable \u00bb : l\u2019administrateur ajoute sa propre cl\u00e9 OpenAI, Azure AI ou Mistral et d\u00e9cide o\u00f9 transitent les donn\u00e9es. Cette approche Bring your own Key (\u00ab\u202fBYOK\u202f\u00bb) est doublement vertueuse : le client ma\u00eetrise ses co\u00fbts de tokenisation et demeure pleinement conforme au RGPD , puisque les verbatims ne sont jamais stock\u00e9s par un tiers. Un pont direct avec Harmonie Pour les utilisateurs d\u2019 Harmonie , Lexie n\u2019est pas \u00ab un outil de plus \u00bb\u202f: c\u2019est une \u00e9tape native du flux de traitement. Les variables cod\u00e9es apparaissent instantan\u00e9ment dans les \u00e9tudes HARMONIE, et l'utilisateur peut imm\u00e9diatement produire des tableaux crois\u00e9s, pond\u00e9r\u00e9s et filtr\u00e9s. Finies les \u00e9tapes d\u2019import\u2011export\u202f complexe et risqu\u00e9; la cha\u00eene de traitement est consid\u00e9tablement fluidifi\u00e9e. Fonctionnalit\u00e9s qui comptent vraiment Plan de codes ouvert et vivant : import depuis Excel, cr\u00e9ation in vivo directement depuis la lecture des verbatims, suggestions automatiques de th\u00e8mes quand l\u2019IA est activ\u00e9e, possibilit\u00e9 de grouper / modifier / r\u00e9affecter en cours de codification de fa\u00e7on dynamique et contr\u00f4l\u00e9e. R\u00e9\u2011application d\u00e9terministe : apr\u00e8s validation humaine, Lexie applique des r\u00e8gles exactes. Aucune surprise, aucun besoin de relecture inutile. Statistiques embarqu\u00e9es : nombre de verbatims cod\u00e9s, progression sur les clusters \u00e0 traiter, tris rapides pour v\u00e9rifier les quotas ou et la pertinence de la codification. Exports multiples : Excel d\u00e9taill\u00e9 pour les partenaires externes, variables natives pour Harmonie ou fichier de codification complet facilement modifiable. 'PowerUser' : tout comme HARMONIE, LEXIE dispose d'un langage de commandes BATCH et de la possibilit\u00e9 de scripts Python pour optimiser les pipelines r\u00e9p\u00e9titifs. Positionnement march\u00e9 et mod\u00e8le \u00e9conomique Le march\u00e9 europ\u00e9en fourmille de solutions IA \u2013 Ascribe , Codeit , Caplena , Canvs AI \u2013 qui promettent de coder \u00ab\u202fsans effort\u202f\u00bb mais \u00e0 des tarifs souvent dissuasifs pour des structures l\u00e9g\u00e8res\u202f: abonnements de plusieurs centaines d\u2019euros par mois, donn\u00e9es stock\u00e9es aux \u00c9tats\u2011Unis, bo\u00eetes noires difficiles \u00e0 auditer. Lexie choisit une route diff\u00e9rente \u202f: faire payer juste ce qui cr\u00e9e de la valeur . Starter \u2013 39 \u20ac par mois et par poste : tout le c\u0153ur fonctionnel en manuel, parfait pour remplacer Excel dans un petit institut ou un cabinet freelance. Pro \u2013 79 \u20ac par mois : suggestions IA activables, co\u00fbt de l\u2019IA pay\u00e9 directement au fournisseur par la cl\u00e9 du client (aucune marge cach\u00e9e). Enterprise \u2013 5\u202f000 \u20ac par an : licence serveur illimit\u00e9e, SSO, scripting avanc\u00e9, support prioritaire. Pour les projets ponctuels, un mod\u00e8le pay\u2011per\u2011verbatim permet de facturer au volume sans abonnement. L\u2019objectif est clair\u202f: d\u00e9mocratiser la codification professionnelle aupr\u00e8s de tous ceux qui n\u2019avaient que l\u2019alternative Excel ou des prestataires on\u00e9reux. Une philosophie de transparence L\u2019adoption de l\u2019IA dans la recherche ne doit pas signifier l\u2019abandon du contr\u00f4le humain. Lexie a \u00e9t\u00e9 pens\u00e9 pour que l'IA accompagne le travail de l'humain \u202f: les suggestions s\u00e9mantiques sont \u00e0 la fois v\u00e9rifiables et . L\u2019utilisateur peut valider, ajuster ou refuser. Aucun classement automatique n\u2019est irr\u00e9versible. L\u2019IA assiste, l\u2019humain d\u00e9cide. Recommandations de communication La force du discours marketing de Lexie repose sur un \u00e9quilibre entre trois messages majeurs \u2013 accessibilit\u00e9, souverainet\u00e9 et synergie ADN \u2013 et sur la capacit\u00e9 \u00e0 lever, d\u2019embl\u00e9e, les objections que les concurrents ne traitent qu\u2019en annexe. Voici la ligne directrice : Argument Excel\u2011killer, ancr\u00e9 dans la preuve chiffr\u00e9e. Le gain \u201170\u202f% d\u2019erreurs / +40\u202f% de productivit\u00e9 est \u00e0 placer dans chaque pitch\u202f; c\u2019est l\u2019\u00e9l\u00e9ment qui parle le plus aux utilisateurs qui vivent encore dans Excel. Tout visuel (vid\u00e9o 30\u202fs ou capture avant/apr\u00e8s) doit l\u2019illustrer. Souligner la souverainet\u00e9\u202f: on\u2011premise + BYOK IA (\"Bring Your Own Key\"). Alors que les plateformes SaaS am\u00e9ricaines patinent sur le RGPD, Lexie met en avant la donn\u00e9e qui ne quitte jamais le SI client. L\u2019approche Bring Your Own Key rassure les DSI\u202f: pas de bo\u00eete noire, pas de surco\u00fbt token cach\u00e9. Placer un sceau \u201cData stays home\u201d sur chaque support. Insister sur le prix d\u2019entr\u00e9e ultra\u2011bas, sans d\u00e9valoriser l\u2019outil. La formule Starter 39\u202f\u20ac par mois doit \u00eatre lisible imm\u00e9diatement\u202f; elle rend cr\u00e9dible la promesse d\u2019Excel\u2011killer. Pour \u00e9viter l\u2019effet \u00ab\u202fcheap\u202f\u00bb, montrer la mont\u00e9e en gamme Pro et Enterprise d\u00e8s la deuxi\u00e8me slide. Verrouiller le parc existant avec la synergie Harmonie. L\u2019argument \u00ab\u202f0 import, 0 export\u202f\u00bb est d\u00e9terminant\u202f: si vous poss\u00e9dez Harmonie, choisir une solution tierce est un non\u2011sens. Cette phrase doit revenir telle quelle dans les argumentaires. Positionner la puissance PowerUser comme un bonus, jamais comme une contrainte. Les scripts Python et la CLI rassurent les \u00e9quipes techniques d\u2019institut sans effrayer le public non\u2011tech. Le storytelling\u202f: \u00ab\u202fVous pouvez tout faire en no\u2011code\u202f; si vous \u00eates un geek, la porte est ouverte\u202f\u00bb. Traiter la tension offline\u202f/\u202fIA cloud d\u00e8s le d\u00e9part. Une FAQ ou un encart visuel doit expliquer : \u00ab\u202fLexie fonctionne 100\u202f% offline par d\u00e9faut\u202f; branchez l\u2019IA quand vous le d\u00e9cidez\u202f\u00bb. Cela d\u00e9samorce la confusion potentiel sur la promesse on\u2011premise. Convertir la preuve sociale d\u00e8s que possible. M\u00eame anonymis\u00e9s, les retours pilotes (barom\u00e8tre annuel cod\u00e9 40\u202f% plus vite, satisfaction utilisateur 95\u202f%) consolident la promesse \u00ab\u202ffait tr\u00e8s bien le job\u202f\u00bb. En synth\u00e8se, la narration propos\u00e9e est\u202f: \u00ab\u202fPassez d\u2019Excel \u00e0 l\u2019insight en 30\u202fminutes, chez vous, pour le prix d\u2019un caf\u00e9 par jour \u2013 et si vous avez Harmonie, tout est d\u00e9j\u00e0 branch\u00e9.\u202f\u00bb Conclusion En combinant un prix plancher , une installation locale et une IA sous contr\u00f4le , Lexie r\u00e9pond \u00e0 un cr\u00e9neau n\u00e9glig\u00e9 par les solutions cloud premium\u202f: celui des professionnels qui veulent la qualit\u00e9 d\u2019un grand institut sans le prix ni la complexit\u00e9. Ajout\u00e9 \u00e0 la suite ADN, il boucle la cha\u00eene des \u00e9tudes\u202f: collecter, coder, analyser et restituer \u2013 plus vite, plus s\u00fbrement et \u00e0 co\u00fbt ma\u00eetris\u00e9. Lexie n\u2019est pas un gadget\u202f: c\u2019est le nouvel outil de base pour quiconque traite des questions ouvertes.","title":"Lexie \u2013 La codification de verbatims r\u00e9invent\u00e9e"},{"location":"LEXIE/#lexie-la-codification-de-verbatims-reinventee","text":"Dans le sillage de Harmonie , Slidie et Quizzie , la suite ADN s\u2019enrichit d\u2019un nouvel outil pens\u00e9 pour r\u00e9soudre un probl\u00e8me tr\u00e8s concret\u202f: l\u2019enfer du post\u2011codage dans Excel . Les charg\u00e9s d\u2019\u00e9tudes, les freelances ou les stagiaires passent encore des heures \u00e0 copier\u2011coller des plans de codes, \u00e0 v\u00e9rifier des formules fragiles et \u00e0 r\u00e9\u2011importer des fichiers dans leurs logiciels statistiques. Lexie a \u00e9t\u00e9 con\u00e7u pour simplifier le process et optimiser le travail \u202f: faire le job, vite et bien , sans complexit\u00e9 inutile, et \u00e0 un co\u00fbt accessible.","title":"Lexie \u2013 La codification de verbatims r\u00e9invent\u00e9e"},{"location":"LEXIE/#une-reponse-directe-aux-limites-dexcel","text":"Excel est universel, mais le codage statique devient vite un obstacle quand il s\u2019agit de coder des milliers de verbatims : difficile de r\u00e9organiser un plan de codes en cours de route, facile de briser une correspondance, impossible d\u2019avoir un contr\u00f4le qualit\u00e9 en temps r\u00e9el. Lexie transforme cette t\u00e2che lin\u00e9aire en un processus vivant : un plan de codes que l\u2019on r\u00e9organise par glisser\u2011d\u00e9poser, une clart\u00e9 d'affichage qui limite drastiquement les erreurs, l'affectation par lots, des statistiques de progression visibles \u00e0 chaque instant.","title":"Une r\u00e9ponse directe aux limites d\u2019Excel"},{"location":"LEXIE/#souverainete-et-flexibilite-technique","text":"Beaucoup de solutions concurrentes imposent le tout SaaS . Lexie prend le parti inverse\u202f: 100\u202f% on\u2011premise , donc aucune donn\u00e9e qui quitte l\u2019infrastructure du client. L\u2019application fonctionne enti\u00e8rement hors ligne pour le codage manuel. L\u2019intelligence artificielle est \u00ab branchable \u00bb : l\u2019administrateur ajoute sa propre cl\u00e9 OpenAI, Azure AI ou Mistral et d\u00e9cide o\u00f9 transitent les donn\u00e9es. Cette approche Bring your own Key (\u00ab\u202fBYOK\u202f\u00bb) est doublement vertueuse : le client ma\u00eetrise ses co\u00fbts de tokenisation et demeure pleinement conforme au RGPD , puisque les verbatims ne sont jamais stock\u00e9s par un tiers.","title":"Souverainet\u00e9 et flexibilit\u00e9 technique"},{"location":"LEXIE/#un-pont-direct-avec-harmonie","text":"Pour les utilisateurs d\u2019 Harmonie , Lexie n\u2019est pas \u00ab un outil de plus \u00bb\u202f: c\u2019est une \u00e9tape native du flux de traitement. Les variables cod\u00e9es apparaissent instantan\u00e9ment dans les \u00e9tudes HARMONIE, et l'utilisateur peut imm\u00e9diatement produire des tableaux crois\u00e9s, pond\u00e9r\u00e9s et filtr\u00e9s. Finies les \u00e9tapes d\u2019import\u2011export\u202f complexe et risqu\u00e9; la cha\u00eene de traitement est consid\u00e9tablement fluidifi\u00e9e.","title":"Un pont direct avec Harmonie"},{"location":"LEXIE/#fonctionnalites-qui-comptent-vraiment","text":"Plan de codes ouvert et vivant : import depuis Excel, cr\u00e9ation in vivo directement depuis la lecture des verbatims, suggestions automatiques de th\u00e8mes quand l\u2019IA est activ\u00e9e, possibilit\u00e9 de grouper / modifier / r\u00e9affecter en cours de codification de fa\u00e7on dynamique et contr\u00f4l\u00e9e. R\u00e9\u2011application d\u00e9terministe : apr\u00e8s validation humaine, Lexie applique des r\u00e8gles exactes. Aucune surprise, aucun besoin de relecture inutile. Statistiques embarqu\u00e9es : nombre de verbatims cod\u00e9s, progression sur les clusters \u00e0 traiter, tris rapides pour v\u00e9rifier les quotas ou et la pertinence de la codification. Exports multiples : Excel d\u00e9taill\u00e9 pour les partenaires externes, variables natives pour Harmonie ou fichier de codification complet facilement modifiable. 'PowerUser' : tout comme HARMONIE, LEXIE dispose d'un langage de commandes BATCH et de la possibilit\u00e9 de scripts Python pour optimiser les pipelines r\u00e9p\u00e9titifs.","title":"Fonctionnalit\u00e9s qui comptent vraiment"},{"location":"LEXIE/#positionnement-marche-et-modele-economique","text":"Le march\u00e9 europ\u00e9en fourmille de solutions IA \u2013 Ascribe , Codeit , Caplena , Canvs AI \u2013 qui promettent de coder \u00ab\u202fsans effort\u202f\u00bb mais \u00e0 des tarifs souvent dissuasifs pour des structures l\u00e9g\u00e8res\u202f: abonnements de plusieurs centaines d\u2019euros par mois, donn\u00e9es stock\u00e9es aux \u00c9tats\u2011Unis, bo\u00eetes noires difficiles \u00e0 auditer. Lexie choisit une route diff\u00e9rente \u202f: faire payer juste ce qui cr\u00e9e de la valeur . Starter \u2013 39 \u20ac par mois et par poste : tout le c\u0153ur fonctionnel en manuel, parfait pour remplacer Excel dans un petit institut ou un cabinet freelance. Pro \u2013 79 \u20ac par mois : suggestions IA activables, co\u00fbt de l\u2019IA pay\u00e9 directement au fournisseur par la cl\u00e9 du client (aucune marge cach\u00e9e). Enterprise \u2013 5\u202f000 \u20ac par an : licence serveur illimit\u00e9e, SSO, scripting avanc\u00e9, support prioritaire. Pour les projets ponctuels, un mod\u00e8le pay\u2011per\u2011verbatim permet de facturer au volume sans abonnement. L\u2019objectif est clair\u202f: d\u00e9mocratiser la codification professionnelle aupr\u00e8s de tous ceux qui n\u2019avaient que l\u2019alternative Excel ou des prestataires on\u00e9reux.","title":"Positionnement march\u00e9 et mod\u00e8le \u00e9conomique"},{"location":"LEXIE/#une-philosophie-de-transparence","text":"L\u2019adoption de l\u2019IA dans la recherche ne doit pas signifier l\u2019abandon du contr\u00f4le humain. Lexie a \u00e9t\u00e9 pens\u00e9 pour que l'IA accompagne le travail de l'humain \u202f: les suggestions s\u00e9mantiques sont \u00e0 la fois v\u00e9rifiables et . L\u2019utilisateur peut valider, ajuster ou refuser. Aucun classement automatique n\u2019est irr\u00e9versible. L\u2019IA assiste, l\u2019humain d\u00e9cide.","title":"Une philosophie de transparence"},{"location":"LEXIE/#recommandations-de-communication","text":"La force du discours marketing de Lexie repose sur un \u00e9quilibre entre trois messages majeurs \u2013 accessibilit\u00e9, souverainet\u00e9 et synergie ADN \u2013 et sur la capacit\u00e9 \u00e0 lever, d\u2019embl\u00e9e, les objections que les concurrents ne traitent qu\u2019en annexe. Voici la ligne directrice : Argument Excel\u2011killer, ancr\u00e9 dans la preuve chiffr\u00e9e. Le gain \u201170\u202f% d\u2019erreurs / +40\u202f% de productivit\u00e9 est \u00e0 placer dans chaque pitch\u202f; c\u2019est l\u2019\u00e9l\u00e9ment qui parle le plus aux utilisateurs qui vivent encore dans Excel. Tout visuel (vid\u00e9o 30\u202fs ou capture avant/apr\u00e8s) doit l\u2019illustrer. Souligner la souverainet\u00e9\u202f: on\u2011premise + BYOK IA (\"Bring Your Own Key\"). Alors que les plateformes SaaS am\u00e9ricaines patinent sur le RGPD, Lexie met en avant la donn\u00e9e qui ne quitte jamais le SI client. L\u2019approche Bring Your Own Key rassure les DSI\u202f: pas de bo\u00eete noire, pas de surco\u00fbt token cach\u00e9. Placer un sceau \u201cData stays home\u201d sur chaque support. Insister sur le prix d\u2019entr\u00e9e ultra\u2011bas, sans d\u00e9valoriser l\u2019outil. La formule Starter 39\u202f\u20ac par mois doit \u00eatre lisible imm\u00e9diatement\u202f; elle rend cr\u00e9dible la promesse d\u2019Excel\u2011killer. Pour \u00e9viter l\u2019effet \u00ab\u202fcheap\u202f\u00bb, montrer la mont\u00e9e en gamme Pro et Enterprise d\u00e8s la deuxi\u00e8me slide. Verrouiller le parc existant avec la synergie Harmonie. L\u2019argument \u00ab\u202f0 import, 0 export\u202f\u00bb est d\u00e9terminant\u202f: si vous poss\u00e9dez Harmonie, choisir une solution tierce est un non\u2011sens. Cette phrase doit revenir telle quelle dans les argumentaires. Positionner la puissance PowerUser comme un bonus, jamais comme une contrainte. Les scripts Python et la CLI rassurent les \u00e9quipes techniques d\u2019institut sans effrayer le public non\u2011tech. Le storytelling\u202f: \u00ab\u202fVous pouvez tout faire en no\u2011code\u202f; si vous \u00eates un geek, la porte est ouverte\u202f\u00bb. Traiter la tension offline\u202f/\u202fIA cloud d\u00e8s le d\u00e9part. Une FAQ ou un encart visuel doit expliquer : \u00ab\u202fLexie fonctionne 100\u202f% offline par d\u00e9faut\u202f; branchez l\u2019IA quand vous le d\u00e9cidez\u202f\u00bb. Cela d\u00e9samorce la confusion potentiel sur la promesse on\u2011premise. Convertir la preuve sociale d\u00e8s que possible. M\u00eame anonymis\u00e9s, les retours pilotes (barom\u00e8tre annuel cod\u00e9 40\u202f% plus vite, satisfaction utilisateur 95\u202f%) consolident la promesse \u00ab\u202ffait tr\u00e8s bien le job\u202f\u00bb. En synth\u00e8se, la narration propos\u00e9e est\u202f: \u00ab\u202fPassez d\u2019Excel \u00e0 l\u2019insight en 30\u202fminutes, chez vous, pour le prix d\u2019un caf\u00e9 par jour \u2013 et si vous avez Harmonie, tout est d\u00e9j\u00e0 branch\u00e9.\u202f\u00bb","title":"Recommandations de communication"},{"location":"LEXIE/#conclusion","text":"En combinant un prix plancher , une installation locale et une IA sous contr\u00f4le , Lexie r\u00e9pond \u00e0 un cr\u00e9neau n\u00e9glig\u00e9 par les solutions cloud premium\u202f: celui des professionnels qui veulent la qualit\u00e9 d\u2019un grand institut sans le prix ni la complexit\u00e9. Ajout\u00e9 \u00e0 la suite ADN, il boucle la cha\u00eene des \u00e9tudes\u202f: collecter, coder, analyser et restituer \u2013 plus vite, plus s\u00fbrement et \u00e0 co\u00fbt ma\u00eetris\u00e9. Lexie n\u2019est pas un gadget\u202f: c\u2019est le nouvel outil de base pour quiconque traite des questions ouvertes.","title":"Conclusion"},{"location":"LEXIEConcurrence/","text":"Parfait. Je vais lancer une recherche sur les outils et services concurrents de Lexie en Europe et au-del\u00e0, incluant : - les logiciels de codification de verbatims et d\u2019analyse s\u00e9mantique (LLM/text mining) utilis\u00e9s dans les \u00e9tudes, - les soci\u00e9t\u00e9s de services sp\u00e9cialis\u00e9es dans la codification manuelle ou semi-automatique, - les positionnements, propositions de valeur, tarifs disponibles, - ainsi que des liens vers leurs sites officiels. Je reviens vers toi d\u00e8s que le panorama concurrentiel est pr\u00eat \u00e0 \u00eatre explor\u00e9. Panorama des Solutions de Codification de Verbatims (Concurrents de Lexie ) La codification des r\u00e9ponses ouvertes ( verbatims ) en \u00e9tudes de march\u00e9 a beaucoup \u00e9volu\u00e9 ces derni\u00e8res ann\u00e9es. De nombreux acteurs \u2013 logiciels SaaS d\u2019analyse textuelle, plateformes int\u00e9gr\u00e9es et prestataires de services \u2013 proposent des solutions pour transformer des verbatims en donn\u00e9es exploitables. Ci-dessous, un \u00e9tat des lieux structur\u00e9 des principaux concurrents de Lexie (outil de codification de verbatims), incluant leur positionnement, fonctionnalit\u00e9s, automatisation, tarifs et liens vers leurs sites officiels. Un tableau comparatif r\u00e9capitule ensuite les caract\u00e9ristiques cl\u00e9s des solutions logicielles. Solutions logicielles & SaaS de codification automatique Cette section pr\u00e9sente les \u00e9diteurs de logiciels et solutions SaaS (europ\u00e9ens ou internationaux utilis\u00e9s en Europe) sp\u00e9cialis\u00e9s dans l\u2019analyse s\u00e9mantique et le text mining pour verbatims. Chaque solution est d\u00e9crite avec sa cible utilisateur, ses cas d\u2019usage privil\u00e9gi\u00e9s, son niveau d\u2019 automatisation (IA vs manuel), \u00e9l\u00e9ments d\u2019 ergonomie , et informations de tarification si disponibles, ainsi qu\u2019un lien vers le site officiel. Ascribe (Voxco) \u2013 Solution historique de codification de verbatims Positionnement : Ascribe (d\u00e9sormais int\u00e9gr\u00e9 \u00e0 Voxco) est une r\u00e9f\u00e9rence mondiale chez les instituts d\u2019\u00e9tudes. Ciblant les grandes \u00e9quipes d\u2019ops de codification, il permet de g\u00e9rer de gros volumes de r\u00e9ponses ouvertes en mode SaaS web ( Ascribe Coder | Verbatim Coding Software ). Ses cas d\u2019usage couvrent les verbatims d\u2019enqu\u00eates satisfaction, retours clients multilingues, etc., avec une interface collaborative pour les \u00e9quipes de codeurs. Automatisation & ergonomie : Ascribe combine codification manuelle assist\u00e9e et algorithmes de Machine Learning . Son module \u201cAI Coder\u201d acc\u00e9l\u00e8re le codage en proposant des codes automatiques, tout en laissant le contr\u00f4leur ajuster le niveau d\u2019intervention humaine selon le projet ( Ascribe Coder | Verbatim Coding Software ) ( Ascribe Coder | Verbatim Coding Software ). L\u2019interface est pens\u00e9e pour le travail d\u2019\u00e9quipe (supervision en temps r\u00e9el, contr\u00f4le qualit\u00e9 int\u00e9gr\u00e9). Des fonctionnalit\u00e9s d\u2019analyse textuelle avanc\u00e9es (d\u00e9tection de th\u00e8mes, sentiments, co-occurrences) sont incluses. Tarifs : Ascribe est une solution haut de gamme \u00e0 licence d\u2019entreprise (tarifs sur devis). Voxco ne publie pas de prix publics, mais le mod\u00e8le est g\u00e9n\u00e9ralement un abonnement annuel substantiel ou au volume de verbatims. Site officiel : Ascribe \u2013 Verbatim Coding (Voxco) ( Ascribe Coder | Verbatim Coding Software ) Codeit \u2013 Plateforme britannique alliant IA et codage humain Positionnement : Codeit (UK) vise aussi bien les instituts qu\u2019entreprises ayant des \u00e9quipes internes d\u2019analyse verbatim. Cas d\u2019usage typiques : enqu\u00eates marketing avec questions ouvertes, retour SAV, analyse de verbatims multilingues. Codeit se distingue par sa philosophie \u201chuman-led AI\u201d , combinant la vitesse de l\u2019IA et la granularit\u00e9 du codage humain ( codeit ) ( codeit ). Automatisation & ergonomie : L\u2019outil propose une suite compl\u00e8te : extraction automatique de th\u00e8mes et sentiment , g\u00e9n\u00e9ration automatique de codeframe (grille de codes) via IA, auto-codage apprenant \u00e0 partir des exemples cod\u00e9s manuellement, et interface de codification manuelle tr\u00e8s aboutie ( codeit ) ( codeit ). L\u2019utilisateur garde le contr\u00f4le sur l\u2019IA (possibilit\u00e9 de valider/\u00e9diter les codes propos\u00e9s). L\u2019ergonomie collaborative est soulign\u00e9e (projets partag\u00e9s, utilisateurs illimit\u00e9s, int\u00e9gration via API aux outils de sondage). Tarifs : Codeit offre un essai gratuit 30 jours. Les formules sont \u00e0 abonnement annuel selon volume de verbatims cod\u00e9s : par ex., le forfait Essentials (fonctionnalit\u00e9s de base) et Explorer (toutes fonctions IA avanc\u00e9es) sont disponibles \u201c\u00e0 partir de\u201d un certain montant annuel pour ~25 000 verbatims ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Le prix exact est sur devis selon le volume (comptez un mod\u00e8le \u00ab pay per verbatim \u00bb flexible) ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Site officiel : Codeit Software \u2013 \u201cAI Assisted Verbatim Coding\u201d ( codeit ) Caplena \u2013 Plateforme AI multilingue d\u2019analyse de feedback Positionnement : Caplena (start-up bas\u00e9e en Suisse) propose une plateforme d\u2019analyse s\u00e9mantique des feedbacks clients et verbatims d\u2019enqu\u00eates, utilis\u00e9e par plus de 200 entreprises et instituts (ex : DHL, Lufthansa, Euromonitor) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). Cible large : d\u00e9partements Insight, CX, RH (feedback employ\u00e9s) et instituts souhaitant cat\u00e9goriser rapidement des r\u00e9ponses ouvertes et avis en de multiples langues. Automatisation & ergonomie : Caplena repose sur une IA personnalisable et transparente . L\u2019utilisateur peut importer des donn\u00e9es ou se connecter \u00e0 Qualtrics, Brandwatch, TrustPilot, etc., puis laisser l\u2019IA g\u00e9n\u00e9rer des th\u00e9matiques multilingues (100 langues support\u00e9es) qu\u2019on peut ajuster manuellement ( Caplena - Greenbook Directory Listing \u2014 Greenbook ) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). La plateforme offre des tableaux de bord interactifs, de la visualisation de tendances et sentiments par th\u00e8me , avec possibilit\u00e9 d\u2019interroger les r\u00e9sultats via un chatbot. Les avis utilisateurs soulignent la facilit\u00e9 d\u2019usage et la haute qualit\u00e9 de l\u2019analyse, m\u00eame pour de gros volumes ( Caplena Pricing, Alternatives & More 2025 | Capterra ). Tarifs : Caplena fonctionne par abonnement mensuel/annuel incluant un volume de verbatims, avec possibilit\u00e9 d\u2019acheter du volume additionnel \u00e0 l\u2019usage ( Caplena Pricing, Alternatives & More 2025 | Capterra ). Le tarif Basic d\u00e9bute autour de 99 \u20ac par mois (env. quelques milliers de verbatims inclus) ( Caplena Pricing, Alternatives & More 2025 | Capterra ), et des plans Enterprise ou sp\u00e9ciaux Agency existent pour des volumes tr\u00e8s \u00e9lev\u00e9s ou des besoins sur-mesure (tarifs sur devis ). Site officiel : Caplena \u2013 AI Feedback Analysis Canvs AI \u2013 Analyse cognitive des verbatims orient\u00e9e \u00e9motions Positionnement : Canvs AI (USA) est une plateforme d\u2019analyse de texte con\u00e7ue pour les insights consommateurs et la CX . Elle est particuli\u00e8rement pris\u00e9e dans les \u00e9tudes marketing qualitatives, les tests de concept ou de contenu m\u00e9dia, o\u00f9 comprendre les \u00e9motions et th\u00e8mes saillants est cl\u00e9 ( Top Open-End Verbatim Coding Software ) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Des clients m\u00e9dias et grande conso (NBC, Audible, Fruit of the Loom, etc.) l\u2019utilisent pour traiter rapidement des centaines de verbatims et en tirer des enseignements. Automatisation & ergonomie : Canvs promet qu\u2019on ne \u201ccode plus jamais manuellement\u201d : son IA propri\u00e9taire auto-code les verbatims avec une haute pr\u00e9cision et une personnalisation possible des cat\u00e9gories ( Top Open-End Verbatim Coding Software ). L\u2019outil d\u00e9tecte les th\u00e8mes cl\u00e9s, \u00e9motions, tendances sans effort suppl\u00e9mentaire ( Top Open-End Verbatim Coding Software ). L\u2019UX est moderne et simple d\u2019apr\u00e8s les retours, avec des fonctionnalit\u00e9s comme \u201cStory Assist\u201d (pour aider \u00e0 formuler des insights ou rapports) et un co-pilote IA g\u00e9n\u00e9ratif pour accompagner l\u2019analyste ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). L\u2019utilisateur peut toujours ajuster les codes/th\u00e8mes apr\u00e8s coup (fusionner, renommer, etc.), combinant ainsi automatisation et affinement humain. Tarifs : Non divulgu\u00e9s publiquement. Canvs op\u00e8re en mode SaaS entreprise (probablement sous forme d\u2019abonnement annuel selon le volume d\u2019opinions analys\u00e9es). Pas de grille tarifaire publique, il faut contacter le fournisseur pour un devis personnalis\u00e9. Site officiel : Canvs AI \u2013 Text Analysis for Consumer Insights Blix \u2013 Nouvel outil SaaS \u201cg\u00e9n\u00e9ratif\u201d pour coder les open-ends Positionnement : Blix (start-up, 2023) est une plateforme sp\u00e9cialis\u00e9e en codification de questions ouvertes et analyse de verbatims, qui mise sur les LLM (IA g\u00e9n\u00e9rative) les plus r\u00e9cents ( Top Open-End Verbatim Coding Software ). Elle cible les instituts et d\u00e9partements \u00e9tudes cherchant \u00e0 obtenir rapidement des insights quantitatifs \u00e0 partir de donn\u00e9es qualitatives (open-ends, avis en ligne, etc.), sans passer par un codage manuel fastidieux. Automatisation & ergonomie : Blix se pr\u00e9sente comme un outil \u201csans effort\u201d pour l\u2019utilisateur : il d\u00e9couvre automatiquement les sujets dans les r\u00e9ponses (clustering th\u00e9matique), propose un codage assist\u00e9 par IA et peut g\u00e9n\u00e9rer tableaux de bord et synth\u00e8ses automatiques ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) ( Top Open-End Verbatim Coding Software ). L\u2019accent est mis sur la vitesse (obtenir en quelques minutes une cat\u00e9gorisation exploitable) et une interface simple. Par exemple, Blix peut r\u00e9sumer des centaines de verbatims et les r\u00e9partir par th\u00e8mes avec graphiques, quasiment sans intervention humaine. Il est ainsi adapt\u00e9 aux \u00e9quipes r\u00e9duites ou aux besoins de restitution rapide. Tarifs : Blix \u00e9tant r\u00e9cent, les tarifs sont en cours de structuration (souvent early adopters sur devis). A priori, mod\u00e8le SaaS avec abonnement mensuel ou annuel selon nombre de verbatims analys\u00e9s. L\u2019\u00e9diteur met en avant des d\u00e9mos et essais personnalis\u00e9s plut\u00f4t qu\u2019un tarif standard public. Site officiel : Blix \u2013 AI-Powered Text Analysis ( Top Open-End Verbatim Coding Software ) Chattermill \u2013 Analyse centralis\u00e9e des feedbacks multi-canaux Positionnement : Chattermill (UK) est un outil SaaS d\u2019 analyse des feedback clients qui unifie plusieurs sources (enqu\u00eates, tickets support, r\u00e9seaux sociaux\u2026) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Utilis\u00e9 plut\u00f4t par les \u00e9quipes CX ou produit pour regrouper au m\u00eame endroit les verbatims de diverses origines, il permet une vision 360\u00b0 de la voix du client. Moins sp\u00e9cifique \u201c\u00e9tudes de march\u00e9\u201d classique, il s\u2019adresse aux entreprises cherchant \u00e0 analyser en continu la satisfaction client. Automatisation & fonctionnalit\u00e9s : Chattermill emploie le Machine Learning pour classifier automatiquement les commentaires et offrir des analyses de sentiments et th\u00e8mes cl\u00e9s. L\u2019interface fournit des rapports d\u00e9taill\u00e9s et visualisations pr\u00eates \u00e0 l\u2019emploi pour les d\u00e9cideurs ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Son int\u00e9r\u00eat r\u00e9side surtout dans l\u2019 agr\u00e9gation facile de multiples canaux en un tableau de bord unique. Tarifs : Non disponibles publiquement \u2013 probablement un SaaS entreprise avec abonnement annuel modul\u00e9 par le nombre de sources connect\u00e9es et volume de donn\u00e9es. Site officiel : Chattermill Qualtrics Text iQ \u2013 Module int\u00e9gr\u00e9 d\u2019analyse textuelle Positionnement : Text iQ est la composante d\u2019analyse s\u00e9mantique int\u00e9gr\u00e9e \u00e0 la plateforme d\u2019enqu\u00eate Qualtrics . Destin\u00e9 aux utilisateurs de Qualtrics XM, il permet de coder les verbatims collect\u00e9s via les enqu\u00eates Qualtrics sans outil tiers ( Text iQ Functionality - Qualtrics ). Cible : entreprises d\u00e9j\u00e0 \u00e9quip\u00e9es de Qualtrics pour leurs sondages (CX, ressources humaines, \u00e9tudes marketing) voulant une solution interne pour cat\u00e9goriser les r\u00e9ponses ouvertes. Automatisation & ergonomie : Text iQ utilise l\u2019 apprentissage automatique (mod\u00e8les NLP) pour identifier des topics dans les feedback et scorer le sentiment de chaque verbatim ( New Text iQ machine learning models deliver industry ... - Qualtrics ). L\u2019utilisateur peut entra\u00eener le mod\u00e8le en cat\u00e9gorisant manuellement quelques r\u00e9ponses puis appliquer ces cat\u00e9gories \u00e0 tout l\u2019ensemble. L\u2019ergonomie est basique (interface int\u00e9gr\u00e9e \u00e0 Qualtrics, visuels simples type nuage de mots, th\u00e8mes et sentiments). Certains retours sugg\u00e8rent que Text iQ reste moins puissant ou flexible que des solutions d\u00e9di\u00e9es ( Text iQ is pretty lame, but other than that, Qualtrics is great (Part 1) ), mais il a l\u2019avantage d\u2019\u00eatre directement inclus dans l\u2019environnement de collecte. Tarifs : Text iQ est g\u00e9n\u00e9ralement inclus dans les licences Qualtrics niveau Advanced ou Enterprise . Qualtrics vend ses solutions en package (par ex., ~420 $/mois pour un bundle avec 1000 r\u00e9ponses/mois pour le plan Research Core) ( Buy Qualtrics Online Today ). Le module text analytics n\u2019est pas factur\u00e9 \u00e0 part, mais les offres plus co\u00fbteuses de Qualtrics incluent plus de capacit\u00e9s d\u2019analyse (dont Text iQ). Forsta (Ex-Confirmit) \u2013 Text Analytics int\u00e9gr\u00e9 pour instituts Positionnement : Forsta, qui r\u00e9unit Confirmit et d\u2019autres solutions d\u2019enqu\u00eate, propose un module d\u2019 analyse texte pens\u00e9 pour les \u00e9tudes de march\u00e9 et la Voix du Client. Cible : instituts et grandes entreprises (Forsta est un acteur B2B) ayant besoin d\u2019analyser des verbatims issues d\u2019enqu\u00eates multi-pays et multi-sources au sein d\u2019une m\u00eame plateforme. Automatisation & fonctionnalit\u00e9s : L\u2019outil d\u2019analyse textuelle Forsta combine IA et r\u00e8gles personnalisables . Il permet de d\u00e9finir des cat\u00e9gories manuellement ( rule-based ) tout en utilisant des mod\u00e8les de sentiment approfondi (12 \u00e9motions) pour segmenter les r\u00e9ponses ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Forsta se distingue par la possibilit\u00e9 de fusionner plusieurs flux de donn\u00e9es (enqu\u00eates, interactions CRM, etc.) en un seul canal d\u2019analyse ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). L\u2019interface offre des synth\u00e8ses multi-sources, ce qui convient \u00e0 ceux qui veulent regrouper plusieurs enqu\u00eates ou vagues . Tarifs : Forsta fonctionne sur licence d\u2019entreprise (tarification sur mesure selon le volume de donn\u00e9es et modules choisis). Souvent, il s\u2019agit de contrats annuels globaux incluant la plateforme d\u2019enqu\u00eate et le module analytique. Autres solutions notables : NVivo, Atlas.ti, MAXQDA : logiciels d\u2019 analyse qualitative acad\u00e9mique, permettant de coder manuellement des verbatims et de faire des recherches lexicales. Moins adapt\u00e9s aux gros volumes quantitatifs (pas d\u2019automatisation AI pouss\u00e9e par d\u00e9faut). Par exemple, NVivo propose un auto-codage pr\u00e9liminaire par th\u00e8mes via IA, mais cela reste sommaire et orient\u00e9 recherche exploratoire ( NVivo: Leading Qualitative Data Analysis Software - Lumivero ). Provalis Research (WordStat, QDA Miner) : outils combinant statistique et codification qualitative, utilis\u00e9s parfois en \u00e9tudes (surtout Am\u00e9rique du Nord). Ils permettent le post-codage de questions ouvertes avec des dictionnaires ou l\u2019IA, tout en laissant le contr\u00f4le total au charg\u00e9 d\u2019\u00e9tude ( Codage et analyse des questions ouvertes - Provalis Research ). Outils open-source / API : certaines \u00e9quipes data utilisent directement des API NLP (ex : AWS Comprehend , Google Cloud NL, Azure Language ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 )) pour construire des analyses sur mesure. Ces solutions offrent la scalabilit\u00e9 et la souplesse technique , mais n\u00e9cessitent des comp\u00e9tences de programmation (pas de GUI conviviale pr\u00eate \u00e0 l\u2019emploi). Startups IA s\u00e9mantique (France) : Q\u00b0emotion (analyse des \u00e9motions et irritants clients) est un SaaS fran\u00e7ais qui cat\u00e9gorise les verbatims en sentiments/\u00e9motions de mani\u00e8re automatis\u00e9e ( Q\u00b0emotion (@qemotionapp) / X ). Semdee ou Proxem ont \u00e9galement propos\u00e9 des plateformes de text mining orient\u00e9es entreprise (analyse des avis conso, CRM, etc.). Ces outils locaux mettent en avant une adaptation aux sp\u00e9cificit\u00e9s de langue fran\u00e7aise et un accompagnement conseil, mais sont souvent vendus comme solutions globales de text analytics plus que comme de simples outils de codification. Prestataires de codification manuelle ou semi-automatique En parall\u00e8le des logiciels, de nombreuses entreprises et freelances proposent des services de codification de verbatims, en g\u00e9n\u00e9ral manuellement (\u00e9ventuellement avec un outillage interne). Ces prestataires sont souvent utilis\u00e9s par les instituts pour externaliser le post-codage de questionnaires ouverts, notamment lorsque les volumes sont tr\u00e8s importants ou multilingues. Bureau de codage sp\u00e9cialis\u00e9s : Des soci\u00e9t\u00e9s comme Focus Forward (USA), CodingExperts (USA), Gazelle Global (USA) ou BJD (USA) se sont sp\u00e9cialis\u00e9es de longue date dans le codage manuel des verbatims ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 ). Elles disposent de \u00e9quipes de codeurs exp\u00e9riment\u00e9s , parfois r\u00e9parties mondialement pour couvrir de nombreuses langues et fuseaux horaires. Leur proposition de valeur : la qualit\u00e9 (codage par des humains form\u00e9s pour d\u00e9tecter les nuances), la flexibilit\u00e9 (services de transcription, traduction en plus du codage), mais cela implique un d\u00e9lai et un co\u00fbt plus \u00e9lev\u00e9s qu\u2019une solution automatique. Par exemple, Nuance (USA) est r\u00e9put\u00e9 pour g\u00e9rer des volumes massifs avec des codeurs ayant en moyenne 11 ans d\u2019exp\u00e9rience ( Verbatim Coding Services | Nuance ) ( Verbatim Coding Services | Nuance ). Ces soci\u00e9t\u00e9s facturent g\u00e9n\u00e9ralement \u00e0 l\u2019unit\u00e9 (par r\u00e9ponse cod\u00e9e) ou au temps pass\u00e9 , avec des bar\u00e8mes diff\u00e9rents selon la complexit\u00e9 du codeframe, les langues, etc. (les co\u00fbts sont souvent sur devis apr\u00e8s estimation du volume et de la langue ( Verbatim Coding Services | Nuance )). Agences multilingues en Europe : Au Royaume-Uni, on trouve par exemple The Language Factory (UK) ou Language Insight (UK) qui combinent traduction et codification, utiles pour des projets internationaux ( Top Market Research Coding Services & Software in 2025 ). En Allemagne, Tema-Q offre aussi ce type de service. Ces prestataires europ\u00e9ens mettent en avant la pr\u00e9cision linguistique et la connaissance culturelle locale pour coder fid\u00e8lement des verbatims \u00e9trangers. Les tarifs peuvent \u00eatre un peu plus \u00e9lev\u00e9s que des offres offshore, mais avec une assurance qualit\u00e9 linguistique. BPO et offshore : Des soci\u00e9t\u00e9s d\u2019outsourcing comme Flatworld Solutions (Inde) ou Outsource2India proposent des services de codage \u00e0 moindre co\u00fbt, mobilisant de grandes \u00e9quipes en Asie ( Outsource Verbatim Coding Services - Flatworld Solutions ) ( Top Market Research Coding Services & Software in 2025 ). Le co\u00fbt unitaire y est comp\u00e9titif, ce qui convient pour d\u2019\u00e9normes volumes, mais cela requiert une tr\u00e8s bonne transmission du cahier de codage (risque de d\u00e9calage culturel ou d\u2019 aller-retour si consignes floues ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 )). Freelances & plateformes : Pour de plus petits projets, certains instituts ou entreprises font appel \u00e0 des freelances (via Fiverr, Upwork, Malt\u2026). C\u2019est une option souple et \u00e9conomique pour de petits volumes ( Top Market Research Coding Services & Software in 2025 ), mais la qualit\u00e9 d\u00e9pend fortement de l\u2019individu recrut\u00e9 et cela demande de briefer chaque nouveau freelance. Positionnement de ces services : En g\u00e9n\u00e9ral, le codage manuel externalis\u00e9 apporte la finesse et l\u2019assurance qu\u2019un \u0153il humain passe sur chaque r\u00e9ponse, utile pour des \u00e9tudes o\u00f9 la pr\u00e9cision prime sur la rapidit\u00e9 (par ex. codification de verbatims m\u00e9dicaux complexes, ou \u00e9tudes ad hoc de faible volume mais hautement strat\u00e9giques). Cependant, il pr\u00e9sente des inconv\u00e9nients notables : d\u00e9lais plus longs, co\u00fbt croissant avec le volume, risque d\u2019 erreurs humaines ou d\u2019incoh\u00e9rences si la formation est insuffisante ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 ). De plus, si le client souhaite modifier la grille de codes en cours de route, il faut souvent recoder depuis le d\u00e9but , engendrant du rework co\u00fbteux ( Top Market Research Coding Services & Software in 2025 ). \u27a1\ufe0f Tendance du march\u00e9 : nombre d\u2019acteurs proposent d\u00e9sormais des approches hybrides , combinant automatisation et validation humaine. Par exemple, certains prestataires traditionnels de coding int\u00e8grent des outils d\u2019IA pour pr\u00e9-classer les verbatims et ne valider manuellement que les cas douteux. De leur c\u00f4t\u00e9, des outils comme Lexie, Caplena ou Codeit permettent aux utilisateurs d\u2019 ajuster manuellement les cat\u00e9gorisations automatiques \u2013 r\u00e9unissant le meilleur des deux mondes (vitesse de l\u2019IA + jugement humain). Tableau comparatif des principales solutions logicielles Pour aider \u00e0 la comparaison, le tableau suivant synth\u00e9tise quelques attributs cl\u00e9s des solutions logiciels/SaaS concurrentes de Lexie : Solution Type / Cible Automatisation Cas d\u2019usage cl\u00e9s Mod\u00e8le tarifaire Ascribe (Voxco) Outil SaaS codification \u2013 grandes \u00e9quipes MR mondiales IA + codage humain (option \u201cAI Coder\u201d) ([Ascribe Coder Verbatim Coding Software](https://ascribe.voxco.com/fr/coder#:~:text=Global%20Non)) \u2013 interface collaborative Enqu\u00eates satisfaction, verbatims multi-langues (volumes massifs) Codeit SaaS \u201chuman-led AI\u201d \u2013 \u00e9quipes \u00e9tudes (toutes tailles) IA assist\u00e9e par l\u2019humain (ML, th\u00e8mes auto, codeframe auto) ( codeit ) \u2013 contr\u00f4le total utilisateur Open-ends enqu\u00eates marketing, retours clients \u2013 besoin de granularit\u00e9 fine Abonnement annuel selon volume (pay-per-verbatim) ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Essai 30j gratuit. Caplena Plateforme AI feedback \u2013 entreprises & instituts IA flexible (topics multi-langues ajustables par l\u2019utilisateur) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). Tableau de bord insights Feedback NPS/CSAT, avis clients, verbatims RH \u2013 analyses multilingues rapides Forfait mensuel/annuel par paliers volume (ex. ~99\u20ac/mois de base) ([Caplena Pricing, Alternatives & More 2025 Canvs AI Plateforme Insights IA \u2013 grands comptes CX/MR (US) IA autonome (codification auto \u201cno code\u201d compl\u00e8te) \u2013 \u00e9motion & th\u00e8mes ( Top Open-End Verbatim Coding Software ) ajustables apr\u00e8s coup \u00c9tudes qualitatives consumer (produits, pubs), analyses Vox Populi \u00e0 grande \u00e9chelle Abonnement SaaS entreprise (devis). Pas de tarifs publics (valeur ajout\u00e9e sur mesure). Blix Outil SaaS IA g\u00e9n\u00e9rative \u2013 start-up (2025) IA LLM (g\u00e9n\u00e9ration automatique de codes, synth\u00e8ses) \u2013 supervision minime Codifier rapidement des open-ends (\u00e9tudes flash, retour \u00e0 chaud) sans \u00e9quipe d\u00e9di\u00e9e Offres en cours de d\u00e9finition \u2013 plut\u00f4t abonnement selon nombre de verbatims. D\u00e9mo gratuite disponible. Qualtrics Text iQ Module int\u00e9gr\u00e9 (Qualtrics) \u2013 clients Qualtrics (CX, EX) IA ML interne (topics + sentiment auto) \u2013 n\u00e9cessite entra\u00eenement de mod\u00e8les ( Text iQ Functionality - Qualtrics ) Enqu\u00eates men\u00e9es sous Qualtrics voulant analyse int\u00e9gr\u00e9e (NPS, feedback employ\u00e9s\u2026) Inclus dans licences Qualtrics avanc\u00e9es (ex. offre Research Core \u00e0 ~420$/mois) ( Buy Qualtrics Online Today ). Pas de co\u00fbt unitaire, plafonds de r\u00e9ponses selon plan. Forsta Text Analytics Module int\u00e9gr\u00e9 (Forsta/Confirmit) \u2013 instituts & enterprises IA + r\u00e8gles (mix automatisation et lexiques sur mesure) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) \u2013 analyse multi-canal \u00c9tudes multi-sources, suivi CX global, analyses \u00e9motionnelles fines (12 \u00e9motions) Licence annuelle sur mesure (package avec plateforme Forsta). Tarifs non publics (contrats enterprise). Q\u00b0emotion (FR) SaaS analyse s\u00e9mantique & \u00e9motion \u2013 mid/large entreprises IA NLP \u00e9motionnelle (moteur propri\u00e9taire FR) auto-classification sentiments ( Q\u00b0emotion (@qemotionapp) / X ) Verbatims clients (SAV, enqu\u00eates satisfaction), avis en ligne \u2013 focus irritants & leviers \u00e9motionnels Abonnement annuel sur devis (tarif \u201cstandard sur demande\u201d) ([Q\u00b0emotion : Avis, Prix & Alternatives (MR = Market Research, CX = Customer Experience, EX = Employee Experience) Conclusion \u2013 Diff\u00e9renciation de Lexie sur ce march\u00e9 L\u2019ensemble de ces solutions montre un mouvement vers davantage d\u2019IA et de productivit\u00e9 dans le traitement des questions ouvertes. Pour positionner Lexie commercialement, il convient d\u2019identifier ses USP (Unique Selling Propositions) par rapport \u00e0 ces concurrents. Par exemple : Sp\u00e9cialisation vs. polyvalence : Certains outils (Ascribe, Codeit, Lexie\u2026) se concentrent sur le codage de verbatims d\u2019enqu\u00eates quand d\u2019autres plateformes plus larges visent tout type de feedback (Caplena, Chattermill, etc.). Si Lexie est hyper-sp\u00e9cialis\u00e9 \u201c\u00e9tudes de march\u00e9\u201d, cela peut \u00eatre un atout de focus (meilleure compr\u00e9hension des besoins des instituts, interface con\u00e7ue pour les post-codificateurs, etc.), ou au contraire une limite face \u00e0 des outils polyvalents utilis\u00e9s en continu par les clients. Il faudra donc communiquer soit sur la sp\u00e9cialisation sectorielle (si c\u2019est le cas de Lexie), soit sur la souplesse d\u2019utilisation de Lexie dans divers cas (si comparable aux plateformes g\u00e9n\u00e9ralistes). Ergonomie et simplicit\u00e9 : Un des crit\u00e8res cl\u00e9s de choix est l\u2019 exp\u00e9rience utilisateur . Lexie devra se diff\u00e9rencier par une interface simple, \u201csuffisante\u201d et agr\u00e9able, surtout si les clients potentiels trouvent certaines solutions existantes lourdes ou complexes. Par exemple, si Lexie offre une exp\u00e9rience 100% no-code, en fran\u00e7ais, avec une prise en main rapide , cela peut s\u00e9duire les acteurs europ\u00e9ens non-techniques, par rapport \u00e0 des solutions anglo-saxonnes parfois per\u00e7ues comme plus techniques. L\u2019anecdote de \u201cl\u2019outil suffisant\u201d con\u00e7u par Alexis Favreau va dans ce sens, sugg\u00e9rant une approche minimaliste efficace pour l\u2019utilisateur. Automatisation intelligente : La plupart des concurrents int\u00e8grent l\u2019IA, mais diff\u00e8rent dans la mani\u00e8re : Lexie devra clarifier son approche ( IA g\u00e9n\u00e9rative, mod\u00e8le entra\u00een\u00e9 en interne sur donn\u00e9es d\u2019\u00e9tudes, etc. ). Si Lexie permet comme Blix de tout auto-coder puis d\u2019\u00e9diter , ou comme Codeit de choisir le degr\u00e9 d\u2019IA, c\u2019est un argument \u00e0 mettre en avant pour rassurer sur la qualit\u00e9 ( \u201callier la vitesse de l\u2019IA et le jugement humain\u201d ). Toute fonctionnalit\u00e9 unique (par ex. d\u00e9tection d\u2019ironie, cat\u00e9gorisation \u00e9motionnelle sp\u00e9cifique, etc.) peut \u00eatre un facteur de diff\u00e9renciation. Mod\u00e8le \u00e9conomique adapt\u00e9 : Enfin, la tarification de Lexie doit correspondre au march\u00e9 vis\u00e9. Les grands comptes acceptent des abonnements \u00e9lev\u00e9s, tandis que des plus petites structures cherchent des options \u00e0 l\u2019usage ou abordables . Si Lexie propose par exemple un forfait \u00e0 l\u2019acte (par enqu\u00eate ou par lot de verbatims) ou un freemium d\u2019essai, cela peut le distinguer. D\u2019apr\u00e8s les benchmarks, un point d\u2019entr\u00e9e autour de quelques centaines d\u2019euros par mois pour un volume moyen semble un standard (Caplena \u00e0 99\u20ac/mois pour d\u00e9buter ( Caplena Pricing, Alternatives & More 2025 | Capterra ), Thematic \u00e0 ~25k$/an sur 25k verbatims ( Flexible Plans and Pricing for AI Feedback Analytics | Thematic )). Lexie peut choisir d\u2019\u00eatre comp\u00e9titif sur les prix pour p\u00e9n\u00e9trer le march\u00e9 (par ex. tarifs plus transparents ou d\u00e9gressifs sans engagement long). En r\u00e9sum\u00e9, Lexie \u00e9volue dans un \u00e9cosyst\u00e8me riche allant des g\u00e9ants \u00e9tablis aux startups innovantes . Pour se positionner, Lexie doit capitaliser sur ses forces propres \u2013 qu\u2019il s\u2019agisse d\u2019une meilleure exp\u00e9rience en fran\u00e7ais , d\u2019une IA plus performante ou explicable , d\u2019un service client ou accompagnement sup\u00e9rieur, ou d\u2019une offre flexible \u2013 et communiquer clairement en quoi cela r\u00e9pond mieux aux besoins des utilisateurs de solutions de codification de verbatims. Une veille continue sur les \u00e9volutions de ces concurrents sera \u00e9galement essentielle, car le domaine de l\u2019analyse s\u00e9mantique est en constante progression (ex. nouveaux mod\u00e8les d\u2019IA, int\u00e9grations multiplateformes, etc.). En se d\u00e9marquant sur des crit\u00e8res de valeur ajout\u00e9e et en adressant les points de douleur (co\u00fbt, temps, complexit\u00e9) identifi\u00e9s chez les concurrents, Lexie pourra affiner son positionnement commercial et son discours unique sur le march\u00e9.","title":"LEXIEConcurrence"},{"location":"LEXIEConcurrence/#panorama-des-solutions-de-codification-de-verbatims-concurrents-de-lexie","text":"La codification des r\u00e9ponses ouvertes ( verbatims ) en \u00e9tudes de march\u00e9 a beaucoup \u00e9volu\u00e9 ces derni\u00e8res ann\u00e9es. De nombreux acteurs \u2013 logiciels SaaS d\u2019analyse textuelle, plateformes int\u00e9gr\u00e9es et prestataires de services \u2013 proposent des solutions pour transformer des verbatims en donn\u00e9es exploitables. Ci-dessous, un \u00e9tat des lieux structur\u00e9 des principaux concurrents de Lexie (outil de codification de verbatims), incluant leur positionnement, fonctionnalit\u00e9s, automatisation, tarifs et liens vers leurs sites officiels. Un tableau comparatif r\u00e9capitule ensuite les caract\u00e9ristiques cl\u00e9s des solutions logicielles.","title":"Panorama des Solutions de Codification de Verbatims (Concurrents de Lexie)"},{"location":"LEXIEConcurrence/#solutions-logicielles-saas-de-codification-automatique","text":"Cette section pr\u00e9sente les \u00e9diteurs de logiciels et solutions SaaS (europ\u00e9ens ou internationaux utilis\u00e9s en Europe) sp\u00e9cialis\u00e9s dans l\u2019analyse s\u00e9mantique et le text mining pour verbatims. Chaque solution est d\u00e9crite avec sa cible utilisateur, ses cas d\u2019usage privil\u00e9gi\u00e9s, son niveau d\u2019 automatisation (IA vs manuel), \u00e9l\u00e9ments d\u2019 ergonomie , et informations de tarification si disponibles, ainsi qu\u2019un lien vers le site officiel. Ascribe (Voxco) \u2013 Solution historique de codification de verbatims Positionnement : Ascribe (d\u00e9sormais int\u00e9gr\u00e9 \u00e0 Voxco) est une r\u00e9f\u00e9rence mondiale chez les instituts d\u2019\u00e9tudes. Ciblant les grandes \u00e9quipes d\u2019ops de codification, il permet de g\u00e9rer de gros volumes de r\u00e9ponses ouvertes en mode SaaS web ( Ascribe Coder | Verbatim Coding Software ). Ses cas d\u2019usage couvrent les verbatims d\u2019enqu\u00eates satisfaction, retours clients multilingues, etc., avec une interface collaborative pour les \u00e9quipes de codeurs. Automatisation & ergonomie : Ascribe combine codification manuelle assist\u00e9e et algorithmes de Machine Learning . Son module \u201cAI Coder\u201d acc\u00e9l\u00e8re le codage en proposant des codes automatiques, tout en laissant le contr\u00f4leur ajuster le niveau d\u2019intervention humaine selon le projet ( Ascribe Coder | Verbatim Coding Software ) ( Ascribe Coder | Verbatim Coding Software ). L\u2019interface est pens\u00e9e pour le travail d\u2019\u00e9quipe (supervision en temps r\u00e9el, contr\u00f4le qualit\u00e9 int\u00e9gr\u00e9). Des fonctionnalit\u00e9s d\u2019analyse textuelle avanc\u00e9es (d\u00e9tection de th\u00e8mes, sentiments, co-occurrences) sont incluses. Tarifs : Ascribe est une solution haut de gamme \u00e0 licence d\u2019entreprise (tarifs sur devis). Voxco ne publie pas de prix publics, mais le mod\u00e8le est g\u00e9n\u00e9ralement un abonnement annuel substantiel ou au volume de verbatims. Site officiel : Ascribe \u2013 Verbatim Coding (Voxco) ( Ascribe Coder | Verbatim Coding Software ) Codeit \u2013 Plateforme britannique alliant IA et codage humain Positionnement : Codeit (UK) vise aussi bien les instituts qu\u2019entreprises ayant des \u00e9quipes internes d\u2019analyse verbatim. Cas d\u2019usage typiques : enqu\u00eates marketing avec questions ouvertes, retour SAV, analyse de verbatims multilingues. Codeit se distingue par sa philosophie \u201chuman-led AI\u201d , combinant la vitesse de l\u2019IA et la granularit\u00e9 du codage humain ( codeit ) ( codeit ). Automatisation & ergonomie : L\u2019outil propose une suite compl\u00e8te : extraction automatique de th\u00e8mes et sentiment , g\u00e9n\u00e9ration automatique de codeframe (grille de codes) via IA, auto-codage apprenant \u00e0 partir des exemples cod\u00e9s manuellement, et interface de codification manuelle tr\u00e8s aboutie ( codeit ) ( codeit ). L\u2019utilisateur garde le contr\u00f4le sur l\u2019IA (possibilit\u00e9 de valider/\u00e9diter les codes propos\u00e9s). L\u2019ergonomie collaborative est soulign\u00e9e (projets partag\u00e9s, utilisateurs illimit\u00e9s, int\u00e9gration via API aux outils de sondage). Tarifs : Codeit offre un essai gratuit 30 jours. Les formules sont \u00e0 abonnement annuel selon volume de verbatims cod\u00e9s : par ex., le forfait Essentials (fonctionnalit\u00e9s de base) et Explorer (toutes fonctions IA avanc\u00e9es) sont disponibles \u201c\u00e0 partir de\u201d un certain montant annuel pour ~25 000 verbatims ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Le prix exact est sur devis selon le volume (comptez un mod\u00e8le \u00ab pay per verbatim \u00bb flexible) ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Site officiel : Codeit Software \u2013 \u201cAI Assisted Verbatim Coding\u201d ( codeit ) Caplena \u2013 Plateforme AI multilingue d\u2019analyse de feedback Positionnement : Caplena (start-up bas\u00e9e en Suisse) propose une plateforme d\u2019analyse s\u00e9mantique des feedbacks clients et verbatims d\u2019enqu\u00eates, utilis\u00e9e par plus de 200 entreprises et instituts (ex : DHL, Lufthansa, Euromonitor) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). Cible large : d\u00e9partements Insight, CX, RH (feedback employ\u00e9s) et instituts souhaitant cat\u00e9goriser rapidement des r\u00e9ponses ouvertes et avis en de multiples langues. Automatisation & ergonomie : Caplena repose sur une IA personnalisable et transparente . L\u2019utilisateur peut importer des donn\u00e9es ou se connecter \u00e0 Qualtrics, Brandwatch, TrustPilot, etc., puis laisser l\u2019IA g\u00e9n\u00e9rer des th\u00e9matiques multilingues (100 langues support\u00e9es) qu\u2019on peut ajuster manuellement ( Caplena - Greenbook Directory Listing \u2014 Greenbook ) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). La plateforme offre des tableaux de bord interactifs, de la visualisation de tendances et sentiments par th\u00e8me , avec possibilit\u00e9 d\u2019interroger les r\u00e9sultats via un chatbot. Les avis utilisateurs soulignent la facilit\u00e9 d\u2019usage et la haute qualit\u00e9 de l\u2019analyse, m\u00eame pour de gros volumes ( Caplena Pricing, Alternatives & More 2025 | Capterra ). Tarifs : Caplena fonctionne par abonnement mensuel/annuel incluant un volume de verbatims, avec possibilit\u00e9 d\u2019acheter du volume additionnel \u00e0 l\u2019usage ( Caplena Pricing, Alternatives & More 2025 | Capterra ). Le tarif Basic d\u00e9bute autour de 99 \u20ac par mois (env. quelques milliers de verbatims inclus) ( Caplena Pricing, Alternatives & More 2025 | Capterra ), et des plans Enterprise ou sp\u00e9ciaux Agency existent pour des volumes tr\u00e8s \u00e9lev\u00e9s ou des besoins sur-mesure (tarifs sur devis ). Site officiel : Caplena \u2013 AI Feedback Analysis Canvs AI \u2013 Analyse cognitive des verbatims orient\u00e9e \u00e9motions Positionnement : Canvs AI (USA) est une plateforme d\u2019analyse de texte con\u00e7ue pour les insights consommateurs et la CX . Elle est particuli\u00e8rement pris\u00e9e dans les \u00e9tudes marketing qualitatives, les tests de concept ou de contenu m\u00e9dia, o\u00f9 comprendre les \u00e9motions et th\u00e8mes saillants est cl\u00e9 ( Top Open-End Verbatim Coding Software ) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Des clients m\u00e9dias et grande conso (NBC, Audible, Fruit of the Loom, etc.) l\u2019utilisent pour traiter rapidement des centaines de verbatims et en tirer des enseignements. Automatisation & ergonomie : Canvs promet qu\u2019on ne \u201ccode plus jamais manuellement\u201d : son IA propri\u00e9taire auto-code les verbatims avec une haute pr\u00e9cision et une personnalisation possible des cat\u00e9gories ( Top Open-End Verbatim Coding Software ). L\u2019outil d\u00e9tecte les th\u00e8mes cl\u00e9s, \u00e9motions, tendances sans effort suppl\u00e9mentaire ( Top Open-End Verbatim Coding Software ). L\u2019UX est moderne et simple d\u2019apr\u00e8s les retours, avec des fonctionnalit\u00e9s comme \u201cStory Assist\u201d (pour aider \u00e0 formuler des insights ou rapports) et un co-pilote IA g\u00e9n\u00e9ratif pour accompagner l\u2019analyste ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). L\u2019utilisateur peut toujours ajuster les codes/th\u00e8mes apr\u00e8s coup (fusionner, renommer, etc.), combinant ainsi automatisation et affinement humain. Tarifs : Non divulgu\u00e9s publiquement. Canvs op\u00e8re en mode SaaS entreprise (probablement sous forme d\u2019abonnement annuel selon le volume d\u2019opinions analys\u00e9es). Pas de grille tarifaire publique, il faut contacter le fournisseur pour un devis personnalis\u00e9. Site officiel : Canvs AI \u2013 Text Analysis for Consumer Insights Blix \u2013 Nouvel outil SaaS \u201cg\u00e9n\u00e9ratif\u201d pour coder les open-ends Positionnement : Blix (start-up, 2023) est une plateforme sp\u00e9cialis\u00e9e en codification de questions ouvertes et analyse de verbatims, qui mise sur les LLM (IA g\u00e9n\u00e9rative) les plus r\u00e9cents ( Top Open-End Verbatim Coding Software ). Elle cible les instituts et d\u00e9partements \u00e9tudes cherchant \u00e0 obtenir rapidement des insights quantitatifs \u00e0 partir de donn\u00e9es qualitatives (open-ends, avis en ligne, etc.), sans passer par un codage manuel fastidieux. Automatisation & ergonomie : Blix se pr\u00e9sente comme un outil \u201csans effort\u201d pour l\u2019utilisateur : il d\u00e9couvre automatiquement les sujets dans les r\u00e9ponses (clustering th\u00e9matique), propose un codage assist\u00e9 par IA et peut g\u00e9n\u00e9rer tableaux de bord et synth\u00e8ses automatiques ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) ( Top Open-End Verbatim Coding Software ). L\u2019accent est mis sur la vitesse (obtenir en quelques minutes une cat\u00e9gorisation exploitable) et une interface simple. Par exemple, Blix peut r\u00e9sumer des centaines de verbatims et les r\u00e9partir par th\u00e8mes avec graphiques, quasiment sans intervention humaine. Il est ainsi adapt\u00e9 aux \u00e9quipes r\u00e9duites ou aux besoins de restitution rapide. Tarifs : Blix \u00e9tant r\u00e9cent, les tarifs sont en cours de structuration (souvent early adopters sur devis). A priori, mod\u00e8le SaaS avec abonnement mensuel ou annuel selon nombre de verbatims analys\u00e9s. L\u2019\u00e9diteur met en avant des d\u00e9mos et essais personnalis\u00e9s plut\u00f4t qu\u2019un tarif standard public. Site officiel : Blix \u2013 AI-Powered Text Analysis ( Top Open-End Verbatim Coding Software ) Chattermill \u2013 Analyse centralis\u00e9e des feedbacks multi-canaux Positionnement : Chattermill (UK) est un outil SaaS d\u2019 analyse des feedback clients qui unifie plusieurs sources (enqu\u00eates, tickets support, r\u00e9seaux sociaux\u2026) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Utilis\u00e9 plut\u00f4t par les \u00e9quipes CX ou produit pour regrouper au m\u00eame endroit les verbatims de diverses origines, il permet une vision 360\u00b0 de la voix du client. Moins sp\u00e9cifique \u201c\u00e9tudes de march\u00e9\u201d classique, il s\u2019adresse aux entreprises cherchant \u00e0 analyser en continu la satisfaction client. Automatisation & fonctionnalit\u00e9s : Chattermill emploie le Machine Learning pour classifier automatiquement les commentaires et offrir des analyses de sentiments et th\u00e8mes cl\u00e9s. L\u2019interface fournit des rapports d\u00e9taill\u00e9s et visualisations pr\u00eates \u00e0 l\u2019emploi pour les d\u00e9cideurs ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Son int\u00e9r\u00eat r\u00e9side surtout dans l\u2019 agr\u00e9gation facile de multiples canaux en un tableau de bord unique. Tarifs : Non disponibles publiquement \u2013 probablement un SaaS entreprise avec abonnement annuel modul\u00e9 par le nombre de sources connect\u00e9es et volume de donn\u00e9es. Site officiel : Chattermill Qualtrics Text iQ \u2013 Module int\u00e9gr\u00e9 d\u2019analyse textuelle Positionnement : Text iQ est la composante d\u2019analyse s\u00e9mantique int\u00e9gr\u00e9e \u00e0 la plateforme d\u2019enqu\u00eate Qualtrics . Destin\u00e9 aux utilisateurs de Qualtrics XM, il permet de coder les verbatims collect\u00e9s via les enqu\u00eates Qualtrics sans outil tiers ( Text iQ Functionality - Qualtrics ). Cible : entreprises d\u00e9j\u00e0 \u00e9quip\u00e9es de Qualtrics pour leurs sondages (CX, ressources humaines, \u00e9tudes marketing) voulant une solution interne pour cat\u00e9goriser les r\u00e9ponses ouvertes. Automatisation & ergonomie : Text iQ utilise l\u2019 apprentissage automatique (mod\u00e8les NLP) pour identifier des topics dans les feedback et scorer le sentiment de chaque verbatim ( New Text iQ machine learning models deliver industry ... - Qualtrics ). L\u2019utilisateur peut entra\u00eener le mod\u00e8le en cat\u00e9gorisant manuellement quelques r\u00e9ponses puis appliquer ces cat\u00e9gories \u00e0 tout l\u2019ensemble. L\u2019ergonomie est basique (interface int\u00e9gr\u00e9e \u00e0 Qualtrics, visuels simples type nuage de mots, th\u00e8mes et sentiments). Certains retours sugg\u00e8rent que Text iQ reste moins puissant ou flexible que des solutions d\u00e9di\u00e9es ( Text iQ is pretty lame, but other than that, Qualtrics is great (Part 1) ), mais il a l\u2019avantage d\u2019\u00eatre directement inclus dans l\u2019environnement de collecte. Tarifs : Text iQ est g\u00e9n\u00e9ralement inclus dans les licences Qualtrics niveau Advanced ou Enterprise . Qualtrics vend ses solutions en package (par ex., ~420 $/mois pour un bundle avec 1000 r\u00e9ponses/mois pour le plan Research Core) ( Buy Qualtrics Online Today ). Le module text analytics n\u2019est pas factur\u00e9 \u00e0 part, mais les offres plus co\u00fbteuses de Qualtrics incluent plus de capacit\u00e9s d\u2019analyse (dont Text iQ). Forsta (Ex-Confirmit) \u2013 Text Analytics int\u00e9gr\u00e9 pour instituts Positionnement : Forsta, qui r\u00e9unit Confirmit et d\u2019autres solutions d\u2019enqu\u00eate, propose un module d\u2019 analyse texte pens\u00e9 pour les \u00e9tudes de march\u00e9 et la Voix du Client. Cible : instituts et grandes entreprises (Forsta est un acteur B2B) ayant besoin d\u2019analyser des verbatims issues d\u2019enqu\u00eates multi-pays et multi-sources au sein d\u2019une m\u00eame plateforme. Automatisation & fonctionnalit\u00e9s : L\u2019outil d\u2019analyse textuelle Forsta combine IA et r\u00e8gles personnalisables . Il permet de d\u00e9finir des cat\u00e9gories manuellement ( rule-based ) tout en utilisant des mod\u00e8les de sentiment approfondi (12 \u00e9motions) pour segmenter les r\u00e9ponses ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). Forsta se distingue par la possibilit\u00e9 de fusionner plusieurs flux de donn\u00e9es (enqu\u00eates, interactions CRM, etc.) en un seul canal d\u2019analyse ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ). L\u2019interface offre des synth\u00e8ses multi-sources, ce qui convient \u00e0 ceux qui veulent regrouper plusieurs enqu\u00eates ou vagues . Tarifs : Forsta fonctionne sur licence d\u2019entreprise (tarification sur mesure selon le volume de donn\u00e9es et modules choisis). Souvent, il s\u2019agit de contrats annuels globaux incluant la plateforme d\u2019enqu\u00eate et le module analytique. Autres solutions notables : NVivo, Atlas.ti, MAXQDA : logiciels d\u2019 analyse qualitative acad\u00e9mique, permettant de coder manuellement des verbatims et de faire des recherches lexicales. Moins adapt\u00e9s aux gros volumes quantitatifs (pas d\u2019automatisation AI pouss\u00e9e par d\u00e9faut). Par exemple, NVivo propose un auto-codage pr\u00e9liminaire par th\u00e8mes via IA, mais cela reste sommaire et orient\u00e9 recherche exploratoire ( NVivo: Leading Qualitative Data Analysis Software - Lumivero ). Provalis Research (WordStat, QDA Miner) : outils combinant statistique et codification qualitative, utilis\u00e9s parfois en \u00e9tudes (surtout Am\u00e9rique du Nord). Ils permettent le post-codage de questions ouvertes avec des dictionnaires ou l\u2019IA, tout en laissant le contr\u00f4le total au charg\u00e9 d\u2019\u00e9tude ( Codage et analyse des questions ouvertes - Provalis Research ). Outils open-source / API : certaines \u00e9quipes data utilisent directement des API NLP (ex : AWS Comprehend , Google Cloud NL, Azure Language ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 )) pour construire des analyses sur mesure. Ces solutions offrent la scalabilit\u00e9 et la souplesse technique , mais n\u00e9cessitent des comp\u00e9tences de programmation (pas de GUI conviviale pr\u00eate \u00e0 l\u2019emploi). Startups IA s\u00e9mantique (France) : Q\u00b0emotion (analyse des \u00e9motions et irritants clients) est un SaaS fran\u00e7ais qui cat\u00e9gorise les verbatims en sentiments/\u00e9motions de mani\u00e8re automatis\u00e9e ( Q\u00b0emotion (@qemotionapp) / X ). Semdee ou Proxem ont \u00e9galement propos\u00e9 des plateformes de text mining orient\u00e9es entreprise (analyse des avis conso, CRM, etc.). Ces outils locaux mettent en avant une adaptation aux sp\u00e9cificit\u00e9s de langue fran\u00e7aise et un accompagnement conseil, mais sont souvent vendus comme solutions globales de text analytics plus que comme de simples outils de codification.","title":"Solutions logicielles &amp; SaaS de codification automatique"},{"location":"LEXIEConcurrence/#prestataires-de-codification-manuelle-ou-semi-automatique","text":"En parall\u00e8le des logiciels, de nombreuses entreprises et freelances proposent des services de codification de verbatims, en g\u00e9n\u00e9ral manuellement (\u00e9ventuellement avec un outillage interne). Ces prestataires sont souvent utilis\u00e9s par les instituts pour externaliser le post-codage de questionnaires ouverts, notamment lorsque les volumes sont tr\u00e8s importants ou multilingues. Bureau de codage sp\u00e9cialis\u00e9s : Des soci\u00e9t\u00e9s comme Focus Forward (USA), CodingExperts (USA), Gazelle Global (USA) ou BJD (USA) se sont sp\u00e9cialis\u00e9es de longue date dans le codage manuel des verbatims ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 ). Elles disposent de \u00e9quipes de codeurs exp\u00e9riment\u00e9s , parfois r\u00e9parties mondialement pour couvrir de nombreuses langues et fuseaux horaires. Leur proposition de valeur : la qualit\u00e9 (codage par des humains form\u00e9s pour d\u00e9tecter les nuances), la flexibilit\u00e9 (services de transcription, traduction en plus du codage), mais cela implique un d\u00e9lai et un co\u00fbt plus \u00e9lev\u00e9s qu\u2019une solution automatique. Par exemple, Nuance (USA) est r\u00e9put\u00e9 pour g\u00e9rer des volumes massifs avec des codeurs ayant en moyenne 11 ans d\u2019exp\u00e9rience ( Verbatim Coding Services | Nuance ) ( Verbatim Coding Services | Nuance ). Ces soci\u00e9t\u00e9s facturent g\u00e9n\u00e9ralement \u00e0 l\u2019unit\u00e9 (par r\u00e9ponse cod\u00e9e) ou au temps pass\u00e9 , avec des bar\u00e8mes diff\u00e9rents selon la complexit\u00e9 du codeframe, les langues, etc. (les co\u00fbts sont souvent sur devis apr\u00e8s estimation du volume et de la langue ( Verbatim Coding Services | Nuance )). Agences multilingues en Europe : Au Royaume-Uni, on trouve par exemple The Language Factory (UK) ou Language Insight (UK) qui combinent traduction et codification, utiles pour des projets internationaux ( Top Market Research Coding Services & Software in 2025 ). En Allemagne, Tema-Q offre aussi ce type de service. Ces prestataires europ\u00e9ens mettent en avant la pr\u00e9cision linguistique et la connaissance culturelle locale pour coder fid\u00e8lement des verbatims \u00e9trangers. Les tarifs peuvent \u00eatre un peu plus \u00e9lev\u00e9s que des offres offshore, mais avec une assurance qualit\u00e9 linguistique. BPO et offshore : Des soci\u00e9t\u00e9s d\u2019outsourcing comme Flatworld Solutions (Inde) ou Outsource2India proposent des services de codage \u00e0 moindre co\u00fbt, mobilisant de grandes \u00e9quipes en Asie ( Outsource Verbatim Coding Services - Flatworld Solutions ) ( Top Market Research Coding Services & Software in 2025 ). Le co\u00fbt unitaire y est comp\u00e9titif, ce qui convient pour d\u2019\u00e9normes volumes, mais cela requiert une tr\u00e8s bonne transmission du cahier de codage (risque de d\u00e9calage culturel ou d\u2019 aller-retour si consignes floues ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 )). Freelances & plateformes : Pour de plus petits projets, certains instituts ou entreprises font appel \u00e0 des freelances (via Fiverr, Upwork, Malt\u2026). C\u2019est une option souple et \u00e9conomique pour de petits volumes ( Top Market Research Coding Services & Software in 2025 ), mais la qualit\u00e9 d\u00e9pend fortement de l\u2019individu recrut\u00e9 et cela demande de briefer chaque nouveau freelance. Positionnement de ces services : En g\u00e9n\u00e9ral, le codage manuel externalis\u00e9 apporte la finesse et l\u2019assurance qu\u2019un \u0153il humain passe sur chaque r\u00e9ponse, utile pour des \u00e9tudes o\u00f9 la pr\u00e9cision prime sur la rapidit\u00e9 (par ex. codification de verbatims m\u00e9dicaux complexes, ou \u00e9tudes ad hoc de faible volume mais hautement strat\u00e9giques). Cependant, il pr\u00e9sente des inconv\u00e9nients notables : d\u00e9lais plus longs, co\u00fbt croissant avec le volume, risque d\u2019 erreurs humaines ou d\u2019incoh\u00e9rences si la formation est insuffisante ( Top Market Research Coding Services & Software in 2025 ) ( Top Market Research Coding Services & Software in 2025 ). De plus, si le client souhaite modifier la grille de codes en cours de route, il faut souvent recoder depuis le d\u00e9but , engendrant du rework co\u00fbteux ( Top Market Research Coding Services & Software in 2025 ). \u27a1\ufe0f Tendance du march\u00e9 : nombre d\u2019acteurs proposent d\u00e9sormais des approches hybrides , combinant automatisation et validation humaine. Par exemple, certains prestataires traditionnels de coding int\u00e8grent des outils d\u2019IA pour pr\u00e9-classer les verbatims et ne valider manuellement que les cas douteux. De leur c\u00f4t\u00e9, des outils comme Lexie, Caplena ou Codeit permettent aux utilisateurs d\u2019 ajuster manuellement les cat\u00e9gorisations automatiques \u2013 r\u00e9unissant le meilleur des deux mondes (vitesse de l\u2019IA + jugement humain).","title":"Prestataires de codification manuelle ou semi-automatique"},{"location":"LEXIEConcurrence/#tableau-comparatif-des-principales-solutions-logicielles","text":"Pour aider \u00e0 la comparaison, le tableau suivant synth\u00e9tise quelques attributs cl\u00e9s des solutions logiciels/SaaS concurrentes de Lexie : Solution Type / Cible Automatisation Cas d\u2019usage cl\u00e9s Mod\u00e8le tarifaire Ascribe (Voxco) Outil SaaS codification \u2013 grandes \u00e9quipes MR mondiales IA + codage humain (option \u201cAI Coder\u201d) ([Ascribe Coder Verbatim Coding Software](https://ascribe.voxco.com/fr/coder#:~:text=Global%20Non)) \u2013 interface collaborative Enqu\u00eates satisfaction, verbatims multi-langues (volumes massifs) Codeit SaaS \u201chuman-led AI\u201d \u2013 \u00e9quipes \u00e9tudes (toutes tailles) IA assist\u00e9e par l\u2019humain (ML, th\u00e8mes auto, codeframe auto) ( codeit ) \u2013 contr\u00f4le total utilisateur Open-ends enqu\u00eates marketing, retours clients \u2013 besoin de granularit\u00e9 fine Abonnement annuel selon volume (pay-per-verbatim) ( codeit Software Bundles - Pricing ) ( codeit Software Bundles - Pricing ). Essai 30j gratuit. Caplena Plateforme AI feedback \u2013 entreprises & instituts IA flexible (topics multi-langues ajustables par l\u2019utilisateur) ( Caplena - Greenbook Directory Listing \u2014 Greenbook ). Tableau de bord insights Feedback NPS/CSAT, avis clients, verbatims RH \u2013 analyses multilingues rapides Forfait mensuel/annuel par paliers volume (ex. ~99\u20ac/mois de base) ([Caplena Pricing, Alternatives & More 2025 Canvs AI Plateforme Insights IA \u2013 grands comptes CX/MR (US) IA autonome (codification auto \u201cno code\u201d compl\u00e8te) \u2013 \u00e9motion & th\u00e8mes ( Top Open-End Verbatim Coding Software ) ajustables apr\u00e8s coup \u00c9tudes qualitatives consumer (produits, pubs), analyses Vox Populi \u00e0 grande \u00e9chelle Abonnement SaaS entreprise (devis). Pas de tarifs publics (valeur ajout\u00e9e sur mesure). Blix Outil SaaS IA g\u00e9n\u00e9rative \u2013 start-up (2025) IA LLM (g\u00e9n\u00e9ration automatique de codes, synth\u00e8ses) \u2013 supervision minime Codifier rapidement des open-ends (\u00e9tudes flash, retour \u00e0 chaud) sans \u00e9quipe d\u00e9di\u00e9e Offres en cours de d\u00e9finition \u2013 plut\u00f4t abonnement selon nombre de verbatims. D\u00e9mo gratuite disponible. Qualtrics Text iQ Module int\u00e9gr\u00e9 (Qualtrics) \u2013 clients Qualtrics (CX, EX) IA ML interne (topics + sentiment auto) \u2013 n\u00e9cessite entra\u00eenement de mod\u00e8les ( Text iQ Functionality - Qualtrics ) Enqu\u00eates men\u00e9es sous Qualtrics voulant analyse int\u00e9gr\u00e9e (NPS, feedback employ\u00e9s\u2026) Inclus dans licences Qualtrics avanc\u00e9es (ex. offre Research Core \u00e0 ~420$/mois) ( Buy Qualtrics Online Today ). Pas de co\u00fbt unitaire, plafonds de r\u00e9ponses selon plan. Forsta Text Analytics Module int\u00e9gr\u00e9 (Forsta/Confirmit) \u2013 instituts & enterprises IA + r\u00e8gles (mix automatisation et lexiques sur mesure) ( 12 Best AI-Powered Text Analysis Software Tools in 2025 ) \u2013 analyse multi-canal \u00c9tudes multi-sources, suivi CX global, analyses \u00e9motionnelles fines (12 \u00e9motions) Licence annuelle sur mesure (package avec plateforme Forsta). Tarifs non publics (contrats enterprise). Q\u00b0emotion (FR) SaaS analyse s\u00e9mantique & \u00e9motion \u2013 mid/large entreprises IA NLP \u00e9motionnelle (moteur propri\u00e9taire FR) auto-classification sentiments ( Q\u00b0emotion (@qemotionapp) / X ) Verbatims clients (SAV, enqu\u00eates satisfaction), avis en ligne \u2013 focus irritants & leviers \u00e9motionnels Abonnement annuel sur devis (tarif \u201cstandard sur demande\u201d) ([Q\u00b0emotion : Avis, Prix & Alternatives (MR = Market Research, CX = Customer Experience, EX = Employee Experience)","title":"Tableau comparatif des principales solutions logicielles"},{"location":"LEXIEConcurrence/#conclusion-differenciation-de-lexie-sur-ce-marche","text":"L\u2019ensemble de ces solutions montre un mouvement vers davantage d\u2019IA et de productivit\u00e9 dans le traitement des questions ouvertes. Pour positionner Lexie commercialement, il convient d\u2019identifier ses USP (Unique Selling Propositions) par rapport \u00e0 ces concurrents. Par exemple : Sp\u00e9cialisation vs. polyvalence : Certains outils (Ascribe, Codeit, Lexie\u2026) se concentrent sur le codage de verbatims d\u2019enqu\u00eates quand d\u2019autres plateformes plus larges visent tout type de feedback (Caplena, Chattermill, etc.). Si Lexie est hyper-sp\u00e9cialis\u00e9 \u201c\u00e9tudes de march\u00e9\u201d, cela peut \u00eatre un atout de focus (meilleure compr\u00e9hension des besoins des instituts, interface con\u00e7ue pour les post-codificateurs, etc.), ou au contraire une limite face \u00e0 des outils polyvalents utilis\u00e9s en continu par les clients. Il faudra donc communiquer soit sur la sp\u00e9cialisation sectorielle (si c\u2019est le cas de Lexie), soit sur la souplesse d\u2019utilisation de Lexie dans divers cas (si comparable aux plateformes g\u00e9n\u00e9ralistes). Ergonomie et simplicit\u00e9 : Un des crit\u00e8res cl\u00e9s de choix est l\u2019 exp\u00e9rience utilisateur . Lexie devra se diff\u00e9rencier par une interface simple, \u201csuffisante\u201d et agr\u00e9able, surtout si les clients potentiels trouvent certaines solutions existantes lourdes ou complexes. Par exemple, si Lexie offre une exp\u00e9rience 100% no-code, en fran\u00e7ais, avec une prise en main rapide , cela peut s\u00e9duire les acteurs europ\u00e9ens non-techniques, par rapport \u00e0 des solutions anglo-saxonnes parfois per\u00e7ues comme plus techniques. L\u2019anecdote de \u201cl\u2019outil suffisant\u201d con\u00e7u par Alexis Favreau va dans ce sens, sugg\u00e9rant une approche minimaliste efficace pour l\u2019utilisateur. Automatisation intelligente : La plupart des concurrents int\u00e8grent l\u2019IA, mais diff\u00e8rent dans la mani\u00e8re : Lexie devra clarifier son approche ( IA g\u00e9n\u00e9rative, mod\u00e8le entra\u00een\u00e9 en interne sur donn\u00e9es d\u2019\u00e9tudes, etc. ). Si Lexie permet comme Blix de tout auto-coder puis d\u2019\u00e9diter , ou comme Codeit de choisir le degr\u00e9 d\u2019IA, c\u2019est un argument \u00e0 mettre en avant pour rassurer sur la qualit\u00e9 ( \u201callier la vitesse de l\u2019IA et le jugement humain\u201d ). Toute fonctionnalit\u00e9 unique (par ex. d\u00e9tection d\u2019ironie, cat\u00e9gorisation \u00e9motionnelle sp\u00e9cifique, etc.) peut \u00eatre un facteur de diff\u00e9renciation. Mod\u00e8le \u00e9conomique adapt\u00e9 : Enfin, la tarification de Lexie doit correspondre au march\u00e9 vis\u00e9. Les grands comptes acceptent des abonnements \u00e9lev\u00e9s, tandis que des plus petites structures cherchent des options \u00e0 l\u2019usage ou abordables . Si Lexie propose par exemple un forfait \u00e0 l\u2019acte (par enqu\u00eate ou par lot de verbatims) ou un freemium d\u2019essai, cela peut le distinguer. D\u2019apr\u00e8s les benchmarks, un point d\u2019entr\u00e9e autour de quelques centaines d\u2019euros par mois pour un volume moyen semble un standard (Caplena \u00e0 99\u20ac/mois pour d\u00e9buter ( Caplena Pricing, Alternatives & More 2025 | Capterra ), Thematic \u00e0 ~25k$/an sur 25k verbatims ( Flexible Plans and Pricing for AI Feedback Analytics | Thematic )). Lexie peut choisir d\u2019\u00eatre comp\u00e9titif sur les prix pour p\u00e9n\u00e9trer le march\u00e9 (par ex. tarifs plus transparents ou d\u00e9gressifs sans engagement long). En r\u00e9sum\u00e9, Lexie \u00e9volue dans un \u00e9cosyst\u00e8me riche allant des g\u00e9ants \u00e9tablis aux startups innovantes . Pour se positionner, Lexie doit capitaliser sur ses forces propres \u2013 qu\u2019il s\u2019agisse d\u2019une meilleure exp\u00e9rience en fran\u00e7ais , d\u2019une IA plus performante ou explicable , d\u2019un service client ou accompagnement sup\u00e9rieur, ou d\u2019une offre flexible \u2013 et communiquer clairement en quoi cela r\u00e9pond mieux aux besoins des utilisateurs de solutions de codification de verbatims. Une veille continue sur les \u00e9volutions de ces concurrents sera \u00e9galement essentielle, car le domaine de l\u2019analyse s\u00e9mantique est en constante progression (ex. nouveaux mod\u00e8les d\u2019IA, int\u00e9grations multiplateformes, etc.). En se d\u00e9marquant sur des crit\u00e8res de valeur ajout\u00e9e et en adressant les points de douleur (co\u00fbt, temps, complexit\u00e9) identifi\u00e9s chez les concurrents, Lexie pourra affiner son positionnement commercial et son discours unique sur le march\u00e9.","title":"Conclusion \u2013 Diff\u00e9renciation de Lexie sur ce march\u00e9"},{"location":"Strings/","text":"Documentation Utilitaires de cha\u00eenes de caract\u00e8res Introduction aux cha\u00eenes de caract\u00e8res en .NET Les cha\u00eenes de caract\u00e8res (strings) en .NET sont des objets immuables, ce qui signifie qu'une fois cr\u00e9\u00e9s, ils ne peuvent pas \u00eatre modifi\u00e9s. Toute op\u00e9ration qui semble modifier une cha\u00eene cr\u00e9e en r\u00e9alit\u00e9 une nouvelle instance. Les m\u00e9thodes de la biblioth\u00e8que standard de .NET sont compl\u00e9t\u00e9es par de nombreuses m\u00e9thodes d'extension de la biblioth\u00e8que ADN. En voici la liste. Sommaire Manipulation basique des cha\u00eenes LengthOf Repeat IsSingleLine SingleLine Truncate CountStartCharacters CountEndCharacters CountCharacters FixedLength RemoveEmptyStrings HasMultiLines IsMultiLine Transformation et formatage de texte RemoveAccents RemoveAllButLettersAndDigits RemoveAllButDigits ExtractIf RemoveIf Capitalize Uncapitalize Pascalize Camelize Underscore Dasherize Minimize Titleize Humanize Ordinalize Initials StripHtml / HtmlToString StringToHtml Clean SafeTrim Align Recherche et comparaison ContainsIgnoreCase ContainsOneOf / ContainsAny WildcardMatch FuzzyCompare AlphaNumCompare AlphaNumSort FindCommonPart FindCommonPartOffset FindCommonRoot CompareStrings CompareNames AreNamesEqual StartsWithNoCase Contains (with comparison) Fractionnement et jointure ScanLines ScanWords Split SplitIgnoringLiterals SplitOnSize JoinWith / ToString FromString ModifyLines Extract GetPart GetRightPart Conversion et parsing SafeParse (bool, double, int) ParseValue ParseValues ParseIntVector ParseDoubleVector ParseStringVector ReadInteger ToEnum TryToEnum ToObject ToChar IsNumber IsInteger IsBoolean IsExpressionTrue / IsExpressionFalse IsIntegerVector IsNumericRange TryParseNumericRange IsNumericExpression ResolveNumericExpression TryEvaluateNumericExpression Nommage et identification IsKeyword IsKeywordPath IsMetaKeyword IsName IsSymbolName ArrangeName / Nameize EnsureUniqueName EnsureUniqueNames EnsureUniqueFileName NewUniqueName NewUniqueId FindRootName IsCodeExpression GetCodeExpressionValue FormatCodeExpression IsEntityExpression GetEntityExpressionValue FormatEntityExpression Support d'encodages et internationalisation DetectEncoding FixEncoding Recode ToUtf8 ToDefaultEncoding IsUpper / IsLower IsUnaccentedLetter IsUnaccentedLetterOrDigit Utilitaires pour fichiers et chemins AssumeIOCompatible CompareFileNames ComparePaths NormalizePath MakeValidFileName MakePath IsAbsolutePath IsRelativePath FormatFileSize CleanUrl IsUrl Expressions et patterns HasWildcard RemoveWildcards IsWildcard ContainsJoker IsTag IsTagExactly UntagString / UntagStringEx UntagText UntagObject ExtractAnnotations HasAnnotation ParseAnnotation SmartFormat LooksLikeSelectionPattern ParseXmlAttributes FormatAsXmlAttributesString ReGet FindMatchingParenthese / FindMatchingClosingChar IsTerminalExpression Utilitaires sp\u00e9cifiques LooksLikeEmail LooksLikeJson LooksLikeXml ZipString / UnzipString HashString BytesToHexa / HexaToBytes Shuffle Quote / Unquote AutoQuote SlashString / UnslashString AutoFormatValue GetAutoFormat GetTimeStamp GetPrettyTimeStamp Inject GenerateRandomString ToExcelAddress IsExcelAddress FormatExcelText Manipulation basique des cha\u00eenes LengthOf Retourne la longueur d'une cha\u00eene, ou 0 si la cha\u00eene est null. length = Strings.LengthOf(\"hello\") # Retourne 5 length = Strings.LengthOf(None) # Retourne 0 Repeat R\u00e9p\u00e8te une cha\u00eene un nombre sp\u00e9cifi\u00e9 de fois. repeated = \"abc\".Repeat(3) # Retourne \"abcabcabc\" IsSingleLine V\u00e9rifie si une cha\u00eene ne contient pas de retours \u00e0 la ligne. result = \"hello world\".IsSingleLine() # Retourne True result = \"hello\\nworld\".IsSingleLine() # Retourne False SingleLine Convertit une cha\u00eene multi-lignes en une seule ligne en rempla\u00e7ant les retours \u00e0 la ligne par des espaces. text = \"hello\\nworld\".SingleLine() # Retourne \"hello world\" Truncate Tronque une cha\u00eene \u00e0 une longueur maximale, avec diff\u00e9rentes options. text = \"Hello world, how are you today?\".Truncate(10) # Retourne \"Hello worl\u2026\" # Avec l'option FinishWord pour compl\u00e9ter le dernier mot text = \"Hello world, how are you today?\".Truncate(10, TruncateOptions.FinishWord) # Retourne \"Hello\u2026\" CountStartCharacters Compte le nombre de caract\u00e8res sp\u00e9cifi\u00e9s au d\u00e9but d'une cha\u00eene. count = \"!!Hello\".CountStartCharacters(\"!\", \"!\") # Retourne 2 CountEndCharacters Compte le nombre de caract\u00e8res sp\u00e9cifi\u00e9s \u00e0 la fin d'une cha\u00eene. count = \"Hello!!\".CountEndCharacters(\"!\", \"!\") # Retourne 2 CountCharacters Compte le nombre d'occurrences des caract\u00e8res sp\u00e9cifi\u00e9s dans une cha\u00eene. count = Strings.CountCharacters(\"Hello World\", \"l\", \"o\") # Retourne 4 FixedLength Aligne une cha\u00eene \u00e0 droite ou \u00e0 gauche pour atteindre une longueur sp\u00e9cifi\u00e9e. text = Strings.FixedLength(\"abc\", 5) # Retourne \" abc\" text = Strings.FixedLength(\"abc\", 5, \"0\") # Retourne \"00abc\" text = Strings.FixedLength(\"abc\", 5, \" \", False) # Retourne \"abc \" RemoveEmptyStrings Supprime les cha\u00eenes vides d'une liste. strings = [\"a\", \"\", \"b\", \"\", \"c\"] Strings.RemoveEmptyStrings(strings) # Modifie la liste : [\"a\", \"b\", \"c\"] HasMultiLines V\u00e9rifie si une cha\u00eene contient plusieurs lignes. result = \"hello\\nworld\".HasMultiLines() # Retourne True IsMultiLine V\u00e9rifie si une cha\u00eene contient plusieurs lignes (alias de HasMultiLines). result = \"hello\\nworld\".IsMultiLine() # Retourne True Transformation et formatage de texte RemoveAccents Supprime les accents d'une cha\u00eene. text = \"\u00e9\u00e0\u00e7\u00e8\u00f1\".RemoveAccents() # Retourne \"eacen\" RemoveAllButLettersAndDigits Supprime tous les caract\u00e8res qui ne sont ni des lettres ni des chiffres. text = \"Hello, World! 123\".RemoveAllButLettersAndDigits() # Retourne \"HelloWorld123\" RemoveAllButDigits Supprime tous les caract\u00e8res qui ne sont pas des chiffres. text = \"Hello, World! 123\".RemoveAllButDigits() # Retourne \"123\" ExtractIf Extrait les caract\u00e8res qui satisfont une condition. # Extrait seulement les voyelles text = \"Hello World\".ExtractIf(lambda c: c in \"aeiouAEIOU\") # Retourne \"eoo\" RemoveIf Supprime les caract\u00e8res qui satisfont une condition. # Supprime les voyelles text = \"Hello World\".RemoveIf(lambda c: c in \"aeiouAEIOU\") # Retourne \"Hll Wrld\" Capitalize Met en majuscule la premi\u00e8re lettre d'une cha\u00eene. text = \"hello world\".Capitalize() # Retourne \"Hello world\" Uncapitalize Met en minuscule la premi\u00e8re lettre d'une cha\u00eene. text = \"Hello world\".Uncapitalize() # Retourne \"hello world\" Pascalize Convertit une cha\u00eene en PascalCase. text = \"hello_world\".Pascalize() # Retourne \"HelloWorld\" Camelize Convertit une cha\u00eene en camelCase. text = \"hello_world\".Camelize() # Retourne \"helloWorld\" Underscore Convertit une cha\u00eene en snake_case. text = \"HelloWorld\".Underscore() # Retourne \"hello_world\" Dasherize Convertit une cha\u00eene en kebab-case. text = \"HelloWorld\".Dasherize() # Retourne \"hello-world\" Minimize Minimise une cha\u00eene en supprimant les accents et en ne conservant que les lettres et chiffres, convertis en majuscules. text = \"Hello, World! 123\".Minimize() # Retourne \"HELLOWORLD123\" Titleize Convertit une cha\u00eene en format titre (majuscule pour chaque mot). text = \"hello_world\".Titleize() # Retourne \"Hello World\" Humanize Rend une cha\u00eene plus lisible pour les humains. text = \"hello_world\".Humanize() # Retourne \"Hello world\" Ordinalize Convertit un nombre en forme ordinale. text = \"1\".Ordinalize() # Retourne \"1st\" text = \"2\".Ordinalize() # Retourne \"2nd\" Initials Extrait les initiales d'une cha\u00eene. initials = Strings.Initials(\"Hello World\") # Retourne \"HW\" StripHtml / HtmlToString Supprime les balises HTML d'une cha\u00eene. text = \"<p>Hello <b>World</b></p>\".StripHtml() # Retourne \"Hello World\" StringToHtml Convertit une cha\u00eene en format HTML (remplace les retours \u00e0 la ligne par des ). html = \"Hello\\nWorld\".StringToHtml() # Retourne \"Hello<br/>World\" Clean Nettoie une cha\u00eene en supprimant le HTML, les retours \u00e0 la ligne, etc. text = \"<p>Hello\\nWorld</p>\".Clean() # Retourne \"Hello World\" SafeTrim Supprime les espaces blancs d'une cha\u00eene, retourne une cha\u00eene vide si l'entr\u00e9e est null. text = \" Hello \".SafeTrim() # Retourne \"Hello\" text = None.SafeTrim() # Retourne \"\" Align Aligne une cha\u00eene selon une largeur et un alignement sp\u00e9cifi\u00e9s. text = \"Hello\".Align(10, HorizontalAlignment.Left) # Retourne \"Hello \" text = \"Hello\".Align(10, HorizontalAlignment.Right) # Retourne \" Hello\" Recherche et comparaison ContainsIgnoreCase V\u00e9rifie si une cha\u00eene contient une sous-cha\u00eene, sans tenir compte de la casse. result = \"Hello World\".ContainsIgnoreCase(\"world\") # Retourne True ContainsOneOf / ContainsAny V\u00e9rifie si une cha\u00eene contient au moins un des caract\u00e8res sp\u00e9cifi\u00e9s. result = \"Hello World\".ContainsAny('x', 'y', 'z', 'o') # Retourne True (contient 'o') WildcardMatch V\u00e9rifie si une cha\u00eene correspond \u00e0 un pattern avec jokers (* et ?). result = Strings.WildcardMatch(\"te?t\", \"test\") # Retourne True result = Strings.WildcardMatch(\"te*\", \"test\") # Retourne True result = Strings.WildcardMatch(\"te?t\", \"text\") # Retourne False result = Strings.WildcardMatch(\"*est\", \"test\") # Retourne True FuzzyCompare Compare deux cha\u00eenes et retourne un pourcentage de similitude (0 \u00e0 100). similarity = Strings.FuzzyCompare(\"hello\", \"hallo\") # Retourne un score comme 80 AlphaNumCompare Compare deux cha\u00eenes de fa\u00e7on alphanum\u00e9rique (trie \"A2\" avant \"A10\"). result = Strings.AlphaNumCompare(\"A2\", \"A10\") # Retourne une valeur n\u00e9gative AlphaNumSort Trie une liste de cha\u00eenes de fa\u00e7on alphanum\u00e9rique. sorted = [\"A1\", \"A10\", \"A2\"].AlphaNumSort() # Retourne [\"A1\", \"A2\", \"A10\"] FindCommonPart Trouve la partie commune au d\u00e9but de plusieurs cha\u00eenes. strings = [\"abcdef\", \"abcxyz\", \"abcghi\"] common = Strings.FindCommonPart(strings) # Retourne \"abc\" FindCommonPartOffset Trouve la position de fin de la partie commune \u00e0 plusieurs cha\u00eenes. strings = [\"abcdef\", \"abcxyz\"] offset = Strings.FindCommonPartOffset(strings) # Retourne 3 FindCommonRoot Trouve la racine commune dans une liste de cha\u00eenes (utile pour les identifiants). strings = [\"user_profile\", \"user_settings\", \"user_account\"] root = Strings.FindCommonRoot(strings) # Retourne \"USER\" CompareStrings Compare deux cha\u00eenes, avec option pour ignorer la casse. result = Strings.CompareStrings(\"abc\", \"ABC\", True) # Retourne 0 (\u00e9gal) CompareNames Compare deux noms d'entit\u00e9s (ignorant la casse). result = Strings.CompareNames(\"UserEntity\", \"userentity\") # Retourne 0 (\u00e9gal) AreNamesEqual V\u00e9rifie si deux noms d'entit\u00e9s sont \u00e9gaux (ignorant la casse). result = Strings.AreNamesEqual(\"UserEntity\", \"userentity\") # Retourne True StartsWithNoCase V\u00e9rifie si une cha\u00eene commence par une sous-cha\u00eene sp\u00e9cifi\u00e9e, sans tenir compte de la casse. result = \"Hello World\".StartsWithNoCase(\"hello\") # Retourne True Contains (with comparison) V\u00e9rifie si une cha\u00eene contient une sous-cha\u00eene avec un mode de comparaison sp\u00e9cifi\u00e9. result = \"Hello World\".Contains(\"world\", StringComparison.OrdinalIgnoreCase) # Retourne True Fractionnement et jointure ScanLines Retourne chaque ligne d'un texte sous forme d'\u00e9num\u00e9ration. lines = \"Hello\\nWorld\".ScanLines() # Retourne [\"Hello\", \"World\"] ScanWords Analyse une cha\u00eene et retourne les mots sous forme d'\u00e9num\u00e9ration. words = Strings.ScanWords(\"Hello, World!\") # Retourne des mots [\"Hello\", \"World\"] Split Divise une cha\u00eene en parties selon des options sp\u00e9cifi\u00e9es. parts = \"Hello,World\".Split(SplitStringOptions()) # Retourne [\"Hello\", \"World\"] SplitIgnoringLiterals Divise une cha\u00eene mais ignore les d\u00e9limiteurs qui sont dans des cha\u00eenes litt\u00e9rales. parts = 'Hello,\"World,Test\",Bye'.SplitIgnoringLiterals(',') # Retourne [\"Hello\", \"\\\"World,Test\\\"\", \"Bye\"] SplitOnSize Divise une cha\u00eene en parties de taille \u00e9gale. parts = \"HelloWorld\".SplitOnSize(5) # Retourne [\"Hello\", \"World\"] JoinWith / ToString Joint une collection de cha\u00eenes avec un d\u00e9limiteur. joined = [\"Hello\", \"World\"].JoinWith(\", \") # Retourne \"Hello, World\" FromString Divise une cha\u00eene en parties selon des d\u00e9limiteurs et nettoie chaque partie. parts = Strings.FromString(\"Hello, World\", ',') # Retourne [\"Hello\", \" World\"] ModifyLines Modifie chaque ligne d'un texte \u00e0 l'aide d'une fonction. text = Strings.ModifyLines(\"Hello\\nWorld\", lambda line: line.ToUpper()) # Retourne \"HELLO\\nWORLD\" Extract Extrait une sous-cha\u00eene selon un indice de d\u00e9but et une longueur. sub = \"HelloWorld\".Extract(2, 5) # Retourne \"elloW\" GetPart Extrait une partie sp\u00e9cifique d'une cha\u00eene d\u00e9limit\u00e9e. part = \"one.two.three\".GetPart('.', 2) # Retourne \"two\" GetRightPart Extrait la partie droite d'une cha\u00eene d\u00e9limit\u00e9e \u00e0 partir d'une position. part = \"one.two.three\".GetRightPart('.', 1) # Retourne \"two.three\" Conversion et parsing SafeParse (bool, double, int) Tente de convertir une cha\u00eene en valeur typ\u00e9e, retourne une valeur par d\u00e9faut en cas d'\u00e9chec. value = Strings.SafeParse(\"123\", 0) # Retourne 123 (int) value = Strings.SafeParse(\"12.34\", 0.0) # Retourne 12.34 (double) value = Strings.SafeParse(\"true\", False) # Retourne True (bool) ParseValue Convertit une cha\u00eene en valeur typ\u00e9e (bool, int, double ou string). value = Strings.ParseValue(\"123\") # Retourne 123 (int) value = Strings.ParseValue(\"12.34\") # Retourne 12.34 (double) value = Strings.ParseValue(\"true\") # Retourne True (bool) value = Strings.ParseValue(\"hello\") # Retourne \"hello\" (string) ParseValues Divise une cha\u00eene sur un d\u00e9limiteur et convertit chaque partie en valeur typ\u00e9e. values = Strings.ParseValues(\"123;12.34;true;hello\") # Retourne [123, 12.34, True, \"hello\"] ParseIntVector Convertit une cha\u00eene en tableau d'entiers. values = Strings.ParseIntVector(\"1,2,3,4\") # Retourne [1, 2, 3, 4] ParseDoubleVector Convertit une cha\u00eene en tableau de nombres \u00e0 virgule flottante. values = Strings.ParseDoubleVector(\"1.1;2.2;3.3\") # Retourne [1.1, 2.2, 3.3] ParseStringVector Convertit une cha\u00eene en tableau de cha\u00eenes. values = Strings.ParseStringVector(\"one,two,three\") # Retourne [\"one\", \"two\", \"three\"] ReadInteger Lit un entier depuis le d\u00e9but d'une cha\u00eene. value = Strings.ReadInteger(\"123abc\", 0) # Retourne 123 ToEnum Convertit une cha\u00eene en valeur d'\u00e9num\u00e9ration. value = \"Monday\".ToEnum(DayOfWeek) # Retourne DayOfWeek.Monday TryToEnum Tente de convertir une cha\u00eene en valeur d'\u00e9num\u00e9ration, retourne une valeur par d\u00e9faut en cas d'\u00e9chec. value = \"Monday\".TryToEnum(DayOfWeek.Sunday) # Retourne DayOfWeek.Monday value = \"Invalid\".TryToEnum(DayOfWeek.Sunday) # Retourne DayOfWeek.Sunday ToObject Convertit une cha\u00eene en objet typ\u00e9. obj = Strings.ToObject(\"123\") # Retourne 123 (int) obj = Strings.ToObject(\"12.34\") # Retourne 12.34 (double) obj = Strings.ToObject(\"true\") # Retourne True (bool) ToChar Convertit une cha\u00eene en caract\u00e8re (prend le premier caract\u00e8re). char = \"abc\".ToChar() # Retourne 'a' IsNumber V\u00e9rifie si une cha\u00eene repr\u00e9sente un nombre. result = Strings.IsNumber(\"123\") # Retourne True result = Strings.IsNumber(\"12.34\") # Retourne True result = Strings.IsNumber(\"abc\") # Retourne False IsInteger V\u00e9rifie si une cha\u00eene repr\u00e9sente un entier. result = Strings.IsInteger(\"123\") # Retourne True result = Strings.IsInteger(\"12.34\") # Retourne False IsBoolean V\u00e9rifie si une cha\u00eene repr\u00e9sente une valeur bool\u00e9enne. result = Strings.IsBoolean(\"true\") # Retourne True result = Strings.IsBoolean(\"false\") # Retourne True result = Strings.IsBoolean(\"123\") # Retourne False IsExpressionTrue / IsExpressionFalse V\u00e9rifie si une cha\u00eene repr\u00e9sente une expression \"vraie\" ou \"fausse\" (inclut \"yes\", \"no\", \"vrai\", \"faux\", etc.). result = \"yes\".IsExpressionTrue() # Retourne True result = \"no\".IsExpressionFalse() # Retourne True IsIntegerVector V\u00e9rifie si une cha\u00eene repr\u00e9sente un vecteur d'entiers. result = \"1,2,3\".IsIntegerVector() # Retourne True IsNumericRange V\u00e9rifie si une cha\u00eene repr\u00e9sente une plage num\u00e9rique (ex: \"1..10\"). result = \"1..10\".IsNumericRange() # Retourne True TryParseNumericRange Tente de convertir une cha\u00eene en plage num\u00e9rique. success = \"1..10\".TryParseNumericRange(out from, out to, out step) # Success = True, from = 1, to = 10, step = 1 IsNumericExpression V\u00e9rifie si une cha\u00eene repr\u00e9sente une expression num\u00e9rique (vecteur ou plage). result = \"1,2,3\".IsNumericExpression() # Retourne True result = \"1..10\".IsNumericExpression() # Retourne True ResolveNumericExpression R\u00e9sout une expression num\u00e9rique en s\u00e9quence d'entiers. values = \"1..5\".ResolveNumericExpression() # Retourne [1, 2, 3, 4, 5] values = \"1,3,5\".ResolveNumericExpression() # Retourne [1, 3, 5] TryEvaluateNumericExpression Tente d'\u00e9valuer une expression num\u00e9rique. success = \"1..5\".TryEvaluateNumericExpression(out values) # Success = True, values = [1, 2, 3, 4, 5] Nommage et identification IsKeyword V\u00e9rifie si une cha\u00eene est un mot-cl\u00e9 valide (commence par une lettre ou un underscore, suivi de lettres, chiffres ou underscores). result = \"myVar_123\".IsKeyword() # Retourne True result = \"123var\".IsKeyword() # Retourne False IsKeywordPath V\u00e9rifie si une cha\u00eene est un chemin de mots-cl\u00e9s valide (mots-cl\u00e9s s\u00e9par\u00e9s par des points). result = \"module.class.method\".IsKeywordPath() # Retourne True IsMetaKeyword V\u00e9rifie si une cha\u00eene est un m\u00e9ta-mot-cl\u00e9 (commence par $). result = \"$variable\".IsMetaKeyword() # Retourne True IsName V\u00e9rifie si une cha\u00eene est un nom valide (alias de IsKeyword). result = Strings.IsName(\"myVariable\") # Retourne True IsSymbolName V\u00e9rifie si une cha\u00eene est un nom de symbole valide (alias de IsKeyword). result = \"mySymbol\".IsSymbolName() # Retourne True ArrangeName / Nameize Arrange une cha\u00eene pour en faire un nom valide. name = \"My Variable 123\".Nameize() # Retourne \"MyVariable123\" name = \"123Invalid\".ArrangeName(\"_\") # Retourne \"_123Invalid\" EnsureUniqueName S'assure qu'un nom est unique dans une collection, en ajoutant un suffixe num\u00e9rique si n\u00e9cessaire. name = Strings.EnsureUniqueName(\"File\", [\"File\", \"File_1\"]) # Retourne \"File_2\" EnsureUniqueNames S'assure que tous les noms d'une liste sont uniques entre eux. names = Strings.EnsureUniqueNames([\"File\", \"File\", \"Report\"]) # Retourne [\"File\", \"File_1\", \"Report\"] EnsureUniqueFileName S'assure qu'un nom de fichier est unique sur le disque, en ajoutant un suffixe num\u00e9rique si n\u00e9cessaire. fileName = Strings.EnsureUniqueFileName(\"C:\\\\data\\\\report.txt\") # Retourne \"C:\\\\data\\\\report_1.txt\" si le fichier existe d\u00e9j\u00e0 NewUniqueName G\u00e9n\u00e8re un nouveau nom unique bas\u00e9 sur un mod\u00e8le, en ajoutant un suffixe num\u00e9rique. name = Strings.NewUniqueName(\"Item\", [\"Item\", \"Item_1\"]) # Retourne \"Item_2\" NewUniqueId G\u00e9n\u00e8re un nouvel identifiant unique bas\u00e9 sur un GUID. id = Strings.NewUniqueId() # Retourne une cha\u00eene unique comme \"8f9d5f7b3a2e1c\" FindRootName Extrait la racine d'un nom (la partie avant le dernier d\u00e9limiteur). root = \"user_settings_profile\".FindRootName() # Retourne \"user_settings\" IsCodeExpression V\u00e9rifie si une cha\u00eene est une expression de code (commence par $). result = \"$123\".IsCodeExpression() # Retourne True GetCodeExpressionValue Extrait la valeur num\u00e9rique d'une expression de code. value = \"$123\".GetCodeExpressionValue() # Retourne 123 FormatCodeExpression Formate une valeur en expression de code. expr = Strings.FormatCodeExpression(123) # Retourne \"$123\" IsEntityExpression V\u00e9rifie si une cha\u00eene est une expression d'entit\u00e9 (commence par @). result = \"@Entity\".IsEntityExpression() # Retourne True GetEntityExpressionValue Extrait le nom d'une expression d'entit\u00e9. name = \"@Entity\".GetEntityExpressionValue() # Retourne \"Entity\" FormatEntityExpression Formate un nom en expression d'entit\u00e9. expr = Strings.FormatEntityExpression(\"Entity\") # Retourne \"@Entity\" Support d'encodages et internationalisation DetectEncoding D\u00e9tecte l'encodage d'une cha\u00eene. encoding = Strings.DetectEncoding(textContent) # Retourne l'encodage d\u00e9tect\u00e9 FixEncoding R\u00e9pare l'encodage d'une cha\u00eene en cas de probl\u00e8me. fixed = problematicText.FixEncoding() # Tente de corriger les probl\u00e8mes d'encodage Recode Change l'encodage d'une cha\u00eene. recoded = text.Recode(Encoding.ASCII, Encoding.UTF8) # Convertit de ASCII \u00e0 UTF8 ToUtf8 Convertit une cha\u00eene en UTF-8. utf8Text = nonUtf8Text.ToUtf8() # Convertit en UTF-8 ToDefaultEncoding Convertit une cha\u00eene vers l'encodage par d\u00e9faut. defaultText = utf8Text.ToDefaultEncoding(Encoding.UTF8) # Convertit de UTF-8 \u00e0 l'encodage par d\u00e9faut IsUpper / IsLower V\u00e9rifie si une cha\u00eene est enti\u00e8rement en majuscules ou en minuscules (ignore les caract\u00e8res non-alphab\u00e9tiques). result = \"HELLO123\".IsUpper() # Retourne True result = \"hello123\".IsLower() # Retourne True IsUnaccentedLetter V\u00e9rifie si un caract\u00e8re est une lettre non accentu\u00e9e. result = 'a'.IsUnaccentedLetter() # Retourne True result = '\u00e9'.IsUnaccentedLetter() # Retourne False IsUnaccentedLetterOrDigit V\u00e9rifie si un caract\u00e8re est une lettre non accentu\u00e9e ou un chiffre. result = 'a'.IsUnaccentedLetterOrDigit() # Retourne True result = '1'.IsUnaccentedLetterOrDigit() # Retourne True result = '\u00e9'.IsUnaccentedLetterOrDigit() # Retourne False Utilitaires pour fichiers et chemins AssumeIOCompatible Remplace les caract\u00e8res non compatibles avec les fichiers par des underscores. path = Strings.AssumeIOCompatible(\"file:name.txt\") # Retourne \"file_name.txt\" CompareFileNames Compare deux noms de fichiers en ignorant la casse et en normalisant les s\u00e9parateurs de chemin. result = Strings.CompareFileNames(\"c:\\\\folder\\\\file.txt\", \"C:/folder/file.txt\") # Retourne 0 (\u00e9gaux) ComparePaths Compare deux chemins (alias de CompareFileNames). result = Strings.ComparePaths(\"c:\\\\folder\\\\file\", \"C:/folder/file\") # Retourne 0 (\u00e9gaux) NormalizePath Normalise un chemin en rempla\u00e7ant les s\u00e9parateurs de chemin par le s\u00e9parateur du syst\u00e8me. path = Strings.NormalizePath(\"C:/folder/file\") # Retourne \"C:\\\\folder\\\\file\" sur Windows MakeValidFileName Transforme une cha\u00eene en nom de fichier valide en rempla\u00e7ant les caract\u00e8res invalides. fileName = \"file*name?.txt\".MakeValidFileName() # Retourne \"file_name_.txt\" MakePath Cr\u00e9e un chemin \u00e0 partir d'une collection de segments. path = Strings.MakePath([\"folder\", \"subfolder\", \"file.txt\"]) # Retourne \"folder/subfolder/file.txt\" IsAbsolutePath V\u00e9rifie si un chemin est absolu. result = Strings.IsAbsolutePath(\"C:\\\\folder\\\\file.txt\") # Retourne True result = Strings.IsAbsolutePath(\"folder/file.txt\") # Retourne False IsRelativePath V\u00e9rifie si un chemin est relatif. result = Strings.IsRelativePath(\"folder/file.txt\") # Retourne True result = Strings.IsRelativePath(\"C:\\\\folder\\\\file.txt\") # Retourne False FormatFileSize Formate une taille de fichier en cha\u00eene lisible (KB, MB, etc.). size = Strings.FormatFileSize(1024 * 1024) # Retourne \"1.0 MB\" CleanUrl Nettoie une URL en supprimant le slash final. url = Strings.CleanUrl(\"http://example.com/\") # Retourne \"http://example.com\" IsUrl V\u00e9rifie si une cha\u00eene est une URL. result = Strings.IsUrl(\"http://example.com\") # Retourne True Expressions et patterns HasWildcard V\u00e9rifie si une cha\u00eene contient des caract\u00e8res joker (* ou ?). result = \"file*.txt\".HasWildcard() # Retourne True RemoveWildcards Supprime les caract\u00e8res joker d'une cha\u00eene. text = \"file*.txt\".RemoveWildcards() # Retourne \"file.txt\" IsWildcard V\u00e9rifie si un caract\u00e8re est un joker. result = '*'.IsWildcard() # Retourne True ContainsJoker V\u00e9rifie si une cha\u00eene contient des jokers (alias de HasWildcard). result = \"file*.txt\".ContainsJoker() # Retourne True IsTag V\u00e9rifie si une cha\u00eene contient des tags de format [TAG]. result = Strings.IsTag(\"This is a [TAG]\") # Retourne True IsTagExactly V\u00e9rifie si une cha\u00eene est exactement un tag de format [TAG]. result = \"[TAG]\".IsTagExactly() # Retourne True UntagString / UntagStringEx Remplace les tags dans une cha\u00eene par leurs valeurs correspondantes dans un dictionnaire. values = {\"NAME\": \"John\", \"AGE\": 30} text = Strings.UntagString(\"Hello [NAME], you are [AGE] years old\", values) # Retourne \"Hello John, you are 30 years old\" UntagText Remplace les tags dans un objet Text par leurs valeurs correspondantes. values = {\"NAME\": \"John\", \"AGE\": 30} result = Strings.UntagText(textObject, values) # Remplace les tags dans l'objet Text UntagObject Remplace les tags dans un objet (cha\u00eene ou Text) par leurs valeurs correspondantes. values = {\"NAME\": \"John\", \"AGE\": 30} result = Strings.UntagObject(\"[NAME] is [AGE]\", values) # Retourne \"John is 30\" ExtractAnnotations Extrait les annotations (tags) d'une cha\u00eene. annotations = Strings.ExtractAnnotations(\"This is [TAG:format] a test\") # Retourne un dictionnaire avec {\"TAG\": \"format\"} HasAnnotation V\u00e9rifie si une cha\u00eene contient des annotations. result = Strings.HasAnnotation(\"This is [TAG] a test\") # Retourne True ParseAnnotation Analyse une annotation dans une cha\u00eene. success = Strings.ParseAnnotation(\"[TYPE]Value\", out name, out value) # Success = True, name = \"TYPE\", value = \"Value\" SmartFormat Formate une cha\u00eene avec des valeurs de substitution avanc\u00e9es. values = {\"name\": \"John\", \"count\": 3} text = \"Hello {name}, you have {count} messages\".SmartFormat(values) # Retourne \"Hello John, you have 3 messages\" LooksLikeSelectionPattern V\u00e9rifie si une cha\u00eene ressemble \u00e0 un pattern de s\u00e9lection. result = \"[Property] = 'Value'\".LooksLikeSelectionPattern() # Retourne True ParseXmlAttributes Parse des attributs XML dans une cha\u00eene. attributes = Strings.ParseXmlAttributes(\"set Name=\\\"Value\\\" Title=\\\"Example\\\"\") # Retourne un dictionnaire avec {\"Name\": \"Value\", \"Title\": \"Example\"} FormatAsXmlAttributesString Formate un dictionnaire en cha\u00eene d'attributs XML. attributes = {\"Name\": \"Value\", \"Title\": \"Example\"} xml = attributes.FormatAsXmlAttributesString(\"set\") # Retourne \"set Name=\\\"Value\\\" Title=\\\"Example\\\"\" ReGet Extrait des parties d'une cha\u00eene \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. regex = new Regex(@\"(\\d+)-(\\d+)\") text = \"ID: 123-456\" result = text.ReGet(regex, \"-\") # Retourne \"123-456\" FindMatchingParenthese / FindMatchingClosingChar Trouve la parenth\u00e8se/accolade/crochet fermant correspondant \u00e0 un ouvrant. index = \"function() { return true; }\".FindMatchingParenthese(8) # Retourne 10 IsTerminalExpression V\u00e9rifie si une expression est terminale (identificateur simple ou expression d\u00e9j\u00e0 entre parenth\u00e8ses). result = \"variable\".IsTerminalExpression() # Retourne True result = \"(x + y)\".IsTerminalExpression() # Retourne True result = \"x + y\".IsTerminalExpression() # Retourne False Utilitaires sp\u00e9cifiques LooksLikeEmail V\u00e9rifie si une cha\u00eene ressemble \u00e0 une adresse email. result = \"user@example.com\".LooksLikeEmail() # Retourne True LooksLikeJson V\u00e9rifie si une cha\u00eene ressemble \u00e0 du JSON. result = '{\"name\": \"John\"}'.LooksLikeJson() # Retourne True LooksLikeXml V\u00e9rifie si une cha\u00eene ressemble \u00e0 du XML. result = \"<user>John</user>\".LooksLikeXml() # Retourne True ZipString / UnzipString Compresse et d\u00e9compresse une cha\u00eene. compressed = Strings.ZipString(\"texte tr\u00e8s long \u00e0 compresser\") decompressed = Strings.UnzipString(compressed) # Retourne \"texte tr\u00e8s long \u00e0 compresser\" HashString Hache une cha\u00eene pour cr\u00e9er une version plus courte. hashed = Strings.HashString(\"texte \u00e0 hacher\", 8) # Retourne une cha\u00eene de 8 caract\u00e8res BytesToHexa / HexaToBytes Convertit entre des octets et leur repr\u00e9sentation hexad\u00e9cimale. hexa = Strings.BytesToHexa(byteArray) # Convertit des octets en cha\u00eene hexad\u00e9cimale bytes = Strings.HexaToBytes(\"0A1B2C\") # Convertit une cha\u00eene hexad\u00e9cimale en octets Shuffle M\u00e9lange une cha\u00eene de mani\u00e8re cryptographique. shuffled = Strings.Shuffle(\"Hello World\", 1) # Retourne une version m\u00e9lang\u00e9e Quote / Unquote Ajoute ou supprime des guillemets autour d'une cha\u00eene. quoted = \"Hello\".Quote() # Retourne \"\\\"Hello\\\"\" unquoted = \"\\\"Hello\\\"\".Unquote() # Retourne \"Hello\" AutoQuote Ajoute des guillemets autour d'une cha\u00eene si elle n'en a pas d\u00e9j\u00e0. quoted = \"Hello\".AutoQuote() # Retourne \"\\\"Hello\\\"\" quoted = \"\\\"Hello\\\"\".AutoQuote() # Retourne \"\\\"Hello\\\"\" (inchang\u00e9) SlashString / UnslashString \u00c9chappe ou d\u00e9s\u00e9chappe les caract\u00e8res sp\u00e9ciaux dans une cha\u00eene. slashed = \"Hello\\nWorld\".SlashString() # Retourne \"Hello\\\\nWorld\" unslashed = \"Hello\\\\nWorld\".UnslashString() # Retourne \"Hello\\nWorld\" AutoFormatValue Formate automatiquement une valeur num\u00e9rique. formatted = Strings.AutoFormatValue(123.456) # Retourne \"123.46\" GetAutoFormat D\u00e9termine le format automatique pour une valeur num\u00e9rique. format = Strings.GetAutoFormat(123.456) # Retourne un format comme \"0.00\" GetTimeStamp G\u00e9n\u00e8re un horodatage au format cha\u00eene. timestamp = Strings.GetTimeStamp(True) # Retourne \"20250406123456\" GetPrettyTimeStamp G\u00e9n\u00e8re un horodatage lisible par les humains. timestamp = Strings.GetPrettyTimeStamp() # Retourne \"2025-04-06_12h34\" Inject Injecte des valeurs dans une cha\u00eene \u00e0 partir d'un objet ou dictionnaire. template = \"Hello {name}, you are {age} years old\" data = {\"name\": \"John\", \"age\": 30} result = template.Inject(data) # Retourne \"Hello John, you are 30 years old\" GenerateRandomString G\u00e9n\u00e8re une cha\u00eene al\u00e9atoire. random = Strings.GenerateRandomString(\"abcdefghijklmnopqrstuvwxyz\", 5, 10) # Retourne une cha\u00eene al\u00e9atoire entre 5 et 10 caract\u00e8res ToExcelAddress Convertit des coordonn\u00e9es de cellule en adresse Excel. address = Strings.ToExcelAddress(0, 0) # Retourne \"R1C1\" IsExcelAddress V\u00e9rifie si une cha\u00eene est une adresse Excel valide. result = Strings.IsExcelAddress(\"A1:B10\") # Retourne True FormatExcelText Formate un texte pour qu'il soit correctement affich\u00e9 dans Excel. text = \"=SUM(A1:A10)\".FormatExcelText() # Pr\u00e9fixe avec ' pour \u00e9viter l'interpr\u00e9tation comme formule","title":"Documentation Utilitaires de cha\u00eenes de caract\u00e8res"},{"location":"Strings/#documentation-utilitaires-de-chaines-de-caracteres","text":"","title":"Documentation Utilitaires de cha\u00eenes de caract\u00e8res"},{"location":"Strings/#introduction-aux-chaines-de-caracteres-en-net","text":"Les cha\u00eenes de caract\u00e8res (strings) en .NET sont des objets immuables, ce qui signifie qu'une fois cr\u00e9\u00e9s, ils ne peuvent pas \u00eatre modifi\u00e9s. Toute op\u00e9ration qui semble modifier une cha\u00eene cr\u00e9e en r\u00e9alit\u00e9 une nouvelle instance. Les m\u00e9thodes de la biblioth\u00e8que standard de .NET sont compl\u00e9t\u00e9es par de nombreuses m\u00e9thodes d'extension de la biblioth\u00e8que ADN. En voici la liste.","title":"Introduction aux cha\u00eenes de caract\u00e8res en .NET"},{"location":"Strings/#sommaire","text":"Manipulation basique des cha\u00eenes LengthOf Repeat IsSingleLine SingleLine Truncate CountStartCharacters CountEndCharacters CountCharacters FixedLength RemoveEmptyStrings HasMultiLines IsMultiLine Transformation et formatage de texte RemoveAccents RemoveAllButLettersAndDigits RemoveAllButDigits ExtractIf RemoveIf Capitalize Uncapitalize Pascalize Camelize Underscore Dasherize Minimize Titleize Humanize Ordinalize Initials StripHtml / HtmlToString StringToHtml Clean SafeTrim Align Recherche et comparaison ContainsIgnoreCase ContainsOneOf / ContainsAny WildcardMatch FuzzyCompare AlphaNumCompare AlphaNumSort FindCommonPart FindCommonPartOffset FindCommonRoot CompareStrings CompareNames AreNamesEqual StartsWithNoCase Contains (with comparison) Fractionnement et jointure ScanLines ScanWords Split SplitIgnoringLiterals SplitOnSize JoinWith / ToString FromString ModifyLines Extract GetPart GetRightPart Conversion et parsing SafeParse (bool, double, int) ParseValue ParseValues ParseIntVector ParseDoubleVector ParseStringVector ReadInteger ToEnum TryToEnum ToObject ToChar IsNumber IsInteger IsBoolean IsExpressionTrue / IsExpressionFalse IsIntegerVector IsNumericRange TryParseNumericRange IsNumericExpression ResolveNumericExpression TryEvaluateNumericExpression Nommage et identification IsKeyword IsKeywordPath IsMetaKeyword IsName IsSymbolName ArrangeName / Nameize EnsureUniqueName EnsureUniqueNames EnsureUniqueFileName NewUniqueName NewUniqueId FindRootName IsCodeExpression GetCodeExpressionValue FormatCodeExpression IsEntityExpression GetEntityExpressionValue FormatEntityExpression Support d'encodages et internationalisation DetectEncoding FixEncoding Recode ToUtf8 ToDefaultEncoding IsUpper / IsLower IsUnaccentedLetter IsUnaccentedLetterOrDigit Utilitaires pour fichiers et chemins AssumeIOCompatible CompareFileNames ComparePaths NormalizePath MakeValidFileName MakePath IsAbsolutePath IsRelativePath FormatFileSize CleanUrl IsUrl Expressions et patterns HasWildcard RemoveWildcards IsWildcard ContainsJoker IsTag IsTagExactly UntagString / UntagStringEx UntagText UntagObject ExtractAnnotations HasAnnotation ParseAnnotation SmartFormat LooksLikeSelectionPattern ParseXmlAttributes FormatAsXmlAttributesString ReGet FindMatchingParenthese / FindMatchingClosingChar IsTerminalExpression Utilitaires sp\u00e9cifiques LooksLikeEmail LooksLikeJson LooksLikeXml ZipString / UnzipString HashString BytesToHexa / HexaToBytes Shuffle Quote / Unquote AutoQuote SlashString / UnslashString AutoFormatValue GetAutoFormat GetTimeStamp GetPrettyTimeStamp Inject GenerateRandomString ToExcelAddress IsExcelAddress FormatExcelText","title":"Sommaire"},{"location":"Strings/#manipulation-basique-des-chaines","text":"","title":"Manipulation basique des cha\u00eenes"},{"location":"Strings/#lengthof","text":"Retourne la longueur d'une cha\u00eene, ou 0 si la cha\u00eene est null. length = Strings.LengthOf(\"hello\") # Retourne 5 length = Strings.LengthOf(None) # Retourne 0","title":"LengthOf"},{"location":"Strings/#repeat","text":"R\u00e9p\u00e8te une cha\u00eene un nombre sp\u00e9cifi\u00e9 de fois. repeated = \"abc\".Repeat(3) # Retourne \"abcabcabc\"","title":"Repeat"},{"location":"Strings/#issingleline","text":"V\u00e9rifie si une cha\u00eene ne contient pas de retours \u00e0 la ligne. result = \"hello world\".IsSingleLine() # Retourne True result = \"hello\\nworld\".IsSingleLine() # Retourne False","title":"IsSingleLine"},{"location":"Strings/#singleline","text":"Convertit une cha\u00eene multi-lignes en une seule ligne en rempla\u00e7ant les retours \u00e0 la ligne par des espaces. text = \"hello\\nworld\".SingleLine() # Retourne \"hello world\"","title":"SingleLine"},{"location":"Strings/#truncate","text":"Tronque une cha\u00eene \u00e0 une longueur maximale, avec diff\u00e9rentes options. text = \"Hello world, how are you today?\".Truncate(10) # Retourne \"Hello worl\u2026\" # Avec l'option FinishWord pour compl\u00e9ter le dernier mot text = \"Hello world, how are you today?\".Truncate(10, TruncateOptions.FinishWord) # Retourne \"Hello\u2026\"","title":"Truncate"},{"location":"Strings/#countstartcharacters","text":"Compte le nombre de caract\u00e8res sp\u00e9cifi\u00e9s au d\u00e9but d'une cha\u00eene. count = \"!!Hello\".CountStartCharacters(\"!\", \"!\") # Retourne 2","title":"CountStartCharacters"},{"location":"Strings/#countendcharacters","text":"Compte le nombre de caract\u00e8res sp\u00e9cifi\u00e9s \u00e0 la fin d'une cha\u00eene. count = \"Hello!!\".CountEndCharacters(\"!\", \"!\") # Retourne 2","title":"CountEndCharacters"},{"location":"Strings/#countcharacters","text":"Compte le nombre d'occurrences des caract\u00e8res sp\u00e9cifi\u00e9s dans une cha\u00eene. count = Strings.CountCharacters(\"Hello World\", \"l\", \"o\") # Retourne 4","title":"CountCharacters"},{"location":"Strings/#fixedlength","text":"Aligne une cha\u00eene \u00e0 droite ou \u00e0 gauche pour atteindre une longueur sp\u00e9cifi\u00e9e. text = Strings.FixedLength(\"abc\", 5) # Retourne \" abc\" text = Strings.FixedLength(\"abc\", 5, \"0\") # Retourne \"00abc\" text = Strings.FixedLength(\"abc\", 5, \" \", False) # Retourne \"abc \"","title":"FixedLength"},{"location":"Strings/#removeemptystrings","text":"Supprime les cha\u00eenes vides d'une liste. strings = [\"a\", \"\", \"b\", \"\", \"c\"] Strings.RemoveEmptyStrings(strings) # Modifie la liste : [\"a\", \"b\", \"c\"]","title":"RemoveEmptyStrings"},{"location":"Strings/#hasmultilines","text":"V\u00e9rifie si une cha\u00eene contient plusieurs lignes. result = \"hello\\nworld\".HasMultiLines() # Retourne True","title":"HasMultiLines"},{"location":"Strings/#ismultiline","text":"V\u00e9rifie si une cha\u00eene contient plusieurs lignes (alias de HasMultiLines). result = \"hello\\nworld\".IsMultiLine() # Retourne True","title":"IsMultiLine"},{"location":"Strings/#transformation-et-formatage-de-texte","text":"","title":"Transformation et formatage de texte"},{"location":"Strings/#removeaccents","text":"Supprime les accents d'une cha\u00eene. text = \"\u00e9\u00e0\u00e7\u00e8\u00f1\".RemoveAccents() # Retourne \"eacen\"","title":"RemoveAccents"},{"location":"Strings/#removeallbutlettersanddigits","text":"Supprime tous les caract\u00e8res qui ne sont ni des lettres ni des chiffres. text = \"Hello, World! 123\".RemoveAllButLettersAndDigits() # Retourne \"HelloWorld123\"","title":"RemoveAllButLettersAndDigits"},{"location":"Strings/#removeallbutdigits","text":"Supprime tous les caract\u00e8res qui ne sont pas des chiffres. text = \"Hello, World! 123\".RemoveAllButDigits() # Retourne \"123\"","title":"RemoveAllButDigits"},{"location":"Strings/#extractif","text":"Extrait les caract\u00e8res qui satisfont une condition. # Extrait seulement les voyelles text = \"Hello World\".ExtractIf(lambda c: c in \"aeiouAEIOU\") # Retourne \"eoo\"","title":"ExtractIf"},{"location":"Strings/#removeif","text":"Supprime les caract\u00e8res qui satisfont une condition. # Supprime les voyelles text = \"Hello World\".RemoveIf(lambda c: c in \"aeiouAEIOU\") # Retourne \"Hll Wrld\"","title":"RemoveIf"},{"location":"Strings/#capitalize","text":"Met en majuscule la premi\u00e8re lettre d'une cha\u00eene. text = \"hello world\".Capitalize() # Retourne \"Hello world\"","title":"Capitalize"},{"location":"Strings/#uncapitalize","text":"Met en minuscule la premi\u00e8re lettre d'une cha\u00eene. text = \"Hello world\".Uncapitalize() # Retourne \"hello world\"","title":"Uncapitalize"},{"location":"Strings/#pascalize","text":"Convertit une cha\u00eene en PascalCase. text = \"hello_world\".Pascalize() # Retourne \"HelloWorld\"","title":"Pascalize"},{"location":"Strings/#camelize","text":"Convertit une cha\u00eene en camelCase. text = \"hello_world\".Camelize() # Retourne \"helloWorld\"","title":"Camelize"},{"location":"Strings/#underscore","text":"Convertit une cha\u00eene en snake_case. text = \"HelloWorld\".Underscore() # Retourne \"hello_world\"","title":"Underscore"},{"location":"Strings/#dasherize","text":"Convertit une cha\u00eene en kebab-case. text = \"HelloWorld\".Dasherize() # Retourne \"hello-world\"","title":"Dasherize"},{"location":"Strings/#minimize","text":"Minimise une cha\u00eene en supprimant les accents et en ne conservant que les lettres et chiffres, convertis en majuscules. text = \"Hello, World! 123\".Minimize() # Retourne \"HELLOWORLD123\"","title":"Minimize"},{"location":"Strings/#titleize","text":"Convertit une cha\u00eene en format titre (majuscule pour chaque mot). text = \"hello_world\".Titleize() # Retourne \"Hello World\"","title":"Titleize"},{"location":"Strings/#humanize","text":"Rend une cha\u00eene plus lisible pour les humains. text = \"hello_world\".Humanize() # Retourne \"Hello world\"","title":"Humanize"},{"location":"Strings/#ordinalize","text":"Convertit un nombre en forme ordinale. text = \"1\".Ordinalize() # Retourne \"1st\" text = \"2\".Ordinalize() # Retourne \"2nd\"","title":"Ordinalize"},{"location":"Strings/#initials","text":"Extrait les initiales d'une cha\u00eene. initials = Strings.Initials(\"Hello World\") # Retourne \"HW\"","title":"Initials"},{"location":"Strings/#striphtml-htmltostring","text":"Supprime les balises HTML d'une cha\u00eene. text = \"<p>Hello <b>World</b></p>\".StripHtml() # Retourne \"Hello World\"","title":"StripHtml / HtmlToString"},{"location":"Strings/#stringtohtml","text":"Convertit une cha\u00eene en format HTML (remplace les retours \u00e0 la ligne par des ). html = \"Hello\\nWorld\".StringToHtml() # Retourne \"Hello<br/>World\"","title":"StringToHtml"},{"location":"Strings/#clean","text":"Nettoie une cha\u00eene en supprimant le HTML, les retours \u00e0 la ligne, etc. text = \"<p>Hello\\nWorld</p>\".Clean() # Retourne \"Hello World\"","title":"Clean"},{"location":"Strings/#safetrim","text":"Supprime les espaces blancs d'une cha\u00eene, retourne une cha\u00eene vide si l'entr\u00e9e est null. text = \" Hello \".SafeTrim() # Retourne \"Hello\" text = None.SafeTrim() # Retourne \"\"","title":"SafeTrim"},{"location":"Strings/#align","text":"Aligne une cha\u00eene selon une largeur et un alignement sp\u00e9cifi\u00e9s. text = \"Hello\".Align(10, HorizontalAlignment.Left) # Retourne \"Hello \" text = \"Hello\".Align(10, HorizontalAlignment.Right) # Retourne \" Hello\"","title":"Align"},{"location":"Strings/#recherche-et-comparaison","text":"","title":"Recherche et comparaison"},{"location":"Strings/#containsignorecase","text":"V\u00e9rifie si une cha\u00eene contient une sous-cha\u00eene, sans tenir compte de la casse. result = \"Hello World\".ContainsIgnoreCase(\"world\") # Retourne True","title":"ContainsIgnoreCase"},{"location":"Strings/#containsoneof-containsany","text":"V\u00e9rifie si une cha\u00eene contient au moins un des caract\u00e8res sp\u00e9cifi\u00e9s. result = \"Hello World\".ContainsAny('x', 'y', 'z', 'o') # Retourne True (contient 'o')","title":"ContainsOneOf / ContainsAny"},{"location":"Strings/#wildcardmatch","text":"V\u00e9rifie si une cha\u00eene correspond \u00e0 un pattern avec jokers (* et ?). result = Strings.WildcardMatch(\"te?t\", \"test\") # Retourne True result = Strings.WildcardMatch(\"te*\", \"test\") # Retourne True result = Strings.WildcardMatch(\"te?t\", \"text\") # Retourne False result = Strings.WildcardMatch(\"*est\", \"test\") # Retourne True","title":"WildcardMatch"},{"location":"Strings/#fuzzycompare","text":"Compare deux cha\u00eenes et retourne un pourcentage de similitude (0 \u00e0 100). similarity = Strings.FuzzyCompare(\"hello\", \"hallo\") # Retourne un score comme 80","title":"FuzzyCompare"},{"location":"Strings/#alphanumcompare","text":"Compare deux cha\u00eenes de fa\u00e7on alphanum\u00e9rique (trie \"A2\" avant \"A10\"). result = Strings.AlphaNumCompare(\"A2\", \"A10\") # Retourne une valeur n\u00e9gative","title":"AlphaNumCompare"},{"location":"Strings/#alphanumsort","text":"Trie une liste de cha\u00eenes de fa\u00e7on alphanum\u00e9rique. sorted = [\"A1\", \"A10\", \"A2\"].AlphaNumSort() # Retourne [\"A1\", \"A2\", \"A10\"]","title":"AlphaNumSort"},{"location":"Strings/#findcommonpart","text":"Trouve la partie commune au d\u00e9but de plusieurs cha\u00eenes. strings = [\"abcdef\", \"abcxyz\", \"abcghi\"] common = Strings.FindCommonPart(strings) # Retourne \"abc\"","title":"FindCommonPart"},{"location":"Strings/#findcommonpartoffset","text":"Trouve la position de fin de la partie commune \u00e0 plusieurs cha\u00eenes. strings = [\"abcdef\", \"abcxyz\"] offset = Strings.FindCommonPartOffset(strings) # Retourne 3","title":"FindCommonPartOffset"},{"location":"Strings/#findcommonroot","text":"Trouve la racine commune dans une liste de cha\u00eenes (utile pour les identifiants). strings = [\"user_profile\", \"user_settings\", \"user_account\"] root = Strings.FindCommonRoot(strings) # Retourne \"USER\"","title":"FindCommonRoot"},{"location":"Strings/#comparestrings","text":"Compare deux cha\u00eenes, avec option pour ignorer la casse. result = Strings.CompareStrings(\"abc\", \"ABC\", True) # Retourne 0 (\u00e9gal)","title":"CompareStrings"},{"location":"Strings/#comparenames","text":"Compare deux noms d'entit\u00e9s (ignorant la casse). result = Strings.CompareNames(\"UserEntity\", \"userentity\") # Retourne 0 (\u00e9gal)","title":"CompareNames"},{"location":"Strings/#arenamesequal","text":"V\u00e9rifie si deux noms d'entit\u00e9s sont \u00e9gaux (ignorant la casse). result = Strings.AreNamesEqual(\"UserEntity\", \"userentity\") # Retourne True","title":"AreNamesEqual"},{"location":"Strings/#startswithnocase","text":"V\u00e9rifie si une cha\u00eene commence par une sous-cha\u00eene sp\u00e9cifi\u00e9e, sans tenir compte de la casse. result = \"Hello World\".StartsWithNoCase(\"hello\") # Retourne True","title":"StartsWithNoCase"},{"location":"Strings/#contains-with-comparison","text":"V\u00e9rifie si une cha\u00eene contient une sous-cha\u00eene avec un mode de comparaison sp\u00e9cifi\u00e9. result = \"Hello World\".Contains(\"world\", StringComparison.OrdinalIgnoreCase) # Retourne True","title":"Contains (with comparison)"},{"location":"Strings/#fractionnement-et-jointure","text":"","title":"Fractionnement et jointure"},{"location":"Strings/#scanlines","text":"Retourne chaque ligne d'un texte sous forme d'\u00e9num\u00e9ration. lines = \"Hello\\nWorld\".ScanLines() # Retourne [\"Hello\", \"World\"]","title":"ScanLines"},{"location":"Strings/#scanwords","text":"Analyse une cha\u00eene et retourne les mots sous forme d'\u00e9num\u00e9ration. words = Strings.ScanWords(\"Hello, World!\") # Retourne des mots [\"Hello\", \"World\"]","title":"ScanWords"},{"location":"Strings/#split","text":"Divise une cha\u00eene en parties selon des options sp\u00e9cifi\u00e9es. parts = \"Hello,World\".Split(SplitStringOptions()) # Retourne [\"Hello\", \"World\"]","title":"Split"},{"location":"Strings/#splitignoringliterals","text":"Divise une cha\u00eene mais ignore les d\u00e9limiteurs qui sont dans des cha\u00eenes litt\u00e9rales. parts = 'Hello,\"World,Test\",Bye'.SplitIgnoringLiterals(',') # Retourne [\"Hello\", \"\\\"World,Test\\\"\", \"Bye\"]","title":"SplitIgnoringLiterals"},{"location":"Strings/#splitonsize","text":"Divise une cha\u00eene en parties de taille \u00e9gale. parts = \"HelloWorld\".SplitOnSize(5) # Retourne [\"Hello\", \"World\"]","title":"SplitOnSize"},{"location":"Strings/#joinwith-tostring","text":"Joint une collection de cha\u00eenes avec un d\u00e9limiteur. joined = [\"Hello\", \"World\"].JoinWith(\", \") # Retourne \"Hello, World\"","title":"JoinWith / ToString"},{"location":"Strings/#fromstring","text":"Divise une cha\u00eene en parties selon des d\u00e9limiteurs et nettoie chaque partie. parts = Strings.FromString(\"Hello, World\", ',') # Retourne [\"Hello\", \" World\"]","title":"FromString"},{"location":"Strings/#modifylines","text":"Modifie chaque ligne d'un texte \u00e0 l'aide d'une fonction. text = Strings.ModifyLines(\"Hello\\nWorld\", lambda line: line.ToUpper()) # Retourne \"HELLO\\nWORLD\"","title":"ModifyLines"},{"location":"Strings/#extract","text":"Extrait une sous-cha\u00eene selon un indice de d\u00e9but et une longueur. sub = \"HelloWorld\".Extract(2, 5) # Retourne \"elloW\"","title":"Extract"},{"location":"Strings/#getpart","text":"Extrait une partie sp\u00e9cifique d'une cha\u00eene d\u00e9limit\u00e9e. part = \"one.two.three\".GetPart('.', 2) # Retourne \"two\"","title":"GetPart"},{"location":"Strings/#getrightpart","text":"Extrait la partie droite d'une cha\u00eene d\u00e9limit\u00e9e \u00e0 partir d'une position. part = \"one.two.three\".GetRightPart('.', 1) # Retourne \"two.three\"","title":"GetRightPart"},{"location":"Strings/#conversion-et-parsing","text":"","title":"Conversion et parsing"},{"location":"Strings/#safeparse-bool-double-int","text":"Tente de convertir une cha\u00eene en valeur typ\u00e9e, retourne une valeur par d\u00e9faut en cas d'\u00e9chec. value = Strings.SafeParse(\"123\", 0) # Retourne 123 (int) value = Strings.SafeParse(\"12.34\", 0.0) # Retourne 12.34 (double) value = Strings.SafeParse(\"true\", False) # Retourne True (bool)","title":"SafeParse (bool, double, int)"},{"location":"Strings/#parsevalue","text":"Convertit une cha\u00eene en valeur typ\u00e9e (bool, int, double ou string). value = Strings.ParseValue(\"123\") # Retourne 123 (int) value = Strings.ParseValue(\"12.34\") # Retourne 12.34 (double) value = Strings.ParseValue(\"true\") # Retourne True (bool) value = Strings.ParseValue(\"hello\") # Retourne \"hello\" (string)","title":"ParseValue"},{"location":"Strings/#parsevalues","text":"Divise une cha\u00eene sur un d\u00e9limiteur et convertit chaque partie en valeur typ\u00e9e. values = Strings.ParseValues(\"123;12.34;true;hello\") # Retourne [123, 12.34, True, \"hello\"]","title":"ParseValues"},{"location":"Strings/#parseintvector","text":"Convertit une cha\u00eene en tableau d'entiers. values = Strings.ParseIntVector(\"1,2,3,4\") # Retourne [1, 2, 3, 4]","title":"ParseIntVector"},{"location":"Strings/#parsedoublevector","text":"Convertit une cha\u00eene en tableau de nombres \u00e0 virgule flottante. values = Strings.ParseDoubleVector(\"1.1;2.2;3.3\") # Retourne [1.1, 2.2, 3.3]","title":"ParseDoubleVector"},{"location":"Strings/#parsestringvector","text":"Convertit une cha\u00eene en tableau de cha\u00eenes. values = Strings.ParseStringVector(\"one,two,three\") # Retourne [\"one\", \"two\", \"three\"]","title":"ParseStringVector"},{"location":"Strings/#readinteger","text":"Lit un entier depuis le d\u00e9but d'une cha\u00eene. value = Strings.ReadInteger(\"123abc\", 0) # Retourne 123","title":"ReadInteger"},{"location":"Strings/#toenum","text":"Convertit une cha\u00eene en valeur d'\u00e9num\u00e9ration. value = \"Monday\".ToEnum(DayOfWeek) # Retourne DayOfWeek.Monday","title":"ToEnum"},{"location":"Strings/#trytoenum","text":"Tente de convertir une cha\u00eene en valeur d'\u00e9num\u00e9ration, retourne une valeur par d\u00e9faut en cas d'\u00e9chec. value = \"Monday\".TryToEnum(DayOfWeek.Sunday) # Retourne DayOfWeek.Monday value = \"Invalid\".TryToEnum(DayOfWeek.Sunday) # Retourne DayOfWeek.Sunday","title":"TryToEnum"},{"location":"Strings/#toobject","text":"Convertit une cha\u00eene en objet typ\u00e9. obj = Strings.ToObject(\"123\") # Retourne 123 (int) obj = Strings.ToObject(\"12.34\") # Retourne 12.34 (double) obj = Strings.ToObject(\"true\") # Retourne True (bool)","title":"ToObject"},{"location":"Strings/#tochar","text":"Convertit une cha\u00eene en caract\u00e8re (prend le premier caract\u00e8re). char = \"abc\".ToChar() # Retourne 'a'","title":"ToChar"},{"location":"Strings/#isnumber","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente un nombre. result = Strings.IsNumber(\"123\") # Retourne True result = Strings.IsNumber(\"12.34\") # Retourne True result = Strings.IsNumber(\"abc\") # Retourne False","title":"IsNumber"},{"location":"Strings/#isinteger","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente un entier. result = Strings.IsInteger(\"123\") # Retourne True result = Strings.IsInteger(\"12.34\") # Retourne False","title":"IsInteger"},{"location":"Strings/#isboolean","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente une valeur bool\u00e9enne. result = Strings.IsBoolean(\"true\") # Retourne True result = Strings.IsBoolean(\"false\") # Retourne True result = Strings.IsBoolean(\"123\") # Retourne False","title":"IsBoolean"},{"location":"Strings/#isexpressiontrue-isexpressionfalse","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente une expression \"vraie\" ou \"fausse\" (inclut \"yes\", \"no\", \"vrai\", \"faux\", etc.). result = \"yes\".IsExpressionTrue() # Retourne True result = \"no\".IsExpressionFalse() # Retourne True","title":"IsExpressionTrue / IsExpressionFalse"},{"location":"Strings/#isintegervector","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente un vecteur d'entiers. result = \"1,2,3\".IsIntegerVector() # Retourne True","title":"IsIntegerVector"},{"location":"Strings/#isnumericrange","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente une plage num\u00e9rique (ex: \"1..10\"). result = \"1..10\".IsNumericRange() # Retourne True","title":"IsNumericRange"},{"location":"Strings/#tryparsenumericrange","text":"Tente de convertir une cha\u00eene en plage num\u00e9rique. success = \"1..10\".TryParseNumericRange(out from, out to, out step) # Success = True, from = 1, to = 10, step = 1","title":"TryParseNumericRange"},{"location":"Strings/#isnumericexpression","text":"V\u00e9rifie si une cha\u00eene repr\u00e9sente une expression num\u00e9rique (vecteur ou plage). result = \"1,2,3\".IsNumericExpression() # Retourne True result = \"1..10\".IsNumericExpression() # Retourne True","title":"IsNumericExpression"},{"location":"Strings/#resolvenumericexpression","text":"R\u00e9sout une expression num\u00e9rique en s\u00e9quence d'entiers. values = \"1..5\".ResolveNumericExpression() # Retourne [1, 2, 3, 4, 5] values = \"1,3,5\".ResolveNumericExpression() # Retourne [1, 3, 5]","title":"ResolveNumericExpression"},{"location":"Strings/#tryevaluatenumericexpression","text":"Tente d'\u00e9valuer une expression num\u00e9rique. success = \"1..5\".TryEvaluateNumericExpression(out values) # Success = True, values = [1, 2, 3, 4, 5]","title":"TryEvaluateNumericExpression"},{"location":"Strings/#nommage-et-identification","text":"","title":"Nommage et identification"},{"location":"Strings/#iskeyword","text":"V\u00e9rifie si une cha\u00eene est un mot-cl\u00e9 valide (commence par une lettre ou un underscore, suivi de lettres, chiffres ou underscores). result = \"myVar_123\".IsKeyword() # Retourne True result = \"123var\".IsKeyword() # Retourne False","title":"IsKeyword"},{"location":"Strings/#iskeywordpath","text":"V\u00e9rifie si une cha\u00eene est un chemin de mots-cl\u00e9s valide (mots-cl\u00e9s s\u00e9par\u00e9s par des points). result = \"module.class.method\".IsKeywordPath() # Retourne True","title":"IsKeywordPath"},{"location":"Strings/#ismetakeyword","text":"V\u00e9rifie si une cha\u00eene est un m\u00e9ta-mot-cl\u00e9 (commence par $). result = \"$variable\".IsMetaKeyword() # Retourne True","title":"IsMetaKeyword"},{"location":"Strings/#isname","text":"V\u00e9rifie si une cha\u00eene est un nom valide (alias de IsKeyword). result = Strings.IsName(\"myVariable\") # Retourne True","title":"IsName"},{"location":"Strings/#issymbolname","text":"V\u00e9rifie si une cha\u00eene est un nom de symbole valide (alias de IsKeyword). result = \"mySymbol\".IsSymbolName() # Retourne True","title":"IsSymbolName"},{"location":"Strings/#arrangename-nameize","text":"Arrange une cha\u00eene pour en faire un nom valide. name = \"My Variable 123\".Nameize() # Retourne \"MyVariable123\" name = \"123Invalid\".ArrangeName(\"_\") # Retourne \"_123Invalid\"","title":"ArrangeName / Nameize"},{"location":"Strings/#ensureuniquename","text":"S'assure qu'un nom est unique dans une collection, en ajoutant un suffixe num\u00e9rique si n\u00e9cessaire. name = Strings.EnsureUniqueName(\"File\", [\"File\", \"File_1\"]) # Retourne \"File_2\"","title":"EnsureUniqueName"},{"location":"Strings/#ensureuniquenames","text":"S'assure que tous les noms d'une liste sont uniques entre eux. names = Strings.EnsureUniqueNames([\"File\", \"File\", \"Report\"]) # Retourne [\"File\", \"File_1\", \"Report\"]","title":"EnsureUniqueNames"},{"location":"Strings/#ensureuniquefilename","text":"S'assure qu'un nom de fichier est unique sur le disque, en ajoutant un suffixe num\u00e9rique si n\u00e9cessaire. fileName = Strings.EnsureUniqueFileName(\"C:\\\\data\\\\report.txt\") # Retourne \"C:\\\\data\\\\report_1.txt\" si le fichier existe d\u00e9j\u00e0","title":"EnsureUniqueFileName"},{"location":"Strings/#newuniquename","text":"G\u00e9n\u00e8re un nouveau nom unique bas\u00e9 sur un mod\u00e8le, en ajoutant un suffixe num\u00e9rique. name = Strings.NewUniqueName(\"Item\", [\"Item\", \"Item_1\"]) # Retourne \"Item_2\"","title":"NewUniqueName"},{"location":"Strings/#newuniqueid","text":"G\u00e9n\u00e8re un nouvel identifiant unique bas\u00e9 sur un GUID. id = Strings.NewUniqueId() # Retourne une cha\u00eene unique comme \"8f9d5f7b3a2e1c\"","title":"NewUniqueId"},{"location":"Strings/#findrootname","text":"Extrait la racine d'un nom (la partie avant le dernier d\u00e9limiteur). root = \"user_settings_profile\".FindRootName() # Retourne \"user_settings\"","title":"FindRootName"},{"location":"Strings/#iscodeexpression","text":"V\u00e9rifie si une cha\u00eene est une expression de code (commence par $). result = \"$123\".IsCodeExpression() # Retourne True","title":"IsCodeExpression"},{"location":"Strings/#getcodeexpressionvalue","text":"Extrait la valeur num\u00e9rique d'une expression de code. value = \"$123\".GetCodeExpressionValue() # Retourne 123","title":"GetCodeExpressionValue"},{"location":"Strings/#formatcodeexpression","text":"Formate une valeur en expression de code. expr = Strings.FormatCodeExpression(123) # Retourne \"$123\"","title":"FormatCodeExpression"},{"location":"Strings/#isentityexpression","text":"V\u00e9rifie si une cha\u00eene est une expression d'entit\u00e9 (commence par @). result = \"@Entity\".IsEntityExpression() # Retourne True","title":"IsEntityExpression"},{"location":"Strings/#getentityexpressionvalue","text":"Extrait le nom d'une expression d'entit\u00e9. name = \"@Entity\".GetEntityExpressionValue() # Retourne \"Entity\"","title":"GetEntityExpressionValue"},{"location":"Strings/#formatentityexpression","text":"Formate un nom en expression d'entit\u00e9. expr = Strings.FormatEntityExpression(\"Entity\") # Retourne \"@Entity\"","title":"FormatEntityExpression"},{"location":"Strings/#support-dencodages-et-internationalisation","text":"","title":"Support d'encodages et internationalisation"},{"location":"Strings/#detectencoding","text":"D\u00e9tecte l'encodage d'une cha\u00eene. encoding = Strings.DetectEncoding(textContent) # Retourne l'encodage d\u00e9tect\u00e9","title":"DetectEncoding"},{"location":"Strings/#fixencoding","text":"R\u00e9pare l'encodage d'une cha\u00eene en cas de probl\u00e8me. fixed = problematicText.FixEncoding() # Tente de corriger les probl\u00e8mes d'encodage","title":"FixEncoding"},{"location":"Strings/#recode","text":"Change l'encodage d'une cha\u00eene. recoded = text.Recode(Encoding.ASCII, Encoding.UTF8) # Convertit de ASCII \u00e0 UTF8","title":"Recode"},{"location":"Strings/#toutf8","text":"Convertit une cha\u00eene en UTF-8. utf8Text = nonUtf8Text.ToUtf8() # Convertit en UTF-8","title":"ToUtf8"},{"location":"Strings/#todefaultencoding","text":"Convertit une cha\u00eene vers l'encodage par d\u00e9faut. defaultText = utf8Text.ToDefaultEncoding(Encoding.UTF8) # Convertit de UTF-8 \u00e0 l'encodage par d\u00e9faut","title":"ToDefaultEncoding"},{"location":"Strings/#isupper-islower","text":"V\u00e9rifie si une cha\u00eene est enti\u00e8rement en majuscules ou en minuscules (ignore les caract\u00e8res non-alphab\u00e9tiques). result = \"HELLO123\".IsUpper() # Retourne True result = \"hello123\".IsLower() # Retourne True","title":"IsUpper / IsLower"},{"location":"Strings/#isunaccentedletter","text":"V\u00e9rifie si un caract\u00e8re est une lettre non accentu\u00e9e. result = 'a'.IsUnaccentedLetter() # Retourne True result = '\u00e9'.IsUnaccentedLetter() # Retourne False","title":"IsUnaccentedLetter"},{"location":"Strings/#isunaccentedletterordigit","text":"V\u00e9rifie si un caract\u00e8re est une lettre non accentu\u00e9e ou un chiffre. result = 'a'.IsUnaccentedLetterOrDigit() # Retourne True result = '1'.IsUnaccentedLetterOrDigit() # Retourne True result = '\u00e9'.IsUnaccentedLetterOrDigit() # Retourne False","title":"IsUnaccentedLetterOrDigit"},{"location":"Strings/#utilitaires-pour-fichiers-et-chemins","text":"","title":"Utilitaires pour fichiers et chemins"},{"location":"Strings/#assumeiocompatible","text":"Remplace les caract\u00e8res non compatibles avec les fichiers par des underscores. path = Strings.AssumeIOCompatible(\"file:name.txt\") # Retourne \"file_name.txt\"","title":"AssumeIOCompatible"},{"location":"Strings/#comparefilenames","text":"Compare deux noms de fichiers en ignorant la casse et en normalisant les s\u00e9parateurs de chemin. result = Strings.CompareFileNames(\"c:\\\\folder\\\\file.txt\", \"C:/folder/file.txt\") # Retourne 0 (\u00e9gaux)","title":"CompareFileNames"},{"location":"Strings/#comparepaths","text":"Compare deux chemins (alias de CompareFileNames). result = Strings.ComparePaths(\"c:\\\\folder\\\\file\", \"C:/folder/file\") # Retourne 0 (\u00e9gaux)","title":"ComparePaths"},{"location":"Strings/#normalizepath","text":"Normalise un chemin en rempla\u00e7ant les s\u00e9parateurs de chemin par le s\u00e9parateur du syst\u00e8me. path = Strings.NormalizePath(\"C:/folder/file\") # Retourne \"C:\\\\folder\\\\file\" sur Windows","title":"NormalizePath"},{"location":"Strings/#makevalidfilename","text":"Transforme une cha\u00eene en nom de fichier valide en rempla\u00e7ant les caract\u00e8res invalides. fileName = \"file*name?.txt\".MakeValidFileName() # Retourne \"file_name_.txt\"","title":"MakeValidFileName"},{"location":"Strings/#makepath","text":"Cr\u00e9e un chemin \u00e0 partir d'une collection de segments. path = Strings.MakePath([\"folder\", \"subfolder\", \"file.txt\"]) # Retourne \"folder/subfolder/file.txt\"","title":"MakePath"},{"location":"Strings/#isabsolutepath","text":"V\u00e9rifie si un chemin est absolu. result = Strings.IsAbsolutePath(\"C:\\\\folder\\\\file.txt\") # Retourne True result = Strings.IsAbsolutePath(\"folder/file.txt\") # Retourne False","title":"IsAbsolutePath"},{"location":"Strings/#isrelativepath","text":"V\u00e9rifie si un chemin est relatif. result = Strings.IsRelativePath(\"folder/file.txt\") # Retourne True result = Strings.IsRelativePath(\"C:\\\\folder\\\\file.txt\") # Retourne False","title":"IsRelativePath"},{"location":"Strings/#formatfilesize","text":"Formate une taille de fichier en cha\u00eene lisible (KB, MB, etc.). size = Strings.FormatFileSize(1024 * 1024) # Retourne \"1.0 MB\"","title":"FormatFileSize"},{"location":"Strings/#cleanurl","text":"Nettoie une URL en supprimant le slash final. url = Strings.CleanUrl(\"http://example.com/\") # Retourne \"http://example.com\"","title":"CleanUrl"},{"location":"Strings/#isurl","text":"V\u00e9rifie si une cha\u00eene est une URL. result = Strings.IsUrl(\"http://example.com\") # Retourne True","title":"IsUrl"},{"location":"Strings/#expressions-et-patterns","text":"","title":"Expressions et patterns"},{"location":"Strings/#haswildcard","text":"V\u00e9rifie si une cha\u00eene contient des caract\u00e8res joker (* ou ?). result = \"file*.txt\".HasWildcard() # Retourne True","title":"HasWildcard"},{"location":"Strings/#removewildcards","text":"Supprime les caract\u00e8res joker d'une cha\u00eene. text = \"file*.txt\".RemoveWildcards() # Retourne \"file.txt\"","title":"RemoveWildcards"},{"location":"Strings/#iswildcard","text":"V\u00e9rifie si un caract\u00e8re est un joker. result = '*'.IsWildcard() # Retourne True","title":"IsWildcard"},{"location":"Strings/#containsjoker","text":"V\u00e9rifie si une cha\u00eene contient des jokers (alias de HasWildcard). result = \"file*.txt\".ContainsJoker() # Retourne True","title":"ContainsJoker"},{"location":"Strings/#istag","text":"V\u00e9rifie si une cha\u00eene contient des tags de format [TAG]. result = Strings.IsTag(\"This is a [TAG]\") # Retourne True","title":"IsTag"},{"location":"Strings/#istagexactly","text":"V\u00e9rifie si une cha\u00eene est exactement un tag de format [TAG]. result = \"[TAG]\".IsTagExactly() # Retourne True","title":"IsTagExactly"},{"location":"Strings/#untagstring-untagstringex","text":"Remplace les tags dans une cha\u00eene par leurs valeurs correspondantes dans un dictionnaire. values = {\"NAME\": \"John\", \"AGE\": 30} text = Strings.UntagString(\"Hello [NAME], you are [AGE] years old\", values) # Retourne \"Hello John, you are 30 years old\"","title":"UntagString / UntagStringEx"},{"location":"Strings/#untagtext","text":"Remplace les tags dans un objet Text par leurs valeurs correspondantes. values = {\"NAME\": \"John\", \"AGE\": 30} result = Strings.UntagText(textObject, values) # Remplace les tags dans l'objet Text","title":"UntagText"},{"location":"Strings/#untagobject","text":"Remplace les tags dans un objet (cha\u00eene ou Text) par leurs valeurs correspondantes. values = {\"NAME\": \"John\", \"AGE\": 30} result = Strings.UntagObject(\"[NAME] is [AGE]\", values) # Retourne \"John is 30\"","title":"UntagObject"},{"location":"Strings/#extractannotations","text":"Extrait les annotations (tags) d'une cha\u00eene. annotations = Strings.ExtractAnnotations(\"This is [TAG:format] a test\") # Retourne un dictionnaire avec {\"TAG\": \"format\"}","title":"ExtractAnnotations"},{"location":"Strings/#hasannotation","text":"V\u00e9rifie si une cha\u00eene contient des annotations. result = Strings.HasAnnotation(\"This is [TAG] a test\") # Retourne True","title":"HasAnnotation"},{"location":"Strings/#parseannotation","text":"Analyse une annotation dans une cha\u00eene. success = Strings.ParseAnnotation(\"[TYPE]Value\", out name, out value) # Success = True, name = \"TYPE\", value = \"Value\"","title":"ParseAnnotation"},{"location":"Strings/#smartformat","text":"Formate une cha\u00eene avec des valeurs de substitution avanc\u00e9es. values = {\"name\": \"John\", \"count\": 3} text = \"Hello {name}, you have {count} messages\".SmartFormat(values) # Retourne \"Hello John, you have 3 messages\"","title":"SmartFormat"},{"location":"Strings/#lookslikeselectionpattern","text":"V\u00e9rifie si une cha\u00eene ressemble \u00e0 un pattern de s\u00e9lection. result = \"[Property] = 'Value'\".LooksLikeSelectionPattern() # Retourne True","title":"LooksLikeSelectionPattern"},{"location":"Strings/#parsexmlattributes","text":"Parse des attributs XML dans une cha\u00eene. attributes = Strings.ParseXmlAttributes(\"set Name=\\\"Value\\\" Title=\\\"Example\\\"\") # Retourne un dictionnaire avec {\"Name\": \"Value\", \"Title\": \"Example\"}","title":"ParseXmlAttributes"},{"location":"Strings/#formatasxmlattributesstring","text":"Formate un dictionnaire en cha\u00eene d'attributs XML. attributes = {\"Name\": \"Value\", \"Title\": \"Example\"} xml = attributes.FormatAsXmlAttributesString(\"set\") # Retourne \"set Name=\\\"Value\\\" Title=\\\"Example\\\"\"","title":"FormatAsXmlAttributesString"},{"location":"Strings/#reget","text":"Extrait des parties d'une cha\u00eene \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. regex = new Regex(@\"(\\d+)-(\\d+)\") text = \"ID: 123-456\" result = text.ReGet(regex, \"-\") # Retourne \"123-456\"","title":"ReGet"},{"location":"Strings/#findmatchingparenthese-findmatchingclosingchar","text":"Trouve la parenth\u00e8se/accolade/crochet fermant correspondant \u00e0 un ouvrant. index = \"function() { return true; }\".FindMatchingParenthese(8) # Retourne 10","title":"FindMatchingParenthese / FindMatchingClosingChar"},{"location":"Strings/#isterminalexpression","text":"V\u00e9rifie si une expression est terminale (identificateur simple ou expression d\u00e9j\u00e0 entre parenth\u00e8ses). result = \"variable\".IsTerminalExpression() # Retourne True result = \"(x + y)\".IsTerminalExpression() # Retourne True result = \"x + y\".IsTerminalExpression() # Retourne False","title":"IsTerminalExpression"},{"location":"Strings/#utilitaires-specifiques","text":"","title":"Utilitaires sp\u00e9cifiques"},{"location":"Strings/#lookslikeemail","text":"V\u00e9rifie si une cha\u00eene ressemble \u00e0 une adresse email. result = \"user@example.com\".LooksLikeEmail() # Retourne True","title":"LooksLikeEmail"},{"location":"Strings/#lookslikejson","text":"V\u00e9rifie si une cha\u00eene ressemble \u00e0 du JSON. result = '{\"name\": \"John\"}'.LooksLikeJson() # Retourne True","title":"LooksLikeJson"},{"location":"Strings/#lookslikexml","text":"V\u00e9rifie si une cha\u00eene ressemble \u00e0 du XML. result = \"<user>John</user>\".LooksLikeXml() # Retourne True","title":"LooksLikeXml"},{"location":"Strings/#zipstring-unzipstring","text":"Compresse et d\u00e9compresse une cha\u00eene. compressed = Strings.ZipString(\"texte tr\u00e8s long \u00e0 compresser\") decompressed = Strings.UnzipString(compressed) # Retourne \"texte tr\u00e8s long \u00e0 compresser\"","title":"ZipString / UnzipString"},{"location":"Strings/#hashstring","text":"Hache une cha\u00eene pour cr\u00e9er une version plus courte. hashed = Strings.HashString(\"texte \u00e0 hacher\", 8) # Retourne une cha\u00eene de 8 caract\u00e8res","title":"HashString"},{"location":"Strings/#bytestohexa-hexatobytes","text":"Convertit entre des octets et leur repr\u00e9sentation hexad\u00e9cimale. hexa = Strings.BytesToHexa(byteArray) # Convertit des octets en cha\u00eene hexad\u00e9cimale bytes = Strings.HexaToBytes(\"0A1B2C\") # Convertit une cha\u00eene hexad\u00e9cimale en octets","title":"BytesToHexa / HexaToBytes"},{"location":"Strings/#shuffle","text":"M\u00e9lange une cha\u00eene de mani\u00e8re cryptographique. shuffled = Strings.Shuffle(\"Hello World\", 1) # Retourne une version m\u00e9lang\u00e9e","title":"Shuffle"},{"location":"Strings/#quote-unquote","text":"Ajoute ou supprime des guillemets autour d'une cha\u00eene. quoted = \"Hello\".Quote() # Retourne \"\\\"Hello\\\"\" unquoted = \"\\\"Hello\\\"\".Unquote() # Retourne \"Hello\"","title":"Quote / Unquote"},{"location":"Strings/#autoquote","text":"Ajoute des guillemets autour d'une cha\u00eene si elle n'en a pas d\u00e9j\u00e0. quoted = \"Hello\".AutoQuote() # Retourne \"\\\"Hello\\\"\" quoted = \"\\\"Hello\\\"\".AutoQuote() # Retourne \"\\\"Hello\\\"\" (inchang\u00e9)","title":"AutoQuote"},{"location":"Strings/#slashstring-unslashstring","text":"\u00c9chappe ou d\u00e9s\u00e9chappe les caract\u00e8res sp\u00e9ciaux dans une cha\u00eene. slashed = \"Hello\\nWorld\".SlashString() # Retourne \"Hello\\\\nWorld\" unslashed = \"Hello\\\\nWorld\".UnslashString() # Retourne \"Hello\\nWorld\"","title":"SlashString / UnslashString"},{"location":"Strings/#autoformatvalue","text":"Formate automatiquement une valeur num\u00e9rique. formatted = Strings.AutoFormatValue(123.456) # Retourne \"123.46\"","title":"AutoFormatValue"},{"location":"Strings/#getautoformat","text":"D\u00e9termine le format automatique pour une valeur num\u00e9rique. format = Strings.GetAutoFormat(123.456) # Retourne un format comme \"0.00\"","title":"GetAutoFormat"},{"location":"Strings/#gettimestamp","text":"G\u00e9n\u00e8re un horodatage au format cha\u00eene. timestamp = Strings.GetTimeStamp(True) # Retourne \"20250406123456\"","title":"GetTimeStamp"},{"location":"Strings/#getprettytimestamp","text":"G\u00e9n\u00e8re un horodatage lisible par les humains. timestamp = Strings.GetPrettyTimeStamp() # Retourne \"2025-04-06_12h34\"","title":"GetPrettyTimeStamp"},{"location":"Strings/#inject","text":"Injecte des valeurs dans une cha\u00eene \u00e0 partir d'un objet ou dictionnaire. template = \"Hello {name}, you are {age} years old\" data = {\"name\": \"John\", \"age\": 30} result = template.Inject(data) # Retourne \"Hello John, you are 30 years old\"","title":"Inject"},{"location":"Strings/#generaterandomstring","text":"G\u00e9n\u00e8re une cha\u00eene al\u00e9atoire. random = Strings.GenerateRandomString(\"abcdefghijklmnopqrstuvwxyz\", 5, 10) # Retourne une cha\u00eene al\u00e9atoire entre 5 et 10 caract\u00e8res","title":"GenerateRandomString"},{"location":"Strings/#toexceladdress","text":"Convertit des coordonn\u00e9es de cellule en adresse Excel. address = Strings.ToExcelAddress(0, 0) # Retourne \"R1C1\"","title":"ToExcelAddress"},{"location":"Strings/#isexceladdress","text":"V\u00e9rifie si une cha\u00eene est une adresse Excel valide. result = Strings.IsExcelAddress(\"A1:B10\") # Retourne True","title":"IsExcelAddress"},{"location":"Strings/#formatexceltext","text":"Formate un texte pour qu'il soit correctement affich\u00e9 dans Excel. text = \"=SUM(A1:A10)\".FormatExcelText() # Pr\u00e9fixe avec ' pour \u00e9viter l'interpr\u00e9tation comme formule","title":"FormatExcelText"},{"location":"Styles%20and%20Cells/","text":"Styles et Cellules Introduction Un Style est un ensemble de propri\u00e9t\u00e9s visuelles qui d\u00e9finissent l'apparence des \u00e9l\u00e9ments dans votre application. Dans ce syst\u00e8me, les styles peuvent \u00eatre appliqu\u00e9s \u00e0 des cellules individuelles, des collections de cellules, des lignes ou des colonnes de tableaux de donn\u00e9es, permettant ainsi une mise en forme riche et coh\u00e9rente des informations pr\u00e9sent\u00e9es. Les styles sont particuli\u00e8rement utiles pour : - Mettre en \u00e9vidence des informations importantes - Diff\u00e9rencier visuellement diff\u00e9rents types de donn\u00e9es - Am\u00e9liorer la lisibilit\u00e9 des tableaux de r\u00e9sultats - Cr\u00e9er des rapports professionnels avec une mise en forme coh\u00e9rente - Appliquer des formatages conditionnels bas\u00e9s sur les valeurs des donn\u00e9es Ce document fournit des exemples concrets pour vous aider \u00e0 comprendre comment utiliser efficacement le syst\u00e8me de styles dans vos applications. Partie 1 : les Styles Cr\u00e9ation et manipulation de styles # Cr\u00e9ation d'un style complet avec commentaires explicatifs style = Style() style.Bold = True # Mettre le texte en gras style.Italic = False # Ne pas mettre le texte en italique style.Underlined = True # Souligner le texte style.FontName = \"Calibri\" # D\u00e9finir la police style.FontSize = 12 # D\u00e9finir la taille de la police \u00e0 12 points style.Foreground = Color(0, 0, 255) # Texte en bleu style.Background = Color(230, 230, 230) # Fond gris clair style.Format = \"#,##0.00\" # Format pour afficher les nombres avec 2 d\u00e9cimales style.HorizontalAlignment = HorizontalAlignment.Right # Aligner le texte \u00e0 droite style.VerticalAlignment = VerticalAlignment.Center # Centrer verticalement style.WrapText = True # Autoriser le retour \u00e0 la ligne automatique style.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0))) # Bordure fine noire style.Indentation = 1 # Ajouter une indentation Styles avec bordures complexes # Cr\u00e9ation d'une bordure simple (identique sur tous les c\u00f4t\u00e9s) simpleBorder = Border(PenStyle(PenWeight.Medium, Color(0, 0, 0))) # Bordure moyenne noire partout style = Style() style.Border = simpleBorder # Cr\u00e9ation d'une bordure avec diff\u00e9rents c\u00f4t\u00e9s leftRight = PenStyle(PenWeight.Thin, Color(0, 0, 0)) # Bordure fine noire topBottom = PenStyle(PenWeight.Medium, Color(0, 0, 0)) # Bordure moyenne noire complexBorder = Border(leftRight, topBottom, leftRight, topBottom) # Ordre: gauche, haut, droite, bas complexStyle = Style() complexStyle.Border = complexBorder Partie 2 : les Cellules Une cellule est l'unit\u00e9 fondamentale d'affichage et de stockage des donn\u00e9es dans ce syst\u00e8me. Elle associe une valeur (Content) \u00e0 un style visuel qui d\u00e9finit son apparence. Les tableaux de donn\u00e9es sont g\u00e9n\u00e9ralement compos\u00e9s de cellules modifiables organis\u00e9es en lignes et colonnes. Chaque cellule peut contenir diff\u00e9rents types de donn\u00e9es (texte, nombres, dates, etc.) et poss\u00e8de ses propres propri\u00e9t\u00e9s de mise en forme. Cette combinaison permet de cr\u00e9er des visualisations riches et informatives o\u00f9 les donn\u00e9es et leur pr\u00e9sentation visuelle travaillent ensemble pour transmettre l'information de mani\u00e8re optimale. Les cellules peuvent \u00e9galement \u00eatre regroup\u00e9es en collections pour appliquer des styles communs \u00e0 plusieurs \u00e9l\u00e9ments, simplifiant ainsi la gestion des grands ensembles de donn\u00e9es. Cr\u00e9ation et manipulation de cellules # Cr\u00e9ation d'une cellule avec du texte textCell = Cell(\"Texte d'exemple\") # Cr\u00e9ation d'une cellule avec un nombre numberCell = Cell(42.5) numberCell.Format = \"#,##0.00\" numberCell.HorizontalAlignment = HorizontalAlignment.Right # Cellule avec une mise en forme avanc\u00e9e formattedCell = Cell(\"Important\") formattedCell.Bold = True formattedCell.Foreground = Color(255, 0, 0) # Rouge formattedCell.Background = Color(255, 255, 200) # Jaune p\u00e2le formattedCell.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0))) Application de styles \u00e0 des cellules # Cr\u00e9ation d'un style style = Style() style.FontName = \"Calibri\" style.FontSize = 11 style.Bold = True style.Foreground = Color(0, 80, 120) # Bleu fonc\u00e9 # Application du style \u00e0 une cellule cell = Cell(\"Texte avec style\") cell.ApplyStyle(style, True) # True = remplacer le style existant # Fusion d'un style avec le style existant d'une cellule existingCell = Cell(\"Style existant\") existingCell.Bold = True additionalStyle = Style() additionalStyle.Italic = True additionalStyle.Foreground = Color(0, 100, 0) # Vert fonc\u00e9 existingCell.ApplyStyle(additionalStyle, False) # False = fusionner avec le style existant Partie 3 : les Glyphes Les glyphes sont des \u00e9l\u00e9ments graphiques additionnels qui peuvent \u00eatre attach\u00e9s \u00e0 une cellule pour enrichir l'information qu'elle pr\u00e9sente. Un glyphe combine un contenu (texte ou symbole) avec son propre style, ind\u00e9pendamment du style principal de la cellule. Les glyphes sont particuli\u00e8rement utiles pour : - Indiquer des tendances (\u2191 ou \u2193 pour montrer une \u00e9volution) - Afficher des variations (pourcentages de croissance ou de diminution) - Attirer l'attention sur certaines valeurs (ast\u00e9risques, symboles d'alerte) - Ajouter des informations contextuelles (unit\u00e9s, statuts, annotations) - Cr\u00e9er des indicateurs visuels sans modifier la valeur principale Par exemple, dans un tableau financier, une cellule pourrait afficher \"1250\" comme valeur principale, accompagn\u00e9e d'un glyphe \"\u2191 +15%\" en vert pour indiquer une augmentation par rapport \u00e0 la p\u00e9riode pr\u00e9c\u00e9dente. Les glyphes permettent ainsi d'enrichir consid\u00e9rablement l'information pr\u00e9sent\u00e9e dans les cellules sans surcharger leur contenu principal. Cellules avec glyphes # Cr\u00e9ation d'une cellule avec une valeur cell = Cell(12500) cell.Format = \"#,##0\" # Ajout d'un glyphe pour indiquer une augmentation upArrowStyle = Style() upArrowStyle.Foreground = Color(0, 128, 0) # Vert cell.AddGlyph(\"\u2191\", upArrowStyle) # Ajout d'un pourcentage comme second glyphe percentStyle = Style() percentStyle.Foreground = Color(0, 128, 0) # Vert percentStyle.Bold = True cell.AddGlyph(\"+15%\", percentStyle) Partie 4 : Collections de cellules Les collections de cellules permettent de manipuler simultan\u00e9ment plusieurs cellules, simplifiant consid\u00e9rablement le travail sur des ensembles de donn\u00e9es. Elles sont bas\u00e9es sur la classe AbstractCellCollection qui fournit des m\u00e9thodes et propri\u00e9t\u00e9s communes pour interagir avec des groupes de cellules. Ces collections vous offrent la possibilit\u00e9 de : - Appliquer un style unique \u00e0 plusieurs cellules en une seule op\u00e9ration - Travailler sur des sous-ensembles sp\u00e9cifiques d'un tableau de donn\u00e9es (lignes, colonnes, zones) - Modifier les valeurs ou les formats d'un groupe de cellules - G\u00e9rer efficacement la mise en forme de grands volumes de donn\u00e9es Par exemple, vous pouvez acc\u00e9der aux cellules d'un en-t\u00eate de colonne ( table.Columns.Cells ), \u00e0 une ligne sp\u00e9cifique ( table.Rows[\"Total\"].Cells ), ou m\u00eame \u00e0 une intersection pr\u00e9cise ( table.Columns[1, 2].Rows[\"Total\"].Cells ). Cette flexibilit\u00e9 vous permet de cibler exactement les cellules que vous souhaitez modifier, rendant votre code plus lisible et plus efficace. Les propri\u00e9t\u00e9s de style appliqu\u00e9es \u00e0 une collection sont automatiquement propag\u00e9es \u00e0 toutes les cellules contenues dans cette collection, ce qui permet de maintenir une coh\u00e9rence visuelle sans avoir \u00e0 manipuler chaque cellule individuellement. Mise en forme d'un groupe de cellules # Dans cet exemple, 'cells' est une collection de cellules (par ex. obtenue via t.Cells) cells.Bold = True # Mettre toutes les cellules en gras cells.Foreground = Color(0, 0, 128) # Texte en bleu fonc\u00e9 cells.Format = \"#,##0.00\" # Formater tous les nombres Bordures sur des lignes et colonnes # Application d'une bordure sur les en-t\u00eates de colonnes headerRow = table.Columns.Cells headerRow.Border = Border(PenStyle(PenWeight.Thick, Color(0, 0, 0))) headerRow.Background = Color(240, 240, 240) headerRow.Bold = True # Bordure fine sur toutes les cellules d'une ligne dataRow = table.Rows[\"Total\"].Cells dataRow.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0))) dataRow.Background = Color(255, 250, 205) # Jaune p\u00e2le Partie 5 : Cellules compos\u00e9es (Usage avanc\u00e9) Les cellules compos\u00e9es repr\u00e9sentent un concept avanc\u00e9 mais essentiel dans le travail avec des tableaux de donn\u00e9es complexes. Une cellule compos\u00e9e contient plusieurs sous-cellules, chacune avec son propre contenu et style. Choix architectural : calculs dans les cellules vs calculs dans les lignes/colonnes Le syst\u00e8me offre deux approches pour g\u00e9rer les calculs et l'organisation des donn\u00e9es : Approche traditionnelle : Les calculs sont pr\u00e9sent\u00e9s au niveau des lignes ou des colonnes, et les cellules contiennent simplement les valeurs r\u00e9sultantes. Cette approche est plus appropri\u00e9e dans la plupart des cas. Approche par cellules compos\u00e9es : Les calculs sont int\u00e9gr\u00e9s dans les cellules elles-m\u00eames via les sous-cellules. Cas avantageux : fusion de tableaux complexes, simplification visuelle, calculs complexes entre plusieurs calculs. Le choix entre ces deux approches d\u00e9pend de votre cas d'utilisation sp\u00e9cifique. Il est \u00e9galement possible de combiner les deux approches dans diff\u00e9rentes parties d'une m\u00eame application. Structure et fonctionnement Une cellule compos\u00e9e utilise la propri\u00e9t\u00e9 SubCells qui est une collection de cellules filles. Chaque sous-cellule poss\u00e8de : - Son propre contenu - Son propre style - Un identifiant de groupe (Group) pour la retrouver facilement Acc\u00e8s aux sous-cellules Dans la tr\u00e8s grande majorit\u00e9 des cas, vous acc\u00e9derez simplement aux sous-cellules existantes pour lire leurs informations ou modifier leur contenu et leur style : # Acc\u00e8s aux sous-cellules par nom cell.SubCells[\"Valeur\"].Content = 125000 cell.SubCells[\"Valeur\"].Format = \"#,##0\" cell.SubCells[\"\u00c9volution\"].Foreground = Color(0, 128, 0) # Vert cell.SubCells[\"\u00c9volution\"].Bold = True # Acc\u00e8s aux sous-cellules par index cell.SubCells[0].FontSize = 12 cell.SubCells[1].HorizontalAlignment = HorizontalAlignment.Right Cette approche permet de travailler efficacement avec des cellules complexes sans avoir \u00e0 comprendre les m\u00e9canismes sous-jacents de cr\u00e9ation et de disposition des sous-cellules. Usage typique Un cas d'utilisation courant consiste \u00e0 parcourir les cellules d'un tableau pour appliquer conditionnellement des styles aux sous-cellules en fonction de valeurs pr\u00e9sentes dans d'autres sous-cellules : # Application d'un style conditionnel bas\u00e9 sur les valeurs d'une autre sous-cellule for cell in table.Cells: # V\u00e9rification si la sous-cellule \"TEST\" contient \"+\" if cell.SubCells[\"TEST\"].Content.AsString().Contains(\"+\"): # Application d'un style \u00e0 la sous-cellule \"VALUE\" cell.SubCells[\"VALUE\"].Foreground = Color(0, 128, 0) # Vert cell.SubCells[\"VALUE\"].Bold = True else: # Style diff\u00e9rent si condition non remplie cell.SubCells[\"VALUE\"].Foreground = Color(255, 0, 0) # Rouge Cette approche permet de cr\u00e9er des visualisations conditionnelles riches o\u00f9 l'apparence d'une partie de la cellule d\u00e9pend de la valeur d'une autre partie.","title":"Styles et Cellules"},{"location":"Styles%20and%20Cells/#styles-et-cellules","text":"","title":"Styles et Cellules"},{"location":"Styles%20and%20Cells/#introduction","text":"Un Style est un ensemble de propri\u00e9t\u00e9s visuelles qui d\u00e9finissent l'apparence des \u00e9l\u00e9ments dans votre application. Dans ce syst\u00e8me, les styles peuvent \u00eatre appliqu\u00e9s \u00e0 des cellules individuelles, des collections de cellules, des lignes ou des colonnes de tableaux de donn\u00e9es, permettant ainsi une mise en forme riche et coh\u00e9rente des informations pr\u00e9sent\u00e9es. Les styles sont particuli\u00e8rement utiles pour : - Mettre en \u00e9vidence des informations importantes - Diff\u00e9rencier visuellement diff\u00e9rents types de donn\u00e9es - Am\u00e9liorer la lisibilit\u00e9 des tableaux de r\u00e9sultats - Cr\u00e9er des rapports professionnels avec une mise en forme coh\u00e9rente - Appliquer des formatages conditionnels bas\u00e9s sur les valeurs des donn\u00e9es Ce document fournit des exemples concrets pour vous aider \u00e0 comprendre comment utiliser efficacement le syst\u00e8me de styles dans vos applications.","title":"Introduction"},{"location":"Styles%20and%20Cells/#partie-1-les-styles","text":"","title":"Partie 1 : les Styles"},{"location":"Styles%20and%20Cells/#creation-et-manipulation-de-styles","text":"# Cr\u00e9ation d'un style complet avec commentaires explicatifs style = Style() style.Bold = True # Mettre le texte en gras style.Italic = False # Ne pas mettre le texte en italique style.Underlined = True # Souligner le texte style.FontName = \"Calibri\" # D\u00e9finir la police style.FontSize = 12 # D\u00e9finir la taille de la police \u00e0 12 points style.Foreground = Color(0, 0, 255) # Texte en bleu style.Background = Color(230, 230, 230) # Fond gris clair style.Format = \"#,##0.00\" # Format pour afficher les nombres avec 2 d\u00e9cimales style.HorizontalAlignment = HorizontalAlignment.Right # Aligner le texte \u00e0 droite style.VerticalAlignment = VerticalAlignment.Center # Centrer verticalement style.WrapText = True # Autoriser le retour \u00e0 la ligne automatique style.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0))) # Bordure fine noire style.Indentation = 1 # Ajouter une indentation","title":"Cr\u00e9ation et manipulation de styles"},{"location":"Styles%20and%20Cells/#styles-avec-bordures-complexes","text":"# Cr\u00e9ation d'une bordure simple (identique sur tous les c\u00f4t\u00e9s) simpleBorder = Border(PenStyle(PenWeight.Medium, Color(0, 0, 0))) # Bordure moyenne noire partout style = Style() style.Border = simpleBorder # Cr\u00e9ation d'une bordure avec diff\u00e9rents c\u00f4t\u00e9s leftRight = PenStyle(PenWeight.Thin, Color(0, 0, 0)) # Bordure fine noire topBottom = PenStyle(PenWeight.Medium, Color(0, 0, 0)) # Bordure moyenne noire complexBorder = Border(leftRight, topBottom, leftRight, topBottom) # Ordre: gauche, haut, droite, bas complexStyle = Style() complexStyle.Border = complexBorder","title":"Styles avec bordures complexes"},{"location":"Styles%20and%20Cells/#partie-2-les-cellules","text":"Une cellule est l'unit\u00e9 fondamentale d'affichage et de stockage des donn\u00e9es dans ce syst\u00e8me. Elle associe une valeur (Content) \u00e0 un style visuel qui d\u00e9finit son apparence. Les tableaux de donn\u00e9es sont g\u00e9n\u00e9ralement compos\u00e9s de cellules modifiables organis\u00e9es en lignes et colonnes. Chaque cellule peut contenir diff\u00e9rents types de donn\u00e9es (texte, nombres, dates, etc.) et poss\u00e8de ses propres propri\u00e9t\u00e9s de mise en forme. Cette combinaison permet de cr\u00e9er des visualisations riches et informatives o\u00f9 les donn\u00e9es et leur pr\u00e9sentation visuelle travaillent ensemble pour transmettre l'information de mani\u00e8re optimale. Les cellules peuvent \u00e9galement \u00eatre regroup\u00e9es en collections pour appliquer des styles communs \u00e0 plusieurs \u00e9l\u00e9ments, simplifiant ainsi la gestion des grands ensembles de donn\u00e9es.","title":"Partie 2 : les Cellules"},{"location":"Styles%20and%20Cells/#creation-et-manipulation-de-cellules","text":"# Cr\u00e9ation d'une cellule avec du texte textCell = Cell(\"Texte d'exemple\") # Cr\u00e9ation d'une cellule avec un nombre numberCell = Cell(42.5) numberCell.Format = \"#,##0.00\" numberCell.HorizontalAlignment = HorizontalAlignment.Right # Cellule avec une mise en forme avanc\u00e9e formattedCell = Cell(\"Important\") formattedCell.Bold = True formattedCell.Foreground = Color(255, 0, 0) # Rouge formattedCell.Background = Color(255, 255, 200) # Jaune p\u00e2le formattedCell.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0)))","title":"Cr\u00e9ation et manipulation de cellules"},{"location":"Styles%20and%20Cells/#application-de-styles-a-des-cellules","text":"# Cr\u00e9ation d'un style style = Style() style.FontName = \"Calibri\" style.FontSize = 11 style.Bold = True style.Foreground = Color(0, 80, 120) # Bleu fonc\u00e9 # Application du style \u00e0 une cellule cell = Cell(\"Texte avec style\") cell.ApplyStyle(style, True) # True = remplacer le style existant # Fusion d'un style avec le style existant d'une cellule existingCell = Cell(\"Style existant\") existingCell.Bold = True additionalStyle = Style() additionalStyle.Italic = True additionalStyle.Foreground = Color(0, 100, 0) # Vert fonc\u00e9 existingCell.ApplyStyle(additionalStyle, False) # False = fusionner avec le style existant","title":"Application de styles \u00e0 des cellules"},{"location":"Styles%20and%20Cells/#partie-3-les-glyphes","text":"Les glyphes sont des \u00e9l\u00e9ments graphiques additionnels qui peuvent \u00eatre attach\u00e9s \u00e0 une cellule pour enrichir l'information qu'elle pr\u00e9sente. Un glyphe combine un contenu (texte ou symbole) avec son propre style, ind\u00e9pendamment du style principal de la cellule. Les glyphes sont particuli\u00e8rement utiles pour : - Indiquer des tendances (\u2191 ou \u2193 pour montrer une \u00e9volution) - Afficher des variations (pourcentages de croissance ou de diminution) - Attirer l'attention sur certaines valeurs (ast\u00e9risques, symboles d'alerte) - Ajouter des informations contextuelles (unit\u00e9s, statuts, annotations) - Cr\u00e9er des indicateurs visuels sans modifier la valeur principale Par exemple, dans un tableau financier, une cellule pourrait afficher \"1250\" comme valeur principale, accompagn\u00e9e d'un glyphe \"\u2191 +15%\" en vert pour indiquer une augmentation par rapport \u00e0 la p\u00e9riode pr\u00e9c\u00e9dente. Les glyphes permettent ainsi d'enrichir consid\u00e9rablement l'information pr\u00e9sent\u00e9e dans les cellules sans surcharger leur contenu principal.","title":"Partie 3 : les Glyphes"},{"location":"Styles%20and%20Cells/#cellules-avec-glyphes","text":"# Cr\u00e9ation d'une cellule avec une valeur cell = Cell(12500) cell.Format = \"#,##0\" # Ajout d'un glyphe pour indiquer une augmentation upArrowStyle = Style() upArrowStyle.Foreground = Color(0, 128, 0) # Vert cell.AddGlyph(\"\u2191\", upArrowStyle) # Ajout d'un pourcentage comme second glyphe percentStyle = Style() percentStyle.Foreground = Color(0, 128, 0) # Vert percentStyle.Bold = True cell.AddGlyph(\"+15%\", percentStyle)","title":"Cellules avec glyphes"},{"location":"Styles%20and%20Cells/#partie-4-collections-de-cellules","text":"Les collections de cellules permettent de manipuler simultan\u00e9ment plusieurs cellules, simplifiant consid\u00e9rablement le travail sur des ensembles de donn\u00e9es. Elles sont bas\u00e9es sur la classe AbstractCellCollection qui fournit des m\u00e9thodes et propri\u00e9t\u00e9s communes pour interagir avec des groupes de cellules. Ces collections vous offrent la possibilit\u00e9 de : - Appliquer un style unique \u00e0 plusieurs cellules en une seule op\u00e9ration - Travailler sur des sous-ensembles sp\u00e9cifiques d'un tableau de donn\u00e9es (lignes, colonnes, zones) - Modifier les valeurs ou les formats d'un groupe de cellules - G\u00e9rer efficacement la mise en forme de grands volumes de donn\u00e9es Par exemple, vous pouvez acc\u00e9der aux cellules d'un en-t\u00eate de colonne ( table.Columns.Cells ), \u00e0 une ligne sp\u00e9cifique ( table.Rows[\"Total\"].Cells ), ou m\u00eame \u00e0 une intersection pr\u00e9cise ( table.Columns[1, 2].Rows[\"Total\"].Cells ). Cette flexibilit\u00e9 vous permet de cibler exactement les cellules que vous souhaitez modifier, rendant votre code plus lisible et plus efficace. Les propri\u00e9t\u00e9s de style appliqu\u00e9es \u00e0 une collection sont automatiquement propag\u00e9es \u00e0 toutes les cellules contenues dans cette collection, ce qui permet de maintenir une coh\u00e9rence visuelle sans avoir \u00e0 manipuler chaque cellule individuellement.","title":"Partie 4 : Collections de cellules"},{"location":"Styles%20and%20Cells/#mise-en-forme-dun-groupe-de-cellules","text":"# Dans cet exemple, 'cells' est une collection de cellules (par ex. obtenue via t.Cells) cells.Bold = True # Mettre toutes les cellules en gras cells.Foreground = Color(0, 0, 128) # Texte en bleu fonc\u00e9 cells.Format = \"#,##0.00\" # Formater tous les nombres","title":"Mise en forme d'un groupe de cellules"},{"location":"Styles%20and%20Cells/#bordures-sur-des-lignes-et-colonnes","text":"# Application d'une bordure sur les en-t\u00eates de colonnes headerRow = table.Columns.Cells headerRow.Border = Border(PenStyle(PenWeight.Thick, Color(0, 0, 0))) headerRow.Background = Color(240, 240, 240) headerRow.Bold = True # Bordure fine sur toutes les cellules d'une ligne dataRow = table.Rows[\"Total\"].Cells dataRow.Border = Border(PenStyle(PenWeight.Thin, Color(0, 0, 0))) dataRow.Background = Color(255, 250, 205) # Jaune p\u00e2le","title":"Bordures sur des lignes et colonnes"},{"location":"Styles%20and%20Cells/#partie-5-cellules-composees-usage-avance","text":"Les cellules compos\u00e9es repr\u00e9sentent un concept avanc\u00e9 mais essentiel dans le travail avec des tableaux de donn\u00e9es complexes. Une cellule compos\u00e9e contient plusieurs sous-cellules, chacune avec son propre contenu et style.","title":"Partie 5 : Cellules compos\u00e9es (Usage avanc\u00e9)"},{"location":"Styles%20and%20Cells/#choix-architectural-calculs-dans-les-cellules-vs-calculs-dans-les-lignescolonnes","text":"Le syst\u00e8me offre deux approches pour g\u00e9rer les calculs et l'organisation des donn\u00e9es : Approche traditionnelle : Les calculs sont pr\u00e9sent\u00e9s au niveau des lignes ou des colonnes, et les cellules contiennent simplement les valeurs r\u00e9sultantes. Cette approche est plus appropri\u00e9e dans la plupart des cas. Approche par cellules compos\u00e9es : Les calculs sont int\u00e9gr\u00e9s dans les cellules elles-m\u00eames via les sous-cellules. Cas avantageux : fusion de tableaux complexes, simplification visuelle, calculs complexes entre plusieurs calculs. Le choix entre ces deux approches d\u00e9pend de votre cas d'utilisation sp\u00e9cifique. Il est \u00e9galement possible de combiner les deux approches dans diff\u00e9rentes parties d'une m\u00eame application.","title":"Choix architectural : calculs dans les cellules vs calculs dans les lignes/colonnes"},{"location":"Styles%20and%20Cells/#structure-et-fonctionnement","text":"Une cellule compos\u00e9e utilise la propri\u00e9t\u00e9 SubCells qui est une collection de cellules filles. Chaque sous-cellule poss\u00e8de : - Son propre contenu - Son propre style - Un identifiant de groupe (Group) pour la retrouver facilement","title":"Structure et fonctionnement"},{"location":"Styles%20and%20Cells/#acces-aux-sous-cellules","text":"Dans la tr\u00e8s grande majorit\u00e9 des cas, vous acc\u00e9derez simplement aux sous-cellules existantes pour lire leurs informations ou modifier leur contenu et leur style : # Acc\u00e8s aux sous-cellules par nom cell.SubCells[\"Valeur\"].Content = 125000 cell.SubCells[\"Valeur\"].Format = \"#,##0\" cell.SubCells[\"\u00c9volution\"].Foreground = Color(0, 128, 0) # Vert cell.SubCells[\"\u00c9volution\"].Bold = True # Acc\u00e8s aux sous-cellules par index cell.SubCells[0].FontSize = 12 cell.SubCells[1].HorizontalAlignment = HorizontalAlignment.Right Cette approche permet de travailler efficacement avec des cellules complexes sans avoir \u00e0 comprendre les m\u00e9canismes sous-jacents de cr\u00e9ation et de disposition des sous-cellules.","title":"Acc\u00e8s aux sous-cellules"},{"location":"Styles%20and%20Cells/#usage-typique","text":"Un cas d'utilisation courant consiste \u00e0 parcourir les cellules d'un tableau pour appliquer conditionnellement des styles aux sous-cellules en fonction de valeurs pr\u00e9sentes dans d'autres sous-cellules : # Application d'un style conditionnel bas\u00e9 sur les valeurs d'une autre sous-cellule for cell in table.Cells: # V\u00e9rification si la sous-cellule \"TEST\" contient \"+\" if cell.SubCells[\"TEST\"].Content.AsString().Contains(\"+\"): # Application d'un style \u00e0 la sous-cellule \"VALUE\" cell.SubCells[\"VALUE\"].Foreground = Color(0, 128, 0) # Vert cell.SubCells[\"VALUE\"].Bold = True else: # Style diff\u00e9rent si condition non remplie cell.SubCells[\"VALUE\"].Foreground = Color(255, 0, 0) # Rouge Cette approche permet de cr\u00e9er des visualisations conditionnelles riches o\u00f9 l'apparence d'une partie de la cellule d\u00e9pend de la valeur d'une autre partie.","title":"Usage typique"},{"location":"Fonctions/ALL1/","text":"ALL Fonction ALL La fonction ALL permet de s\u00e9lectionner les individus ayant cit\u00e9 toutes les modalit\u00e9s list\u00e9es. L'argument correspond aux diff\u00e9rentes modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondu \u00e0 toutes les modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative \u00e0 la m\u00e9thode de s\u00e9lection des items et/ou \u00e0 la m\u00e9thode de s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.ALL(Keys) ou _ALL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : S1.ALL(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant cit\u00e9s au moins les modalit\u00e9s 1 et 2 et 3. S1.GRPMOD(ALL(1 2 3))est une d\u00e9finition \u00e9quivalente. Voir aussi : EXACTLY ANY NONE","title":"ALL"},{"location":"Fonctions/ALL1/#all","text":"","title":"ALL"},{"location":"Fonctions/ALL1/#fonction-all","text":"La fonction ALL permet de s\u00e9lectionner les individus ayant cit\u00e9 toutes les modalit\u00e9s list\u00e9es. L'argument correspond aux diff\u00e9rentes modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondu \u00e0 toutes les modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative \u00e0 la m\u00e9thode de s\u00e9lection des items et/ou \u00e0 la m\u00e9thode de s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction ALL"},{"location":"Fonctions/ALL1/#syntaxe","text":"Q01.ALL(Keys) ou _ALL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ALL1/#exemples","text":"S1.ALL(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant cit\u00e9s au moins les modalit\u00e9s 1 et 2 et 3. S1.GRPMOD(ALL(1 2 3))est une d\u00e9finition \u00e9quivalente. Voir aussi : EXACTLY ANY NONE","title":"Exemples :"},{"location":"Fonctions/AND1/","text":"AND Fonction AND A ne pas confondre avec l'op\u00e9rateur AND qui calcule une condition bas\u00e9e sur le ET LOGIQUE entre les r\u00e9pondants des arguments. La fonction AND applique un \"ET LOGIQUE\" de modalit\u00e9 \u00e0 modalit\u00e9 en ne suivant pas le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions logiques \u00e0 combiner. Syntaxe : _AND(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : Le nombre de modalit\u00e9s des variables en argument doit \u00eatre compatible. La premi\u00e8re variable s\u00e9lectionn\u00e9e et celle avec le nombre de modalit\u00e9 le plus grand. Exemples : _AND(S1A;S1B) Le r\u00e9sultat est une variable logique avec les m\u00eames modalit\u00e9s (en nombre et en libell\u00e9s) que la premi\u00e8re variable s\u00e9lectionn\u00e9e. Les variables pr\u00e9sentant moins de modalit\u00e9s que la premi\u00e8re sont compl\u00e9t\u00e9es avec des modalit\u00e9s vides. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans tous les arguments. IMPORTANT : un 'AND' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez UNIV ou ANDFLT ! Voir aussi : Op\u00e9rateurs Combiner les variables","title":"AND"},{"location":"Fonctions/AND1/#and","text":"","title":"AND"},{"location":"Fonctions/AND1/#fonction-and","text":"A ne pas confondre avec l'op\u00e9rateur AND qui calcule une condition bas\u00e9e sur le ET LOGIQUE entre les r\u00e9pondants des arguments. La fonction AND applique un \"ET LOGIQUE\" de modalit\u00e9 \u00e0 modalit\u00e9 en ne suivant pas le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions logiques \u00e0 combiner.","title":"Fonction AND"},{"location":"Fonctions/AND1/#syntaxe","text":"_AND(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/AND1/#remarques","text":"Le nombre de modalit\u00e9s des variables en argument doit \u00eatre compatible. La premi\u00e8re variable s\u00e9lectionn\u00e9e et celle avec le nombre de modalit\u00e9 le plus grand.","title":"Remarques :"},{"location":"Fonctions/AND1/#exemples","text":"_AND(S1A;S1B) Le r\u00e9sultat est une variable logique avec les m\u00eames modalit\u00e9s (en nombre et en libell\u00e9s) que la premi\u00e8re variable s\u00e9lectionn\u00e9e. Les variables pr\u00e9sentant moins de modalit\u00e9s que la premi\u00e8re sont compl\u00e9t\u00e9es avec des modalit\u00e9s vides. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans tous les arguments. IMPORTANT : un 'AND' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez UNIV ou ANDFLT ! Voir aussi : Op\u00e9rateurs Combiner les variables","title":"Exemples :"},{"location":"Fonctions/ANDFLT1/","text":"ANDFLT Fonction ANDFLT La fonction ANDFLT cr\u00e9e un univers (un filtre) \u00e0 l'aide d'un \"ET LOGIQUE\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions). Syntaxe n\u00b01 : _ANDFLT(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : Un 'ANDFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments. Exemples : _ANDFLT(S1.SELMOD(1 2); S3.SELMOD(2);S2) Donne un univers constitu\u00e9 de l'intersection (ET logique) entre les r\u00e9pondants \u00e0 S1 modalit\u00e9s 1 ou 2, les r\u00e9pondants \u00e0 S3 modalit\u00e9 2 et les r\u00e9pondants \u00e0 S2. Voir aussi : Univers, cibles et sous-populations Combiner les variables","title":"ANDFLT"},{"location":"Fonctions/ANDFLT1/#andflt","text":"","title":"ANDFLT"},{"location":"Fonctions/ANDFLT1/#fonction-andflt","text":"La fonction ANDFLT cr\u00e9e un univers (un filtre) \u00e0 l'aide d'un \"ET LOGIQUE\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions).","title":"Fonction ANDFLT"},{"location":"Fonctions/ANDFLT1/#syntaxe-n1","text":"_ANDFLT(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe n\u00b01 :&nbsp;"},{"location":"Fonctions/ANDFLT1/#remarques","text":"Un 'ANDFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments.","title":"Remarques :"},{"location":"Fonctions/ANDFLT1/#exemples","text":"_ANDFLT(S1.SELMOD(1 2); S3.SELMOD(2);S2) Donne un univers constitu\u00e9 de l'intersection (ET logique) entre les r\u00e9pondants \u00e0 S1 modalit\u00e9s 1 ou 2, les r\u00e9pondants \u00e0 S3 modalit\u00e9 2 et les r\u00e9pondants \u00e0 S2. Voir aussi : Univers, cibles et sous-populations Combiner les variables","title":"Exemples :"},{"location":"Fonctions/ANNOTATE1/","text":"ANNOTATE Fonction ANNOTATE La fonction ANNONATE cr\u00e9e et associe une annotation \u00e0 la variable courante. Syntaxe n\u00b01 : Q01.ANNOTATE(Key; Value) ou _ANNOTATE(Q01; Key; Value) **Nom ** **Type ** Description Remarque Key cha\u00eene de caract\u00e8res Nom de l'annotation \u00e0 cr\u00e9er Obligatoire Value valeur Valeur associ\u00e9e \u00e0 l'annotation Obligatoire Exemples : Q01.ANNOTATE(\"SCORE\"; 2.5) Cr\u00e9e l'annotation SCORE et lui affecte la valeur 2.5 Q01.ANNOTATE(\"SERVICE\"; \"RH\") Cr\u00e9e l'annotation SERVICE et lui affecte la valeur \"RH\". Voir aussi :","title":"ANNOTATE"},{"location":"Fonctions/ANNOTATE1/#annotate","text":"","title":"ANNOTATE"},{"location":"Fonctions/ANNOTATE1/#fonction-annotate","text":"La fonction ANNONATE cr\u00e9e et associe une annotation \u00e0 la variable courante.","title":"Fonction ANNOTATE"},{"location":"Fonctions/ANNOTATE1/#syntaxe-n1","text":"Q01.ANNOTATE(Key; Value) ou _ANNOTATE(Q01; Key; Value) **Nom ** **Type ** Description Remarque Key cha\u00eene de caract\u00e8res Nom de l'annotation \u00e0 cr\u00e9er Obligatoire Value valeur Valeur associ\u00e9e \u00e0 l'annotation Obligatoire","title":"Syntaxe n\u00b01 :&nbsp;"},{"location":"Fonctions/ANNOTATE1/#exemples","text":"Q01.ANNOTATE(\"SCORE\"; 2.5) Cr\u00e9e l'annotation SCORE et lui affecte la valeur 2.5 Q01.ANNOTATE(\"SERVICE\"; \"RH\") Cr\u00e9e l'annotation SERVICE et lui affecte la valeur \"RH\". Voir aussi :","title":"Exemples :"},{"location":"Fonctions/ANONYMIZE1/","text":"ANONYMIZE Fonction ANONYMIZE La fonction ANONYMIZE nettoie une variable en supprimant les modalit\u00e9s non cit\u00e9es par rapport \u00e0 un univers donn\u00e9. En option, une modalit\u00e9 \"Autres\" peut \u00eatre cr\u00e9\u00e9e. Syntaxe : Q01.ANONYMIZE(Universe; CreateOthers) ou _ANONYMIZE(Q01; Universe; CreateOthers) **Nom ** **Type ** Description Remarque 1 Universe Univers Univers d'application Obligatoire 2 CreateOthers Bool\u00e9en Cr\u00e9e la modalit\u00e9 \"Autres\" si TRUE TRUE par d\u00e9faut Exemples : DEPARTEMENTS.ANONYMIZE(REGION 1) Retourne une variable DEPARTEMENTS qui ne comporte que les d\u00e9partements de la REGION 1. Les autres d\u00e9partements sont regroup\u00e9s dans une modalit\u00e9s \"Autres\". DEPARTEMENTS.ANONYMIZE(REGION 1; FALSE) Retourne une variable DEPARTEMENTS qui ne comporte que les d\u00e9partements de la REGION 1. Les autres d\u00e9partements sont simplement supprim\u00e9s. Voir aussi : Univers, cibles et sous-populations Combiner les variables","title":"ANONYMIZE"},{"location":"Fonctions/ANONYMIZE1/#anonymize","text":"","title":"ANONYMIZE"},{"location":"Fonctions/ANONYMIZE1/#fonction-anonymize","text":"La fonction ANONYMIZE nettoie une variable en supprimant les modalit\u00e9s non cit\u00e9es par rapport \u00e0 un univers donn\u00e9. En option, une modalit\u00e9 \"Autres\" peut \u00eatre cr\u00e9\u00e9e.","title":"Fonction ANONYMIZE"},{"location":"Fonctions/ANONYMIZE1/#syntaxe","text":"Q01.ANONYMIZE(Universe; CreateOthers) ou _ANONYMIZE(Q01; Universe; CreateOthers) **Nom ** **Type ** Description Remarque 1 Universe Univers Univers d'application Obligatoire 2 CreateOthers Bool\u00e9en Cr\u00e9e la modalit\u00e9 \"Autres\" si TRUE TRUE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ANONYMIZE1/#exemples","text":"DEPARTEMENTS.ANONYMIZE(REGION 1) Retourne une variable DEPARTEMENTS qui ne comporte que les d\u00e9partements de la REGION 1. Les autres d\u00e9partements sont regroup\u00e9s dans une modalit\u00e9s \"Autres\". DEPARTEMENTS.ANONYMIZE(REGION 1; FALSE) Retourne une variable DEPARTEMENTS qui ne comporte que les d\u00e9partements de la REGION 1. Les autres d\u00e9partements sont simplement supprim\u00e9s. Voir aussi : Univers, cibles et sous-populations Combiner les variables","title":"Exemples :"},{"location":"Fonctions/ANSWERS1/","text":"ANSWERS Fonction ANSWERS La fonction ANSWERS appliqu\u00e9e \u00e0 une variable multi-r\u00e9ponses retourne une variable num\u00e9rique qui contient le nombre de r\u00e9ponses cit\u00e9es pour chacun des individus de la variable d'origine. Syntaxe : Q01.ANSWERS(UseReductor) ou _ANSWERS(Q01; UseReductor) **Nom ** **Type ** Description Remarque UseReductor Bool\u00e9en Prend en compte le r\u00e9ducteur si TRUE (plafonn\u00e9 \u00e0 1) FALSE par d\u00e9faut Remarques : Il est fr\u00e9quent d'utiliser la fonction DTOC \u00e0 la place de ANSWERS. Dans ce cas le r\u00e9ducteur est toujours pris en compte, et ses valeurs ne sont pas plafonn\u00e9es \u00e0 1. Exemples : S6.ANSWERS(TRUE) Retourne une variable num\u00e9rique qui contient le nombre de r\u00e9ponses cit\u00e9es, pour par exemple calculer un nombre moyen de r\u00e9ponses. Voir aussi : Traiter les variables multi-r\u00e9ponses","title":"ANSWERS"},{"location":"Fonctions/ANSWERS1/#answers","text":"","title":"ANSWERS"},{"location":"Fonctions/ANSWERS1/#fonction-answers","text":"La fonction ANSWERS appliqu\u00e9e \u00e0 une variable multi-r\u00e9ponses retourne une variable num\u00e9rique qui contient le nombre de r\u00e9ponses cit\u00e9es pour chacun des individus de la variable d'origine.","title":"Fonction ANSWERS"},{"location":"Fonctions/ANSWERS1/#syntaxe","text":"Q01.ANSWERS(UseReductor) ou _ANSWERS(Q01; UseReductor) **Nom ** **Type ** Description Remarque UseReductor Bool\u00e9en Prend en compte le r\u00e9ducteur si TRUE (plafonn\u00e9 \u00e0 1) FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ANSWERS1/#remarques","text":"Il est fr\u00e9quent d'utiliser la fonction DTOC \u00e0 la place de ANSWERS. Dans ce cas le r\u00e9ducteur est toujours pris en compte, et ses valeurs ne sont pas plafonn\u00e9es \u00e0 1.","title":"Remarques :"},{"location":"Fonctions/ANSWERS1/#exemples","text":"S6.ANSWERS(TRUE) Retourne une variable num\u00e9rique qui contient le nombre de r\u00e9ponses cit\u00e9es, pour par exemple calculer un nombre moyen de r\u00e9ponses. Voir aussi : Traiter les variables multi-r\u00e9ponses","title":"Exemples :"},{"location":"Fonctions/ANY1/","text":"ANY Fonction ANY La fonction ANY permet de s\u00e9lectionner les individus ayant cit\u00e9 au moins une des modalit\u00e9s ou codes list\u00e9s. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondus au moins une des modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.ANY(Keys) ou _ANY(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : S1.ANY(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant au moins une des modalit\u00e9s 1, 2 ou 3. S1.GRPMOD(ANY(1 2 3)) ou S1.GRPMOD(1 2 3)sont des d\u00e9finitions \u00e9quivalentes. Remarques : Avec S2 \u00e9tant une variable continue, les d\u00e9finitions suivantes retournent la m\u00eame population : S2.ANY($45) S2.ANY(45) S2 = 45 S2 == 45 Voir aussi : ALL EXACTLY NONE","title":"ANY"},{"location":"Fonctions/ANY1/#any","text":"","title":"ANY"},{"location":"Fonctions/ANY1/#fonction-any","text":"La fonction ANY permet de s\u00e9lectionner les individus ayant cit\u00e9 au moins une des modalit\u00e9s ou codes list\u00e9s. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondus au moins une des modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction ANY"},{"location":"Fonctions/ANY1/#syntaxe","text":"Q01.ANY(Keys) ou _ANY(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ANY1/#exemples","text":"S1.ANY(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant au moins une des modalit\u00e9s 1, 2 ou 3. S1.GRPMOD(ANY(1 2 3)) ou S1.GRPMOD(1 2 3)sont des d\u00e9finitions \u00e9quivalentes.","title":"Exemples :"},{"location":"Fonctions/ANY1/#remarques","text":"Avec S2 \u00e9tant une variable continue, les d\u00e9finitions suivantes retournent la m\u00eame population : S2.ANY($45) S2.ANY(45) S2 = 45 S2 == 45 Voir aussi : ALL EXACTLY NONE","title":"Remarques :"},{"location":"Fonctions/AS1/","text":"AS Fonction AS La fonction AS cr\u00e9e une variable temporaire utilisable dans la d\u00e9finition courante. Syntaxe : Q01.AS(\"Name\") ou _AS(Q01;\"Name\") **Nom ** **Type ** Description Remarque 1 Name Cha\u00eene de caract\u00e8res Nom de la variable temporaire Obligatoire Remarques : L'appel \u00e0 une variable temporaire est pr\u00e9fix\u00e9 par le caract\u00e8re \"@\" Exemples : S2.AS(\"T1\").FIX(@T1.NORESP() AND S1.MOD(1);99).AS(\"T2\").FIX(@T2.NORESP() AND S1.NOT(1);-1) Dans cet exemple, on souhaite appliquer 2 r\u00e8gles de nettoyage \u00e0 la variable S2 sans passer par la cr\u00e9ation de variables interm\u00e9diaires. T1 est une premi\u00e8re copie de S2 sur laquelle une premi\u00e8re r\u00e8gle de nettoyage est appliqu\u00e9e. Puis T2 qui est une copie de la variable issue de ce premier nettoyage est utilis\u00e9e pour l'application d'une deuxi\u00e8me r\u00e8gle de nettoyage. Voir aussi :","title":"AS"},{"location":"Fonctions/AS1/#as","text":"","title":"AS"},{"location":"Fonctions/AS1/#fonction-as","text":"La fonction AS cr\u00e9e une variable temporaire utilisable dans la d\u00e9finition courante.","title":"Fonction AS"},{"location":"Fonctions/AS1/#syntaxe","text":"Q01.AS(\"Name\") ou _AS(Q01;\"Name\") **Nom ** **Type ** Description Remarque 1 Name Cha\u00eene de caract\u00e8res Nom de la variable temporaire Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/AS1/#remarques","text":"L'appel \u00e0 une variable temporaire est pr\u00e9fix\u00e9 par le caract\u00e8re \"@\"","title":"Remarques :"},{"location":"Fonctions/AS1/#exemples","text":"S2.AS(\"T1\").FIX(@T1.NORESP() AND S1.MOD(1);99).AS(\"T2\").FIX(@T2.NORESP() AND S1.NOT(1);-1) Dans cet exemple, on souhaite appliquer 2 r\u00e8gles de nettoyage \u00e0 la variable S2 sans passer par la cr\u00e9ation de variables interm\u00e9diaires. T1 est une premi\u00e8re copie de S2 sur laquelle une premi\u00e8re r\u00e8gle de nettoyage est appliqu\u00e9e. Puis T2 qui est une copie de la variable issue de ce premier nettoyage est utilis\u00e9e pour l'application d'une deuxi\u00e8me r\u00e8gle de nettoyage. Voir aussi :","title":"Exemples :"},{"location":"Fonctions/AUTOBASE1/","text":"AUTOBASE Fonction AUTOBASE La fonction AUTOBASE calcule les bases manquantes par analyse de l'ordonnateur. Chaque \"groupe de modalit\u00e9s\" (modalit\u00e9s qui partagent la m\u00eame valeur d'ordonnateur) peut poss\u00e9der une base, d\u00e9finie par un ordonnateur n\u00e9gatif et dont la valeur absolue correspond au num\u00e9ro du groupe. La pr\u00e9sence de cette base d\u00e9termine le comportement du calcul du compl\u00e9ment lors des tests statistiques. Par d\u00e9faut, le compl\u00e9ment est calcul\u00e9 par soustraction de la modalit\u00e9 de la base r\u00e9pondant de la variable. Si la modalit\u00e9 appartient \u00e0 un groupe qui dispose d'une base explicite, alors le calcul de compl\u00e9ment utilise cette base. Syntaxe : Q01.AUTOBASE(ShowBases; MoveAtEnd) ou _AUTOBASE(Q01; ShowBases; MoveAtEnd) **Nom ** **Type ** Description Remarque 1 ShowBases Bool\u00e9en Par d\u00e9faut, n'affiche pas les bases calcul\u00e9es, si TRUE affiche les bases FALSE par d\u00e9faut 2 MoveAtEnd Bool\u00e9en Par d\u00e9faut, les bases sont en premi\u00e8res positions, si TRUE les bases sont en derni\u00e8res modalit\u00e9s FALSE par d\u00e9faut Remarques : Il n'est pas rare de trouver la fonction AUTOBASE dans la cr\u00e9ation de crit\u00e8res et en compl\u00e9ment de la fonction ORDMOD. Entre en interaction avec les options des test statistiques Exemples : S1.AUTOBASE() S1.AUTOBASE(TRUE; TRUE) Voir aussi : Crit\u00e8res","title":"AUTOBASE"},{"location":"Fonctions/AUTOBASE1/#autobase","text":"","title":"AUTOBASE"},{"location":"Fonctions/AUTOBASE1/#fonction-autobase","text":"La fonction AUTOBASE calcule les bases manquantes par analyse de l'ordonnateur. Chaque \"groupe de modalit\u00e9s\" (modalit\u00e9s qui partagent la m\u00eame valeur d'ordonnateur) peut poss\u00e9der une base, d\u00e9finie par un ordonnateur n\u00e9gatif et dont la valeur absolue correspond au num\u00e9ro du groupe. La pr\u00e9sence de cette base d\u00e9termine le comportement du calcul du compl\u00e9ment lors des tests statistiques. Par d\u00e9faut, le compl\u00e9ment est calcul\u00e9 par soustraction de la modalit\u00e9 de la base r\u00e9pondant de la variable. Si la modalit\u00e9 appartient \u00e0 un groupe qui dispose d'une base explicite, alors le calcul de compl\u00e9ment utilise cette base.","title":"Fonction AUTOBASE"},{"location":"Fonctions/AUTOBASE1/#syntaxe","text":"Q01.AUTOBASE(ShowBases; MoveAtEnd) ou _AUTOBASE(Q01; ShowBases; MoveAtEnd) **Nom ** **Type ** Description Remarque 1 ShowBases Bool\u00e9en Par d\u00e9faut, n'affiche pas les bases calcul\u00e9es, si TRUE affiche les bases FALSE par d\u00e9faut 2 MoveAtEnd Bool\u00e9en Par d\u00e9faut, les bases sont en premi\u00e8res positions, si TRUE les bases sont en derni\u00e8res modalit\u00e9s FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/AUTOBASE1/#remarques","text":"Il n'est pas rare de trouver la fonction AUTOBASE dans la cr\u00e9ation de crit\u00e8res et en compl\u00e9ment de la fonction ORDMOD. Entre en interaction avec les options des test statistiques","title":"Remarques :"},{"location":"Fonctions/AUTOBASE1/#exemples","text":"S1.AUTOBASE() S1.AUTOBASE(TRUE; TRUE) Voir aussi : Crit\u00e8res","title":"Exemples :"},{"location":"Fonctions/BANNER/","text":"BANNER Fonction BANNER La fonction BANNER permet de regrouper plusieurs crit\u00e8res pour constituer une banni\u00e8re (groupement de plusieurs variables). C'est une version plus \u00e9volu\u00e9e de JUXVAR. Syntaxe : _BANNER(Source;PropertyMask) **Nom ** **Type ** Description Remarque 1 Source S\u00e9lection de variables liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire 2 PropertyMask Cha\u00eene de caract\u00e8res Un ou plusieurs caract\u00e8res (les options peuvent se cumuler) A : ajoute la base totale sur chaque source N : ajoute la base sans-r\u00e9ponse sur chaque source B : ajoute un AUTOBASE global (inutile si A est sp\u00e9cifi\u00e9) O : ajoute un ORDMOD(1) sur chaque source Q : supprime la partie num\u00e9rique de chaque source Exemples : _BANNER(S1; S3) La variable r\u00e9sultante est, et pour chaque variable la suppression des modalit\u00e9s num\u00e9riques, passsage de l'ordonnateur \u00e0 1 et ajout de la base r\u00e9pondants en 1e modalit\u00e9s, la concat\u00e9nation de S1 et S3. _BANNER(S1; S3;\"O\") La variable r\u00e9sultante est la concat\u00e9nation de S1 et S3 apr\u00e8s passage des ordonnateurs \u00e0 1. Remarques : La d\u00e9finition _BANNER(S1; S3) est \u00e9quivalente \u00e0 _BANNER(S1; S3; \"AOQ\") Voir aussi : JUXVAR","title":"BANNER"},{"location":"Fonctions/BANNER/#banner","text":"","title":"BANNER"},{"location":"Fonctions/BANNER/#fonction-banner","text":"La fonction BANNER permet de regrouper plusieurs crit\u00e8res pour constituer une banni\u00e8re (groupement de plusieurs variables). C'est une version plus \u00e9volu\u00e9e de JUXVAR.","title":"Fonction BANNER"},{"location":"Fonctions/BANNER/#syntaxe","text":"_BANNER(Source;PropertyMask) **Nom ** **Type ** Description Remarque 1 Source S\u00e9lection de variables liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire 2 PropertyMask Cha\u00eene de caract\u00e8res Un ou plusieurs caract\u00e8res (les options peuvent se cumuler) A : ajoute la base totale sur chaque source N : ajoute la base sans-r\u00e9ponse sur chaque source B : ajoute un AUTOBASE global (inutile si A est sp\u00e9cifi\u00e9) O : ajoute un ORDMOD(1) sur chaque source Q : supprime la partie num\u00e9rique de chaque source","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/BANNER/#exemples","text":"_BANNER(S1; S3) La variable r\u00e9sultante est, et pour chaque variable la suppression des modalit\u00e9s num\u00e9riques, passsage de l'ordonnateur \u00e0 1 et ajout de la base r\u00e9pondants en 1e modalit\u00e9s, la concat\u00e9nation de S1 et S3. _BANNER(S1; S3;\"O\") La variable r\u00e9sultante est la concat\u00e9nation de S1 et S3 apr\u00e8s passage des ordonnateurs \u00e0 1.","title":"Exemples :"},{"location":"Fonctions/BANNER/#remarques","text":"La d\u00e9finition _BANNER(S1; S3) est \u00e9quivalente \u00e0 _BANNER(S1; S3; \"AOQ\") Voir aussi : JUXVAR","title":"Remarques :"},{"location":"Fonctions/BASE2/","text":"BASE Fonction BASE La fonction BASE filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable en lui appliquant des conditions de validit\u00e9 et ajoute une modalit\u00e9 constitu\u00e9e par les individus restant en sans-r\u00e9ponse apr\u00e8s application du filtre. Permettant ainsi de faire la diff\u00e9rence entre les individus non concern\u00e9es et les sans-r\u00e9ponse. Syntaxe : Q01.BASE(Filter; Text) ou _BASE(Q01; Filter; Text) **Nom ** **Type ** Description Remarque 1 Filter Univers Univers d'application Obligatoire 2 Text Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser pr\u00e9c\u00e9d\u00e9 de @code si on souhaite imposer un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !) Exemples : S4.BASE(S3.SELMOD(1); \"@99 les vrais SR\") La variable obtenue est en tous points similaire \u00e0 la variable S4. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S3.SELMOD(1) et la modalit\u00e9 des sans-r\u00e9ponse restant est ajout\u00e9e avec le libell\u00e9 \"les vrais SR\" et se voit affect\u00e9 le code 99. Remarques : Elle est l'\u00e9quivalent de la d\u00e9finition : S4.NORESP(99; \"les vrais SR\").FLT(S3.SELMOD(1)) La fonction BASE() s'applique aux variables de type logique, continue ou litt\u00e9rale. Voir aussi : Univers de variables Combiner les variables","title":"BASE"},{"location":"Fonctions/BASE2/#base","text":"","title":"BASE"},{"location":"Fonctions/BASE2/#fonction-base","text":"La fonction BASE filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable en lui appliquant des conditions de validit\u00e9 et ajoute une modalit\u00e9 constitu\u00e9e par les individus restant en sans-r\u00e9ponse apr\u00e8s application du filtre. Permettant ainsi de faire la diff\u00e9rence entre les individus non concern\u00e9es et les sans-r\u00e9ponse.","title":"Fonction BASE"},{"location":"Fonctions/BASE2/#syntaxe","text":"Q01.BASE(Filter; Text) ou _BASE(Q01; Filter; Text) **Nom ** **Type ** Description Remarque 1 Filter Univers Univers d'application Obligatoire 2 Text Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser pr\u00e9c\u00e9d\u00e9 de @code si on souhaite imposer un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/BASE2/#exemples","text":"S4.BASE(S3.SELMOD(1); \"@99 les vrais SR\") La variable obtenue est en tous points similaire \u00e0 la variable S4. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S3.SELMOD(1) et la modalit\u00e9 des sans-r\u00e9ponse restant est ajout\u00e9e avec le libell\u00e9 \"les vrais SR\" et se voit affect\u00e9 le code 99.","title":"Exemples :"},{"location":"Fonctions/BASE2/#remarques","text":"Elle est l'\u00e9quivalent de la d\u00e9finition : S4.NORESP(99; \"les vrais SR\").FLT(S3.SELMOD(1)) La fonction BASE() s'applique aux variables de type logique, continue ou litt\u00e9rale. Voir aussi : Univers de variables Combiner les variables","title":"Remarques :"},{"location":"Fonctions/BREAKCOL1/","text":"BREAKCOL Fonction BREAKCOL La fonction BREAKCOL d\u00e9finit des saut de pages ou des espacements sur la dimension colonne de la variable trait\u00e9e. Syntaxe : Q01.BREAKCOL(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKCOL(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut Exemples : S1.BREAKMOD(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant le 3\u00e8me \u00e9l\u00e9ment de la dimension colonne, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"BREAKCOL"},{"location":"Fonctions/BREAKCOL1/#breakcol","text":"","title":"BREAKCOL"},{"location":"Fonctions/BREAKCOL1/#fonction-breakcol","text":"La fonction BREAKCOL d\u00e9finit des saut de pages ou des espacements sur la dimension colonne de la variable trait\u00e9e.","title":"Fonction BREAKCOL"},{"location":"Fonctions/BREAKCOL1/#syntaxe","text":"Q01.BREAKCOL(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKCOL(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/BREAKCOL1/#exemples","text":"S1.BREAKMOD(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant le 3\u00e8me \u00e9l\u00e9ment de la dimension colonne, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/BREAKMOD1/","text":"BREAKMOD Fonction BREAKMOD La fonction BREAKMOD d\u00e9finit des saut de pages ou des espacements sur les modalit\u00e9s de la variable trait\u00e9e. Syntaxe : Q01.BREAKMOD(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKMOD(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut Exemples : S1.BREAKMOD(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant la 3\u00e8me modalit\u00e9, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"BREAKMOD"},{"location":"Fonctions/BREAKMOD1/#breakmod","text":"","title":"BREAKMOD"},{"location":"Fonctions/BREAKMOD1/#fonction-breakmod","text":"La fonction BREAKMOD d\u00e9finit des saut de pages ou des espacements sur les modalit\u00e9s de la variable trait\u00e9e.","title":"Fonction BREAKMOD"},{"location":"Fonctions/BREAKMOD1/#syntaxe","text":"Q01.BREAKMOD(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKMOD(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/BREAKMOD1/#exemples","text":"S1.BREAKMOD(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant la 3\u00e8me modalit\u00e9, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/BREAKROW1/","text":"BREAKROW Fonction BREAKROW La fonction BREAKROW d\u00e9finit des saut de pages ou des espacements sur la dimension colonne de la variable trait\u00e9e. Syntaxe : Q01.BREAKROW(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKROW(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut Exemples : S1.BREAKROW(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant le 3\u00e8me \u00e9l\u00e9ment de la dimension ligne, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"BREAKROW"},{"location":"Fonctions/BREAKROW1/#breakrow","text":"","title":"BREAKROW"},{"location":"Fonctions/BREAKROW1/#fonction-breakrow","text":"La fonction BREAKROW d\u00e9finit des saut de pages ou des espacements sur la dimension colonne de la variable trait\u00e9e.","title":"Fonction BREAKROW"},{"location":"Fonctions/BREAKROW1/#syntaxe","text":"Q01.BREAKROW(Selection; Value; BreakBefore; SpaceBreak) ou _BREAKROW(Q01; Selection; Value; BreakBefore; SpaceBreak) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Positions des \u00e9l\u00e9ments \u00e0 modifier Obligatoire 2 Value Bool\u00e9en Par d\u00e9faut, ajoute le saut de page. TRUE par d\u00e9faut 3 BreakBefore Bool\u00e9en Par d\u00e9faut, le saut est avant la s\u00e9lection TRUE par d\u00e9faut 4 SpaceBreak Bool\u00e9en TRUE : remplace de saut de page par un espacement FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/BREAKROW1/#exemples","text":"S1.BREAKROW(3; TRUE; TRUE; TRUE) Cr\u00e9e un espacement devant le 3\u00e8me \u00e9l\u00e9ment de la dimension ligne, visible dans les tableaux. Voir aussi : Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/CALC/","text":"CALC Fonction CALC Associ\u00e9e \u00e0 MOD(), la fonction CAL permet d'associer un calcul \u00e0 une s\u00e9lection de modalit\u00e9. Syntaxe : Q01.MOD($M.CAL(\"EFF\")) Demande l'affichage de l'effectif pond\u00e9r\u00e9 pour toutes les modalit\u00e9s. Q01.MOD($L; 1.CAL(\"PV\")) D\u00e9place la premi\u00e8re modalit\u00e9 en derni\u00e8re position et en demande l'affichage du pourcentage vertical. Voir aussi : La liste des calculs","title":"CALC"},{"location":"Fonctions/CALC/#calc","text":"","title":"CALC"},{"location":"Fonctions/CALC/#fonction-calc","text":"Associ\u00e9e \u00e0 MOD(), la fonction CAL permet d'associer un calcul \u00e0 une s\u00e9lection de modalit\u00e9.","title":"Fonction CALC"},{"location":"Fonctions/CALC/#syntaxe","text":"Q01.MOD($M.CAL(\"EFF\")) Demande l'affichage de l'effectif pond\u00e9r\u00e9 pour toutes les modalit\u00e9s. Q01.MOD($L; 1.CAL(\"PV\")) D\u00e9place la premi\u00e8re modalit\u00e9 en derni\u00e8re position et en demande l'affichage du pourcentage vertical.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALC/#_1","text":"Voir aussi : La liste des calculs","title":"&nbsp;"},{"location":"Fonctions/CALCABS2/","text":"CALCABS Fonction CALCABS La fonction CALCABS cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la valeur absolue de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. La valeur absolue d'un nombre est le nombre sans son signe. Syntaxe : Q01.CALCABS() ou _CALCABS(Q01) Remarques : L'ancienne syntaxe _ABS(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Exemples : _CALCABS(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la variable num\u00e9rique NOTE sans son signe. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCABS"},{"location":"Fonctions/CALCABS2/#calcabs","text":"","title":"CALCABS"},{"location":"Fonctions/CALCABS2/#fonction-calcabs","text":"La fonction CALCABS cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la valeur absolue de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. La valeur absolue d'un nombre est le nombre sans son signe.","title":"Fonction CALCABS"},{"location":"Fonctions/CALCABS2/#syntaxe","text":"Q01.CALCABS() ou _CALCABS(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCABS2/#remarques","text":"L'ancienne syntaxe _ABS(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9.","title":"Remarques :"},{"location":"Fonctions/CALCABS2/#exemples","text":"_CALCABS(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la variable num\u00e9rique NOTE sans son signe. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCDECILE1/","text":"CALCDECILE Fonction CALCDECILE La fonction CALCDECILE cr\u00e9e une variable num\u00e9rique constante correspondant au d\u00e9cile de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le d\u00e9cile, 1 par d\u00e9faut. Syntaxe : Q01.CALCDECILE(Decile; Weight) ou _CALCDECILE(Q01; Decile; Weight) **Nom ** **Type ** Description Remarque 1 Decile Entier num\u00e9ro du d\u00e9cile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Exemples : _CALCDECILE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier d\u00e9cile de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCDECILE"},{"location":"Fonctions/CALCDECILE1/#calcdecile","text":"","title":"CALCDECILE"},{"location":"Fonctions/CALCDECILE1/#fonction-calcdecile","text":"La fonction CALCDECILE cr\u00e9e une variable num\u00e9rique constante correspondant au d\u00e9cile de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le d\u00e9cile, 1 par d\u00e9faut.","title":"Fonction CALCDECILE"},{"location":"Fonctions/CALCDECILE1/#syntaxe","text":"Q01.CALCDECILE(Decile; Weight) ou _CALCDECILE(Q01; Decile; Weight) **Nom ** **Type ** Description Remarque 1 Decile Entier num\u00e9ro du d\u00e9cile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCDECILE1/#exemples","text":"_CALCDECILE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier d\u00e9cile de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCINT1/","text":"CALCINT Fonction CALCINT La fonction CALCINT cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la partie enti\u00e8re de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCINT() ou _CALCINT(Q01) Cette fonction n'a pas d'argument. Remarques : L'ancienne syntaxe _INT(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Exemples : _CALCINT(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la partie enti\u00e8re de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCINT"},{"location":"Fonctions/CALCINT1/#calcint","text":"","title":"CALCINT"},{"location":"Fonctions/CALCINT1/#fonction-calcint","text":"La fonction CALCINT cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la partie enti\u00e8re de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCINT"},{"location":"Fonctions/CALCINT1/#syntaxe","text":"Q01.CALCINT() ou _CALCINT(Q01) Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCINT1/#remarques","text":"L'ancienne syntaxe _INT(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9.","title":"Remarques :"},{"location":"Fonctions/CALCINT1/#exemples","text":"_CALCINT(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la partie enti\u00e8re de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCMAX1/","text":"CALCMAX Fonction CALCMAX La fonction CALCMAX cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la valeur maximum de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCMAX() ou _CALCMAX(Q01) \\ Cette fonction n'a pas d'argument. Exemples : _CALCMAX(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur maximum de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCMAX"},{"location":"Fonctions/CALCMAX1/#calcmax","text":"","title":"CALCMAX"},{"location":"Fonctions/CALCMAX1/#fonction-calcmax","text":"La fonction CALCMAX cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la valeur maximum de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCMAX"},{"location":"Fonctions/CALCMAX1/#syntaxe","text":"Q01.CALCMAX() ou _CALCMAX(Q01) \\ Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCMAX1/#exemples","text":"_CALCMAX(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur maximum de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCMEAN1/","text":"CALCMEAN Fonction CALCMEAN La fonction CALCMEAN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la moyenne de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCMEAN(Weight) ou _CALCMEAN(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Remarques : Ne pas confondre avec la fonction MEAN qui calcule la moyenne entre plusieurs variables. Exemples : _CALCMEAN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la moyenne de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCMEAN"},{"location":"Fonctions/CALCMEAN1/#calcmean","text":"","title":"CALCMEAN"},{"location":"Fonctions/CALCMEAN1/#fonction-calcmean","text":"La fonction CALCMEAN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la moyenne de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCMEAN"},{"location":"Fonctions/CALCMEAN1/#syntaxe","text":"Q01.CALCMEAN(Weight) ou _CALCMEAN(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCMEAN1/#remarques","text":"Ne pas confondre avec la fonction MEAN qui calcule la moyenne entre plusieurs variables.","title":"Remarques :"},{"location":"Fonctions/CALCMEAN1/#exemples","text":"_CALCMEAN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la moyenne de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCMEDIAN1/","text":"CALCMEDIAN Fonction CALCMEDIAN La fonction CALCMEDIAN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la m\u00e9diane de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCMEDIAN(Weight) ou _CALCMEDIAN(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer NUL par d\u00e9faut Exemples : _CALCMEDIAN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur de la m\u00e9diane de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCMEDIAN"},{"location":"Fonctions/CALCMEDIAN1/#calcmedian","text":"","title":"CALCMEDIAN"},{"location":"Fonctions/CALCMEDIAN1/#fonction-calcmedian","text":"La fonction CALCMEDIAN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la m\u00e9diane de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCMEDIAN"},{"location":"Fonctions/CALCMEDIAN1/#syntaxe","text":"Q01.CALCMEDIAN(Weight) ou _CALCMEDIAN(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCMEDIAN1/#exemples","text":"_CALCMEDIAN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur de la m\u00e9diane de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCMIN1/","text":"CALCMIN Fonction CALCMIN La fonction CALCMIN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la valeur minimum de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCMIN() ou _CALCMIN(Q01) Cette fonction n'a pas d'argument. Exemples : _CALCMIN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur minimum de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCMIN"},{"location":"Fonctions/CALCMIN1/#calcmin","text":"","title":"CALCMIN"},{"location":"Fonctions/CALCMIN1/#fonction-calcmin","text":"La fonction CALCMIN cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la valeur minimum de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCMIN"},{"location":"Fonctions/CALCMIN1/#syntaxe","text":"Q01.CALCMIN() ou _CALCMIN(Q01) Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCMIN1/#exemples","text":"_CALCMIN(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur minimum de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCMOD/","text":"CALCMOD Fonction CALCMOD La fonction CALCMOD cr\u00e9e une variable num\u00e9rique constante correspondant au modulo de la de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Le modulo est le reste de la division enti\u00e8re. Syntaxe : Q01.CALCMOD(10) ou _CALCMOD(Q01;10) **Nom ** **Type ** Description Remarque 1 Diviseur Entier Diviseur Obligatoire Exemples : _CALCMOD(Q2;10) Cr\u00e9e une nouvelle variable correspondant au reste de la division par 10 de chacune des valeurs de la valeur minimum de la variable num\u00e9rique Q2. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCMOD"},{"location":"Fonctions/CALCMOD/#calcmod","text":"","title":"CALCMOD"},{"location":"Fonctions/CALCMOD/#fonction-calcmod","text":"La fonction CALCMOD cr\u00e9e une variable num\u00e9rique constante correspondant au modulo de la de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Le modulo est le reste de la division enti\u00e8re.","title":"Fonction CALCMOD"},{"location":"Fonctions/CALCMOD/#syntaxe","text":"Q01.CALCMOD(10) ou _CALCMOD(Q01;10) **Nom ** **Type ** Description Remarque 1 Diviseur Entier Diviseur Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCMOD/#exemples","text":"_CALCMOD(Q2;10) Cr\u00e9e une nouvelle variable correspondant au reste de la division par 10 de chacune des valeurs de la valeur minimum de la variable num\u00e9rique Q2. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCPERCENTILE1/","text":"CALCPERCENTILE Fonction CALCPERCENTILE La fonction CALCPERCENTILE cr\u00e9e une variable num\u00e9rique constante correspondant au percentile (ou centile) de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le percentile, 1 par d\u00e9faut. Syntaxe : Q01.CALCPERCENTILE(Percentile; Weight) ou _CALCPERCENTILE(Q01; Percentile; Weight) **Nom ** **Type ** Description Remarque 1 Percentile Entier Percentile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Exemples : _CALCPERCENTILE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier percentile de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCPERCENTILE"},{"location":"Fonctions/CALCPERCENTILE1/#calcpercentile","text":"","title":"CALCPERCENTILE"},{"location":"Fonctions/CALCPERCENTILE1/#fonction-calcpercentile","text":"La fonction CALCPERCENTILE cr\u00e9e une variable num\u00e9rique constante correspondant au percentile (ou centile) de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le percentile, 1 par d\u00e9faut.","title":"Fonction CALCPERCENTILE"},{"location":"Fonctions/CALCPERCENTILE1/#syntaxe","text":"Q01.CALCPERCENTILE(Percentile; Weight) ou _CALCPERCENTILE(Q01; Percentile; Weight) **Nom ** **Type ** Description Remarque 1 Percentile Entier Percentile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCPERCENTILE1/#exemples","text":"_CALCPERCENTILE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier percentile de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCPOW1/","text":"CALCPOW Fonction CALCPOW La fonction CALCPOW cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la puissance de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCPOW(2) ou _CALCPOW(Q01;2) **Nom ** **Type ** Description Remarque 1 Variable Variable variable continue obligatoire 2 Pow Value Puissance \u00e0 appliquer obligatoire Exemples : _CALCPOW(NOTE;0.5) Cr\u00e9e une nouvelle variable correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCPOW"},{"location":"Fonctions/CALCPOW1/#calcpow","text":"","title":"CALCPOW"},{"location":"Fonctions/CALCPOW1/#fonction-calcpow","text":"La fonction CALCPOW cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la puissance de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCPOW"},{"location":"Fonctions/CALCPOW1/#syntaxe","text":"Q01.CALCPOW(2) ou _CALCPOW(Q01;2) **Nom ** **Type ** Description Remarque 1 Variable Variable variable continue obligatoire 2 Pow Value Puissance \u00e0 appliquer obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCPOW1/#exemples","text":"_CALCPOW(NOTE;0.5) Cr\u00e9e une nouvelle variable correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCQUARTILE1/","text":"CALCQUARTILE Fonction CALCQUARTILE La fonction CALCQUARTILE cr\u00e9e une variable num\u00e9rique constante correspondant au quartile de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le quartile, 1 par d\u00e9faut et le troisi\u00e8me param\u00e8tre permet de choisir une pond\u00e9ration \u00e0 appliquer. Syntaxe : Q01.CALCQUARTILE(Quartile; Weight) ou _CALCQUARTILE(Q01; Quartile; Weight) **Nom ** **Type ** Description Remarque 1 Quartile Entier Quartile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Exemples : _CALCQUARTILE(NOTE;1) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier quartile de la variable num\u00e9rique NOTE, sans pond\u00e9ration. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCQUARTILE"},{"location":"Fonctions/CALCQUARTILE1/#calcquartile","text":"","title":"CALCQUARTILE"},{"location":"Fonctions/CALCQUARTILE1/#fonction-calcquartile","text":"La fonction CALCQUARTILE cr\u00e9e une variable num\u00e9rique constante correspondant au quartile de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir le quartile, 1 par d\u00e9faut et le troisi\u00e8me param\u00e8tre permet de choisir une pond\u00e9ration \u00e0 appliquer.","title":"Fonction CALCQUARTILE"},{"location":"Fonctions/CALCQUARTILE1/#syntaxe","text":"Q01.CALCQUARTILE(Quartile; Weight) ou _CALCQUARTILE(Q01; Quartile; Weight) **Nom ** **Type ** Description Remarque 1 Quartile Entier Quartile s\u00e9lectionn\u00e9, par d\u00e9faut 1 1 par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCQUARTILE1/#exemples","text":"_CALCQUARTILE(NOTE;1) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur du premier quartile de la variable num\u00e9rique NOTE, sans pond\u00e9ration. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCROUND1/","text":"CALCROUND Fonction CALCROUND La fonction CALCROUND cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la valeur arrondie de la variable num\u00e9rique plac\u00e9e en argument avec le nombre de d\u00e9cimales en param\u00e8tre. Syntaxe : Q01.CALCROUND(Decimals) ou _CALCROUND(Q01; Decimals) **Nom ** **Type ** Description Remarque Decimals Entier Nombre de d\u00e9cimales conserv\u00e9es, 0 par d\u00e9faut 0 par d\u00e9faut Exemples : IMC.CALCROUND() Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur arrondie \u00e0 0 d\u00e9cimale de la variable num\u00e9rique IMC. IMC.CALCROUND(4) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur arrondie \u00e0 4 d\u00e9cimales de la variable num\u00e9rique IMC. Remarque : La fonction CALCROUND() suit la logique d'Excel (AwayFromZero). Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCROUND"},{"location":"Fonctions/CALCROUND1/#calcround","text":"","title":"CALCROUND"},{"location":"Fonctions/CALCROUND1/#fonction-calcround","text":"La fonction CALCROUND cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la valeur arrondie de la variable num\u00e9rique plac\u00e9e en argument avec le nombre de d\u00e9cimales en param\u00e8tre.","title":"Fonction CALCROUND"},{"location":"Fonctions/CALCROUND1/#syntaxe","text":"Q01.CALCROUND(Decimals) ou _CALCROUND(Q01; Decimals) **Nom ** **Type ** Description Remarque Decimals Entier Nombre de d\u00e9cimales conserv\u00e9es, 0 par d\u00e9faut 0 par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCROUND1/#exemples","text":"IMC.CALCROUND() Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur arrondie \u00e0 0 d\u00e9cimale de la variable num\u00e9rique IMC. IMC.CALCROUND(4) Cr\u00e9e une nouvelle variable correspondant \u00e0 la valeur arrondie \u00e0 4 d\u00e9cimales de la variable num\u00e9rique IMC.","title":"Exemples :"},{"location":"Fonctions/CALCROUND1/#remarque","text":"La fonction CALCROUND() suit la logique d'Excel (AwayFromZero). Voir aussi : Manipuler les variables num\u00e9riques","title":"Remarque :"},{"location":"Fonctions/CALCSQRT1/","text":"CALCSQRT Fonction CALCSQRT La fonction CALCSQRT cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCSQRT() ou _CALCSQRT(Q01) \\ Cette fonction n'a pas d'argument. Exemples : _CALCSQRT(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique NOTE. L'ancienne syntaxe _SQRT(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCSQRT"},{"location":"Fonctions/CALCSQRT1/#calcsqrt","text":"","title":"CALCSQRT"},{"location":"Fonctions/CALCSQRT1/#fonction-calcsqrt","text":"La fonction CALCSQRT cr\u00e9e une variable num\u00e9rique correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCSQRT"},{"location":"Fonctions/CALCSQRT1/#syntaxe","text":"Q01.CALCSQRT() ou _CALCSQRT(Q01) \\ Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCSQRT1/#exemples","text":"_CALCSQRT(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la racine carr\u00e9e de la variable num\u00e9rique NOTE. L'ancienne syntaxe _SQRT(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCSQUARE1/","text":"CALCSQUARE Fonction CALCSQUARE La fonction CALCSQUARE cr\u00e9e une variable num\u00e9rique correspondant au carr\u00e9 de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCSQUARE() ou _CALCSQUARE(Q01) \\ Cette fonction n'a pas d'argument. Exemples : _CALCSQUARE(NOTE) Cr\u00e9e une nouvelle variable correspondant au carr\u00e9 de la variable num\u00e9rique NOTE. L'ancienne syntaxe _SQUARE(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCSQUARE"},{"location":"Fonctions/CALCSQUARE1/#calcsquare","text":"","title":"CALCSQUARE"},{"location":"Fonctions/CALCSQUARE1/#fonction-calcsquare","text":"La fonction CALCSQUARE cr\u00e9e une variable num\u00e9rique correspondant au carr\u00e9 de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCSQUARE"},{"location":"Fonctions/CALCSQUARE1/#syntaxe","text":"Q01.CALCSQUARE() ou _CALCSQUARE(Q01) \\ Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCSQUARE1/#exemples","text":"_CALCSQUARE(NOTE) Cr\u00e9e une nouvelle variable correspondant au carr\u00e9 de la variable num\u00e9rique NOTE. L'ancienne syntaxe _SQUARE(NOTE) existe toujours pour des raisons de r\u00e9trocompatibilit\u00e9. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCSTDEV1/","text":"CALCSTDEV Fonction CALCSTDEV La fonction CALCSTDEV cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 l'\u00e9cart-type de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir entre l'\u00e9cart-type standard (False) ou l'\u00e9cart-type estim\u00e9e (True). Le param\u00e8tre par d\u00e9faut \u00e9tant False. _CALCSTDEV(varq;False) Syntaxe : Q01.CALCSTDEV(UseEstimatedCalculation; Weight) ou _CALCSTDEV(Q01; UseEstimatedCalculation; Weight) **Nom ** **Type ** Description Remarque 1 UseEstimatedCalculation Bool\u00e9en Par d\u00e9faut calcule l'\u00e9cart-type (divis\u00e9 par N) FALSE par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Exemples : _CALCSTDEV(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 l'\u00e9cart-type standard de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCSTDEV"},{"location":"Fonctions/CALCSTDEV1/#calcstdev","text":"","title":"CALCSTDEV"},{"location":"Fonctions/CALCSTDEV1/#fonction-calcstdev","text":"La fonction CALCSTDEV cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 l'\u00e9cart-type de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir entre l'\u00e9cart-type standard (False) ou l'\u00e9cart-type estim\u00e9e (True). Le param\u00e8tre par d\u00e9faut \u00e9tant False. _CALCSTDEV(varq;False)","title":"Fonction CALCSTDEV"},{"location":"Fonctions/CALCSTDEV1/#syntaxe","text":"Q01.CALCSTDEV(UseEstimatedCalculation; Weight) ou _CALCSTDEV(Q01; UseEstimatedCalculation; Weight) **Nom ** **Type ** Description Remarque 1 UseEstimatedCalculation Bool\u00e9en Par d\u00e9faut calcule l'\u00e9cart-type (divis\u00e9 par N) FALSE par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCSTDEV1/#exemples","text":"_CALCSTDEV(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 l'\u00e9cart-type standard de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCSUM1/","text":"CALCSUM Fonction CALCSUM La fonction CALCSUM cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la somme des valeurs de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre. Syntaxe : Q01.CALCSUM() ou _CALCSUM(Q01) \\ Cette fonction n'a pas d'argument. Exemples : _CALCSUM(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la somme des valeurs de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCSUM"},{"location":"Fonctions/CALCSUM1/#calcsum","text":"","title":"CALCSUM"},{"location":"Fonctions/CALCSUM1/#fonction-calcsum","text":"La fonction CALCSUM cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la somme des valeurs de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre.","title":"Fonction CALCSUM"},{"location":"Fonctions/CALCSUM1/#syntaxe","text":"Q01.CALCSUM() ou _CALCSUM(Q01) \\ Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCSUM1/#exemples","text":"_CALCSUM(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la somme des valeurs de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CALCVARIANCE1/","text":"CALCVARIANCE Fonction CALCVARIANCE La fonction CALCVARIANCE cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la variance de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir entre la variance standard (False) ou la variance estim\u00e9e (True). Le param\u00e8tre par d\u00e9faut \u00e9tant False. Syntaxe : Q01.CALCVARIANCE(UseEstimatedCalculation; Weight) ou _CALCVARIANCE(Q01; UseEstimatedCalculation; Weight) **Nom ** **Type ** Description Remarque 1 UseEstimatedCalculation Bool\u00e9en Par d\u00e9faut calcule la variance (divis\u00e9e par N) FALSE par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut Exemples : _CALCVARIANCE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la variance standard de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"CALCVARIANCE"},{"location":"Fonctions/CALCVARIANCE1/#calcvariance","text":"","title":"CALCVARIANCE"},{"location":"Fonctions/CALCVARIANCE1/#fonction-calcvariance","text":"La fonction CALCVARIANCE cr\u00e9e une variable num\u00e9rique constante correspondant \u00e0 la variance de la variable num\u00e9rique indiqu\u00e9e en param\u00e8tre, le second param\u00e8tre permet de choisir entre la variance standard (False) ou la variance estim\u00e9e (True). Le param\u00e8tre par d\u00e9faut \u00e9tant False.","title":"Fonction CALCVARIANCE"},{"location":"Fonctions/CALCVARIANCE1/#syntaxe","text":"Q01.CALCVARIANCE(UseEstimatedCalculation; Weight) ou _CALCVARIANCE(Q01; UseEstimatedCalculation; Weight) **Nom ** **Type ** Description Remarque 1 UseEstimatedCalculation Bool\u00e9en Par d\u00e9faut calcule la variance (divis\u00e9e par N) FALSE par d\u00e9faut 2 Weight Variable Pond\u00e9ration \u00e0 appliquer vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CALCVARIANCE1/#exemples","text":"_CALCVARIANCE(NOTE) Cr\u00e9e une nouvelle variable correspondant \u00e0 la variance standard de la variable num\u00e9rique NOTE. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CAPITALIZE1/","text":"CAPITALIZE Fonction CAPITALIZE La fonction CAPITALIZE modifie la casse des r\u00e9ponses \u00e0 une variable litt\u00e9rale de fa\u00e7on \u00e0 ce que chaque mot d\u00e9bute par une majuscule, suivi de minuscules Syntaxe : Q01.CAPITALIZE() ou _CAPITALIZE(Q01) S'applique \u00e0 une variable litt\u00e9rale. Voir aussi : Traiter les variables litt\u00e9rales","title":"CAPITALIZE"},{"location":"Fonctions/CAPITALIZE1/#capitalize","text":"","title":"CAPITALIZE"},{"location":"Fonctions/CAPITALIZE1/#fonction-capitalize","text":"La fonction CAPITALIZE modifie la casse des r\u00e9ponses \u00e0 une variable litt\u00e9rale de fa\u00e7on \u00e0 ce que chaque mot d\u00e9bute par une majuscule, suivi de minuscules","title":"Fonction CAPITALIZE"},{"location":"Fonctions/CAPITALIZE1/#syntaxe","text":"Q01.CAPITALIZE() ou _CAPITALIZE(Q01) S'applique \u00e0 une variable litt\u00e9rale. Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CATMOD1/","text":"CATMOD Fonction CATMOD La fonction CATMOD applique une table de regroupement externe \u00e0 une variable. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. Cette fonction joue un r\u00f4le particulier car elle permet de r\u00e9aliser les op\u00e9rations de regroupement hi\u00e9rarchique sur les modalit\u00e9s, lignes ou colonnes par analyse du contenu de la table externe, au format Excel. La d\u00e9finition est ainsi ind\u00e9pendante des \u00e9tudes et peut \u00eatre utilis\u00e9e dans des vagues successives, avec des mises \u00e0 jour qui seront prises en compte automatiquement en cas d'absence de stockage de la variable. Le r\u00e9sultat est toujours une variable logique, multi-r\u00e9ponses ou discr\u00e8te. La variable trait\u00e9e est logique. Syntaxe : Q01.CATMOD(TableExpression; Field1; Field2) ou _CATMOD(Q01; TableExpression; ; Field1; Field2) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Field1 Cha\u00eene de caract\u00e8res Nom de la colonne en entr\u00e9e Obligatoire 3 Field2 Cha\u00eene de caract\u00e8res Nom de la colonne de sortie Obligatoire Exemples : Soit Q1, une variable logique avec les modalit\u00e9s qui repr\u00e9sentent des villes du monde (ex:Paris, Lyon, Beijing...). Les colonnes de la table (GEO.xlsx, onglet PAYS) lue suivent une structure du type : VILLE PAYS REGION Paris France Europe Lyon France Europe Rome Italie Europe Alexandrie Egypte Afrique Beijing Chine Asie Q1.CATMOD(\"GEO.XLSX!PAYS\";\"VILLE\";\"PAYS\") Le r\u00e9sultat est une variable logiques avec 4 modalit\u00e9s Chine, Egypte, France, Italie qui sont les regroupement des modalit\u00e9s Paris + Lyon pour France, Rome pour Italie, Egypte pour Alexandrie et Chine pour Beijing. Sur le m\u00eame exemple la d\u00e9finition Q1.CATMOD(\"GEO.XLSX!PAYS\";\"VILLE\";\"REGION\")donne une variable avec les modalit\u00e9s Afrique, Asie et Europe.","title":"CATMOD"},{"location":"Fonctions/CATMOD1/#catmod","text":"","title":"CATMOD"},{"location":"Fonctions/CATMOD1/#fonction-catmod","text":"La fonction CATMOD applique une table de regroupement externe \u00e0 une variable. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. Cette fonction joue un r\u00f4le particulier car elle permet de r\u00e9aliser les op\u00e9rations de regroupement hi\u00e9rarchique sur les modalit\u00e9s, lignes ou colonnes par analyse du contenu de la table externe, au format Excel. La d\u00e9finition est ainsi ind\u00e9pendante des \u00e9tudes et peut \u00eatre utilis\u00e9e dans des vagues successives, avec des mises \u00e0 jour qui seront prises en compte automatiquement en cas d'absence de stockage de la variable. Le r\u00e9sultat est toujours une variable logique, multi-r\u00e9ponses ou discr\u00e8te. La variable trait\u00e9e est logique.","title":"Fonction CATMOD"},{"location":"Fonctions/CATMOD1/#syntaxe","text":"Q01.CATMOD(TableExpression; Field1; Field2) ou _CATMOD(Q01; TableExpression; ; Field1; Field2) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Field1 Cha\u00eene de caract\u00e8res Nom de la colonne en entr\u00e9e Obligatoire 3 Field2 Cha\u00eene de caract\u00e8res Nom de la colonne de sortie Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CATMOD1/#exemples","text":"Soit Q1, une variable logique avec les modalit\u00e9s qui repr\u00e9sentent des villes du monde (ex:Paris, Lyon, Beijing...). Les colonnes de la table (GEO.xlsx, onglet PAYS) lue suivent une structure du type : VILLE PAYS REGION Paris France Europe Lyon France Europe Rome Italie Europe Alexandrie Egypte Afrique Beijing Chine Asie Q1.CATMOD(\"GEO.XLSX!PAYS\";\"VILLE\";\"PAYS\") Le r\u00e9sultat est une variable logiques avec 4 modalit\u00e9s Chine, Egypte, France, Italie qui sont les regroupement des modalit\u00e9s Paris + Lyon pour France, Rome pour Italie, Egypte pour Alexandrie et Chine pour Beijing. Sur le m\u00eame exemple la d\u00e9finition Q1.CATMOD(\"GEO.XLSX!PAYS\";\"VILLE\";\"REGION\")donne une variable avec les modalit\u00e9s Afrique, Asie et Europe.","title":"Exemples :"},{"location":"Fonctions/CHGLEV1/","text":"CHGLEV Fonction CHGLEV La fonction CHGLEV change la variable de niveau de r\u00e9ponse (foyer vers individus et vice versa). La variable obtenue est donc sur le niveau sp\u00e9cifi\u00e9 en premier argument. L'op\u00e9rateur de r\u00e9duction appliqu\u00e9 lors du changement de niveau peut \u00eatre indiqu\u00e9 dans le deuxi\u00e8me argument : consultez la table des op\u00e9rateurs de r\u00e9duction. Syntaxe : Q01.CHGLEV(NewLevel; Aggregator) ou _CHGLEV(Q01; NewLevel; Aggregator) **Nom ** **Type ** Description Remarque 1 NewLevel Cha\u00eene de caract\u00e8res Nom du niveau cible Obligatoire 2 Aggregator Cha\u00eene de caract\u00e8res Par d\u00e9faut, OU pour les logiques, SUM pour les quantit\u00e9s NUL par d\u00e9faut Exemples : S2.CHGLEV(\"UNITS\") Cr\u00e9e une variable bas\u00e9e sur le niveau \"UNITS\". Voir aussi : Niveaux Les op\u00e9rateurs de r\u00e9ductions","title":"CHGLEV"},{"location":"Fonctions/CHGLEV1/#chglev","text":"","title":"CHGLEV"},{"location":"Fonctions/CHGLEV1/#fonction-chglev","text":"La fonction CHGLEV change la variable de niveau de r\u00e9ponse (foyer vers individus et vice versa). La variable obtenue est donc sur le niveau sp\u00e9cifi\u00e9 en premier argument. L'op\u00e9rateur de r\u00e9duction appliqu\u00e9 lors du changement de niveau peut \u00eatre indiqu\u00e9 dans le deuxi\u00e8me argument : consultez la table des op\u00e9rateurs de r\u00e9duction.","title":"Fonction CHGLEV"},{"location":"Fonctions/CHGLEV1/#syntaxe","text":"Q01.CHGLEV(NewLevel; Aggregator) ou _CHGLEV(Q01; NewLevel; Aggregator) **Nom ** **Type ** Description Remarque 1 NewLevel Cha\u00eene de caract\u00e8res Nom du niveau cible Obligatoire 2 Aggregator Cha\u00eene de caract\u00e8res Par d\u00e9faut, OU pour les logiques, SUM pour les quantit\u00e9s NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CHGLEV1/#exemples","text":"S2.CHGLEV(\"UNITS\") Cr\u00e9e une variable bas\u00e9e sur le niveau \"UNITS\". Voir aussi : Niveaux Les op\u00e9rateurs de r\u00e9ductions","title":"Exemples :"},{"location":"Fonctions/CLEAN1/","text":"CLEAN Fonction CLEAN La fonction CLEAN applique l'univers de la variable (s'il est d\u00e9fini) aux donn\u00e9es, puis supprime l'univers attach\u00e9. Cette fonction a donc pour effet de \"nettoyer\" les donn\u00e9es. Syntaxe : Q01.CLEAN() ou _CLEAN(Q01) \\ Cette fonction n'a pas d'argument. Exemples : Q07.CLEAN() Retourne une variable qui n'a plus d'univers associ\u00e9, mais dont l'univers original a \u00e9t\u00e9 appliqu\u00e9 aux donn\u00e9es. Voir aussi : Univers de variables Utilitaires \\& divers","title":"CLEAN"},{"location":"Fonctions/CLEAN1/#clean","text":"","title":"CLEAN"},{"location":"Fonctions/CLEAN1/#fonction-clean","text":"La fonction CLEAN applique l'univers de la variable (s'il est d\u00e9fini) aux donn\u00e9es, puis supprime l'univers attach\u00e9. Cette fonction a donc pour effet de \"nettoyer\" les donn\u00e9es.","title":"Fonction CLEAN"},{"location":"Fonctions/CLEAN1/#syntaxe","text":"Q01.CLEAN() ou _CLEAN(Q01) \\ Cette fonction n'a pas d'argument.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CLEAN1/#exemples","text":"Q07.CLEAN() Retourne une variable qui n'a plus d'univers associ\u00e9, mais dont l'univers original a \u00e9t\u00e9 appliqu\u00e9 aux donn\u00e9es. Voir aussi : Univers de variables Utilitaires \\& divers","title":"Exemples :"},{"location":"Fonctions/CLRCOL1/","text":"CLRCOL Fonction CLRCOL La fonction CLRCOL vide tous les libell\u00e9s des colonnes de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes Syntaxe : Q01.CLRCOL() ou _CLRCOL(Q01) Exemples : Q2.CLRCOL() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"CLRCOL"},{"location":"Fonctions/CLRCOL1/#clrcol","text":"","title":"CLRCOL"},{"location":"Fonctions/CLRCOL1/#fonction-clrcol","text":"La fonction CLRCOL vide tous les libell\u00e9s des colonnes de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes","title":"Fonction CLRCOL"},{"location":"Fonctions/CLRCOL1/#syntaxe","text":"Q01.CLRCOL() ou _CLRCOL(Q01)","title":"Syntaxe :"},{"location":"Fonctions/CLRCOL1/#exemples","text":"Q2.CLRCOL() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"Exemples :"},{"location":"Fonctions/CLRMOD1/","text":"CLRMOD Fonction CLRMOD La fonction CLRMOD vide tous les libell\u00e9s de modalit\u00e9s de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes Syntaxe : Q01.CLRMOD() ou _CLRMOD(Q01) Exemples : Q2.CLRMOD() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"CLRMOD"},{"location":"Fonctions/CLRMOD1/#clrmod","text":"","title":"CLRMOD"},{"location":"Fonctions/CLRMOD1/#fonction-clrmod","text":"La fonction CLRMOD vide tous les libell\u00e9s de modalit\u00e9s de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes","title":"Fonction CLRMOD"},{"location":"Fonctions/CLRMOD1/#syntaxe","text":"Q01.CLRMOD() ou _CLRMOD(Q01)","title":"Syntaxe :"},{"location":"Fonctions/CLRMOD1/#exemples","text":"Q2.CLRMOD() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"Exemples :"},{"location":"Fonctions/CLRROW1/","text":"CLRROW Fonction CLRROW La fonction CLRROW vide tous les libell\u00e9s de lignes de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes Syntaxe : Q01.CLRROW() ou _CLRROW(Q01) Exemples : Q2.CLRROW() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"CLRROW"},{"location":"Fonctions/CLRROW1/#clrrow","text":"","title":"CLRROW"},{"location":"Fonctions/CLRROW1/#fonction-clrrow","text":"La fonction CLRROW vide tous les libell\u00e9s de lignes de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a pas d'alignement automatique sur les textes","title":"Fonction CLRROW"},{"location":"Fonctions/CLRROW1/#syntaxe","text":"Q01.CLRROW() ou _CLRROW(Q01)","title":"Syntaxe :"},{"location":"Fonctions/CLRROW1/#exemples","text":"Q2.CLRROW() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Voir aussi : Gestion des libell\u00e9s NOTXT","title":"Exemples :"},{"location":"Fonctions/CMBAUTO1/","text":"CMBAUTO Fonction CMBAUTO La fonction CMBAUTO s\u00e9lectionne les diff\u00e9rentes combinaisons pr\u00e9sentes dans la variable et les trie. Le r\u00e9sultat est une nouvelle variable logique tri\u00e9e sur le nombre de r\u00e9ponses de chaque combinaison et, \u00e0 l'int\u00e9rieur de chaque groupe, sur l'effectif non pond\u00e9r\u00e9 constat\u00e9. Syntaxe : Q01.CMBAUTO() ou _CMBAUTO(Source) **Nom ** **Type ** Description Remarque Source Variable Variable multi-r\u00e9ponses Obligatoire Exemples : Q05.CMBAUTO() Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"CMBAUTO"},{"location":"Fonctions/CMBAUTO1/#cmbauto","text":"","title":"CMBAUTO"},{"location":"Fonctions/CMBAUTO1/#fonction-cmbauto","text":"La fonction CMBAUTO s\u00e9lectionne les diff\u00e9rentes combinaisons pr\u00e9sentes dans la variable et les trie. Le r\u00e9sultat est une nouvelle variable logique tri\u00e9e sur le nombre de r\u00e9ponses de chaque combinaison et, \u00e0 l'int\u00e9rieur de chaque groupe, sur l'effectif non pond\u00e9r\u00e9 constat\u00e9.","title":"Fonction CMBAUTO"},{"location":"Fonctions/CMBAUTO1/#syntaxe","text":"Q01.CMBAUTO() ou _CMBAUTO(Source) **Nom ** **Type ** Description Remarque Source Variable Variable multi-r\u00e9ponses Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CMBAUTO1/#exemples","text":"Q05.CMBAUTO() Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"Exemples :"},{"location":"Fonctions/CMBDEL1/","text":"CMBDEL Fonction CMBDEL La fonction CMBDEL combine (croise) les modalit\u00e9s des variables en arguments et supprime les modalit\u00e9s vides. Il suffit de lister les diff\u00e9rentes variables (ou constructions) \u00e0 croiser en guise d'arguments pour produire une variable avec des modalit\u00e9s combin\u00e9es. Syntaxe : Q01.CMBDEL(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables logiques \u00e0 combiner Obligatoire Remarques : La fonction CMBDEL, tr\u00e8s proche de la variable CMBVAR, supprime les cas non rencontr\u00e9s (les modalit\u00e9s vides) du r\u00e9sultat. De fait, elle est id\u00e9ale pour par exemple croiser la variable REGION par la variable DEPARTEMENT : seuls les d\u00e9partements des r\u00e9gions appara\u00eetront (alors que CMBVAR listerait tous les d\u00e9partements pour chacune des r\u00e9gions !). Exemples : _CMBDEL(S1; S3; S4) ou S1.CMBDEL( S3; S4) La variable r\u00e9sultante dispose en modalit\u00e9s le croisement des modalit\u00e9s des trois variables en arguments. Si la variable SEXE d\u00e9signe les hommes et les femmes et la variable AGE d\u00e9signe les tranches d'\u00e2ge, alors le croisement de ces deux variables donnera le d\u00e9tail des tranches d'\u00e2ge pour les hommes puis pour les femmes. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"CMBDEL"},{"location":"Fonctions/CMBDEL1/#cmbdel","text":"","title":"CMBDEL"},{"location":"Fonctions/CMBDEL1/#fonction-cmbdel","text":"La fonction CMBDEL combine (croise) les modalit\u00e9s des variables en arguments et supprime les modalit\u00e9s vides. Il suffit de lister les diff\u00e9rentes variables (ou constructions) \u00e0 croiser en guise d'arguments pour produire une variable avec des modalit\u00e9s combin\u00e9es.","title":"Fonction CMBDEL"},{"location":"Fonctions/CMBDEL1/#syntaxe","text":"Q01.CMBDEL(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables logiques \u00e0 combiner Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CMBDEL1/#remarques","text":"La fonction CMBDEL, tr\u00e8s proche de la variable CMBVAR, supprime les cas non rencontr\u00e9s (les modalit\u00e9s vides) du r\u00e9sultat. De fait, elle est id\u00e9ale pour par exemple croiser la variable REGION par la variable DEPARTEMENT : seuls les d\u00e9partements des r\u00e9gions appara\u00eetront (alors que CMBVAR listerait tous les d\u00e9partements pour chacune des r\u00e9gions !).","title":"Remarques :"},{"location":"Fonctions/CMBDEL1/#exemples","text":"_CMBDEL(S1; S3; S4) ou S1.CMBDEL( S3; S4) La variable r\u00e9sultante dispose en modalit\u00e9s le croisement des modalit\u00e9s des trois variables en arguments. Si la variable SEXE d\u00e9signe les hommes et les femmes et la variable AGE d\u00e9signe les tranches d'\u00e2ge, alors le croisement de ces deux variables donnera le d\u00e9tail des tranches d'\u00e2ge pour les hommes puis pour les femmes. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"Exemples :"},{"location":"Fonctions/CMBDIM1/","text":"CMBDIM Fonction CMBDIM La fonction CMBDIM (qui correspond \u00e0 l'op\u00e9rateur **) impl\u00e9mente le croisement sur dimensions. Elle a pour effet de positionner les dimensions de la seconde variable en colonnes du r\u00e9sultat. Pour tout le reste, la variable obtenue est comparable au premier argument. Syntaxe : Q01.CMBDIM(Variables) ou _CMBDIM(Q01; Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables logiques \u00e0 combiner Obligatoire Remarques : Cette fonction permet d'ajouter une dimension de croisement dans les tableaux (car les bases sont pr\u00e9serv\u00e9es pour chaque d\u00e9tail de la variable obtenue). Exemples : S1 ** S3 ou S1.CMBDIM(S3) ou _CMBDIM(S1; S3) Ces trois \u00e9critures aboutissent au m\u00eame r\u00e9sultat : la variable S1 est \"r\u00e9p\u00e9t\u00e9e\" pour chaque modalit\u00e9s de la variable S3. Les modalit\u00e9s de la variable S3 deviennent les \"d\u00e9tails\" du r\u00e9sultat. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"CMBDIM"},{"location":"Fonctions/CMBDIM1/#cmbdim","text":"","title":"CMBDIM"},{"location":"Fonctions/CMBDIM1/#fonction-cmbdim","text":"La fonction CMBDIM (qui correspond \u00e0 l'op\u00e9rateur **) impl\u00e9mente le croisement sur dimensions. Elle a pour effet de positionner les dimensions de la seconde variable en colonnes du r\u00e9sultat. Pour tout le reste, la variable obtenue est comparable au premier argument.","title":"Fonction CMBDIM"},{"location":"Fonctions/CMBDIM1/#syntaxe","text":"Q01.CMBDIM(Variables) ou _CMBDIM(Q01; Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables logiques \u00e0 combiner Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CMBDIM1/#remarques","text":"Cette fonction permet d'ajouter une dimension de croisement dans les tableaux (car les bases sont pr\u00e9serv\u00e9es pour chaque d\u00e9tail de la variable obtenue).","title":"Remarques :"},{"location":"Fonctions/CMBDIM1/#exemples","text":"S1 ** S3 ou S1.CMBDIM(S3) ou _CMBDIM(S1; S3) Ces trois \u00e9critures aboutissent au m\u00eame r\u00e9sultat : la variable S1 est \"r\u00e9p\u00e9t\u00e9e\" pour chaque modalit\u00e9s de la variable S3. Les modalit\u00e9s de la variable S3 deviennent les \"d\u00e9tails\" du r\u00e9sultat. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"Exemples :"},{"location":"Fonctions/CMBMOD1/","text":"CMBMOD Fonction CMBMOD La fonction CMBMOD combine entre elles les modalit\u00e9s d'une variable. Syntaxe : Q01.CMBMOD(Source; PermutationSize; Exactly; RemoveEmpty; SortResults; InsertSubTitles; InsertSubTotal) ou _CMBMOD(Q01; Source; PermutationSize; Exactly; RemoveEmpty; SortResults; InsertSubTitles; InsertSubTotal) **Nom ** **Type ** Description Remarque 1 Source Variable Variable multi-r\u00e9ponses Obligatoire 2 PermutationSize Entier Par d\u00e9faut, toutes les tailles de combinaisons possibles -1 par d\u00e9faut 3 Exactly Bool\u00e9en Toutes les r\u00e9ponses exactement si TRUE FALSE par d\u00e9faut 4 RemoveEmpty Bool\u00e9en Par d\u00e9faut, conserve les combinaisons vides FALSE par d\u00e9faut 5 SortResults Bool\u00e9en Pat d\u00e9faut, r\u00e9sultats non tri\u00e9s FALSE par d\u00e9faut 6 InsertSubTitles Bool\u00e9en Par d\u00e9faut, pas de sous-titres FALSE par d\u00e9faut 7 InsertSubTotal Bool\u00e9en Par d\u00e9faut pas de sous-totaux FALSE par d\u00e9faut Remarques : Attention, sans argument, elle produit toutes les combinaisons possibles... Et peut donc n\u00e9cessiter un temps de calcul important ! Exemples : S6.CMBMOD(2) Retourne une variable qui contient toutes les combinaisons existantes de 2 modalit\u00e9s parmi les modalit\u00e9s de la variable S6. S6.CMBMOD(-1;TRUE;TRUE;TRUE;TRUE;FALSE) Retourne une variable avec toutes les combinaisons exclusives, tri\u00e9es avec des sous-titres. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables","title":"CMBMOD"},{"location":"Fonctions/CMBMOD1/#cmbmod","text":"","title":"CMBMOD"},{"location":"Fonctions/CMBMOD1/#fonction-cmbmod","text":"La fonction CMBMOD combine entre elles les modalit\u00e9s d'une variable.","title":"Fonction CMBMOD"},{"location":"Fonctions/CMBMOD1/#syntaxe","text":"Q01.CMBMOD(Source; PermutationSize; Exactly; RemoveEmpty; SortResults; InsertSubTitles; InsertSubTotal) ou _CMBMOD(Q01; Source; PermutationSize; Exactly; RemoveEmpty; SortResults; InsertSubTitles; InsertSubTotal) **Nom ** **Type ** Description Remarque 1 Source Variable Variable multi-r\u00e9ponses Obligatoire 2 PermutationSize Entier Par d\u00e9faut, toutes les tailles de combinaisons possibles -1 par d\u00e9faut 3 Exactly Bool\u00e9en Toutes les r\u00e9ponses exactement si TRUE FALSE par d\u00e9faut 4 RemoveEmpty Bool\u00e9en Par d\u00e9faut, conserve les combinaisons vides FALSE par d\u00e9faut 5 SortResults Bool\u00e9en Pat d\u00e9faut, r\u00e9sultats non tri\u00e9s FALSE par d\u00e9faut 6 InsertSubTitles Bool\u00e9en Par d\u00e9faut, pas de sous-titres FALSE par d\u00e9faut 7 InsertSubTotal Bool\u00e9en Par d\u00e9faut pas de sous-totaux FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CMBMOD1/#remarques","text":"Attention, sans argument, elle produit toutes les combinaisons possibles... Et peut donc n\u00e9cessiter un temps de calcul important !","title":"Remarques :"},{"location":"Fonctions/CMBMOD1/#exemples","text":"S6.CMBMOD(2) Retourne une variable qui contient toutes les combinaisons existantes de 2 modalit\u00e9s parmi les modalit\u00e9s de la variable S6. S6.CMBMOD(-1;TRUE;TRUE;TRUE;TRUE;FALSE) Retourne une variable avec toutes les combinaisons exclusives, tri\u00e9es avec des sous-titres. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables","title":"Exemples :"},{"location":"Fonctions/CMBVAR1/","text":"CMBVAR Fonction CMBVAR La fonction CMBVAR combine (croise) les modalit\u00e9s des variables en arguments. Il suffit de lister les diff\u00e9rentes variables (ou constructions) \u00e0 croiser en guise d'arguments pour produire une variable avec des modalit\u00e9s combin\u00e9es. Syntaxe : Q01.CMBVAR(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste de variables \u00e0 combiner ou une expression de s\u00e9lection de variables (ex: '$\"S?\"') Obligatoire Remarques : La fonction CMBDEL, tr\u00e8s proche de la variable CMBVAR, supprime les cas non rencontr\u00e9s (les modalit\u00e9s vides) du r\u00e9sultat. De fait, elle est id\u00e9ale pour par exemple croiser la variable REGION par la variable DEPARTEMENT : seuls les d\u00e9partements des r\u00e9gions appara\u00eetront (alors que CMBVAR listerait tous les d\u00e9partements pour chacune des r\u00e9gions !). Exemples : _CMBVAR(S1; S3; S4) ou S1.CMBVAR( S3; S4) La variable r\u00e9sultante dispose en modalit\u00e9s le croisement des modalit\u00e9s des trois variables en arguments. Si la variable SEXE d\u00e9signe les hommes et les femmes et la variable AGE d\u00e9signe les tranches d'\u00e2ge, alors le croisement de ces deux variables donnera le d\u00e9tail des tranches d'\u00e2ge pour les hommes puis pour les femmes. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"CMBVAR"},{"location":"Fonctions/CMBVAR1/#cmbvar","text":"","title":"CMBVAR"},{"location":"Fonctions/CMBVAR1/#fonction-cmbvar","text":"La fonction CMBVAR combine (croise) les modalit\u00e9s des variables en arguments. Il suffit de lister les diff\u00e9rentes variables (ou constructions) \u00e0 croiser en guise d'arguments pour produire une variable avec des modalit\u00e9s combin\u00e9es.","title":"Fonction CMBVAR"},{"location":"Fonctions/CMBVAR1/#syntaxe","text":"Q01.CMBVAR(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste de variables \u00e0 combiner ou une expression de s\u00e9lection de variables (ex: '$\"S?\"') Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CMBVAR1/#remarques","text":"La fonction CMBDEL, tr\u00e8s proche de la variable CMBVAR, supprime les cas non rencontr\u00e9s (les modalit\u00e9s vides) du r\u00e9sultat. De fait, elle est id\u00e9ale pour par exemple croiser la variable REGION par la variable DEPARTEMENT : seuls les d\u00e9partements des r\u00e9gions appara\u00eetront (alors que CMBVAR listerait tous les d\u00e9partements pour chacune des r\u00e9gions !).","title":"Remarques :"},{"location":"Fonctions/CMBVAR1/#exemples","text":"_CMBVAR(S1; S3; S4) ou S1.CMBVAR( S3; S4) La variable r\u00e9sultante dispose en modalit\u00e9s le croisement des modalit\u00e9s des trois variables en arguments. Si la variable SEXE d\u00e9signe les hommes et les femmes et la variable AGE d\u00e9signe les tranches d'\u00e2ge, alors le croisement de ces deux variables donnera le d\u00e9tail des tranches d'\u00e2ge pour les hommes puis pour les femmes. Voir aussi : Combiner les modalit\u00e9s de plusieurs variables Combinaisons","title":"Exemples :"},{"location":"Fonctions/CODCOL1/","text":"CODCOL Fonction CODCOL La fonction CODCOL permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux colonnes de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les codes de la variable. Syntaxe : Q01.CODCOL(Values; s\u00e9lection) ou _CODCOL(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Remarques : La fonction CODCOL conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Exemples : S1.CODCOL(97 99; 11 12) affecte les codes 97 et 99 aux colonnes 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"CODCOL"},{"location":"Fonctions/CODCOL1/#codcol","text":"","title":"CODCOL"},{"location":"Fonctions/CODCOL1/#fonction-codcol","text":"La fonction CODCOL permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux colonnes de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les codes de la variable.","title":"Fonction CODCOL"},{"location":"Fonctions/CODCOL1/#syntaxe","text":"Q01.CODCOL(Values; s\u00e9lection) ou _CODCOL(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CODCOL1/#remarques","text":"La fonction CODCOL conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine","title":"Remarques :"},{"location":"Fonctions/CODCOL1/#exemples","text":"S1.CODCOL(97 99; 11 12) affecte les codes 97 et 99 aux colonnes 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/CODIFY1/","text":"CODIFY Fonction CODIFY La fonction CODIFY affecte des codes aux modalit\u00e9s d'une variable. Les codes identifient les modalit\u00e9s de fa\u00e7on plus \"stable\" que les num\u00e9ros de modalit\u00e9s, et sont utilis\u00e9s pour les exports de donn\u00e9es. L'argument attendu (en plus de la variable \u00e0 coder) est la liste des codes \u00e0 affecter. Syntaxe : Q01.CODIFY(Codes) ou _CODIFY(Q01; Codes) **Nom ** **Type ** Description Remarque Codes Liste de cha\u00eenes de caract\u00e8res Liste des codes \u00e0 affecter NUL par d\u00e9faut Remarques : La conservation des codes apr\u00e8s application d'autres recodifications n'est pas garantie. Toutes les modalit\u00e9s doivent \u00eatre d\u00e9crites Exemples : _CODIFY(S1; 1 2 3 4 99) Retourne une variable dont les modalit\u00e9s sont respectivement identifi\u00e9es par les codes 1 2 3 4 99 Voir aussi : Traiter les variables logiques (modalit\u00e9s) Propri\u00e9t\u00e9s des variables","title":"CODIFY"},{"location":"Fonctions/CODIFY1/#codify","text":"","title":"CODIFY"},{"location":"Fonctions/CODIFY1/#fonction-codify","text":"La fonction CODIFY affecte des codes aux modalit\u00e9s d'une variable. Les codes identifient les modalit\u00e9s de fa\u00e7on plus \"stable\" que les num\u00e9ros de modalit\u00e9s, et sont utilis\u00e9s pour les exports de donn\u00e9es. L'argument attendu (en plus de la variable \u00e0 coder) est la liste des codes \u00e0 affecter.","title":"Fonction CODIFY"},{"location":"Fonctions/CODIFY1/#syntaxe","text":"Q01.CODIFY(Codes) ou _CODIFY(Q01; Codes) **Nom ** **Type ** Description Remarque Codes Liste de cha\u00eenes de caract\u00e8res Liste des codes \u00e0 affecter NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CODIFY1/#remarques","text":"La conservation des codes apr\u00e8s application d'autres recodifications n'est pas garantie. Toutes les modalit\u00e9s doivent \u00eatre d\u00e9crites","title":"Remarques :"},{"location":"Fonctions/CODIFY1/#exemples","text":"_CODIFY(S1; 1 2 3 4 99) Retourne une variable dont les modalit\u00e9s sont respectivement identifi\u00e9es par les codes 1 2 3 4 99 Voir aussi : Traiter les variables logiques (modalit\u00e9s) Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/CODMOD1/","text":"CODMOD Fonction CODMOD La fonction CODMOD permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux modalit\u00e9s de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les modalit\u00e9s de la variable. Syntaxe : Q01.CODMOD(Values; s\u00e9lection) ou _CODMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Remarques : La fonction CODMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Exemples : S1.CODMOD(97 99; 11 12) affecte les codes 97 et 99 aux modalit\u00e9s 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"CODMOD"},{"location":"Fonctions/CODMOD1/#codmod","text":"","title":"CODMOD"},{"location":"Fonctions/CODMOD1/#fonction-codmod","text":"La fonction CODMOD permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux modalit\u00e9s de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les modalit\u00e9s de la variable.","title":"Fonction CODMOD"},{"location":"Fonctions/CODMOD1/#syntaxe","text":"Q01.CODMOD(Values; s\u00e9lection) ou _CODMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CODMOD1/#remarques","text":"La fonction CODMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine","title":"Remarques :"},{"location":"Fonctions/CODMOD1/#exemples","text":"S1.CODMOD(97 99; 11 12) affecte les codes 97 et 99 aux modalit\u00e9s 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/CODROW1/","text":"CODROW Fonction CODROW La fonction CODROW permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux lignes de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les lignes de la variable. Syntaxe : Q01.CODROW(Values; s\u00e9lection) ou _CODROW(Q01; Values;s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Remarques : La fonction CODROW conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Exemples : S1.CODROW(97 99; 11 12) affecte les codes 97 et 99 aux lignes 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"CODROW"},{"location":"Fonctions/CODROW1/#codrow","text":"","title":"CODROW"},{"location":"Fonctions/CODROW1/#fonction-codrow","text":"La fonction CODROW permet \u00e0 l'appelant de modifier les codes associ\u00e9s aux lignes de la variable. L'argument est le vecteur des codes (exemple : 4 5 99) \u00e0 inscrire dans les lignes de la variable.","title":"Fonction CODROW"},{"location":"Fonctions/CODROW1/#syntaxe","text":"Q01.CODROW(Values; s\u00e9lection) ou _CODROW(Q01; Values;s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs des codes Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CODROW1/#remarques","text":"La fonction CODROW conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine","title":"Remarques :"},{"location":"Fonctions/CODROW1/#exemples","text":"S1.CODROW(97 99; 11 12) affecte les codes 97 et 99 aux lignes 11 et 12. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/COMMENT1/","text":"COMMENT Fonction COMMENT La fonction COMMENT modifie le commentaire de la variable pass\u00e9e en argument. Syntaxe : Q01.COMMENT(Expression) ou _COMMENT(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Texte du commentaire ou fonction de traitement appliqu\u00e9e au commentaire Obligatoire Remarques : Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au commentaire de la variable en entr\u00e9e. Pour plus d'informations, aller voir la section sur les Traitements textuels Exemples : S2.COMMENT(\"Age\") S2.COMMENT(\"=TRIM, UPPER\") S2.COMMENT(\"=UPPER(@VALUE)\") S1.COMMENT(\"A tous\").SHORTITLE(\"[NAME]. [TITLE] (COMMENT])\") Ainsi le titre court de S1 devient \"S1. Le titre (A tous)\" Avec NAME = \"S1\" et TITLE = \"Le titre\". La fonction COMMENT conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Voir aussi : Propri\u00e9t\u00e9s des variables","title":"COMMENT"},{"location":"Fonctions/COMMENT1/#comment","text":"","title":"COMMENT"},{"location":"Fonctions/COMMENT1/#fonction-comment","text":"La fonction COMMENT modifie le commentaire de la variable pass\u00e9e en argument.","title":"Fonction COMMENT"},{"location":"Fonctions/COMMENT1/#syntaxe","text":"Q01.COMMENT(Expression) ou _COMMENT(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Texte du commentaire ou fonction de traitement appliqu\u00e9e au commentaire Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COMMENT1/#remarques","text":"Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au commentaire de la variable en entr\u00e9e. Pour plus d'informations, aller voir la section sur les Traitements textuels","title":"Remarques :"},{"location":"Fonctions/COMMENT1/#exemples","text":"S2.COMMENT(\"Age\") S2.COMMENT(\"=TRIM, UPPER\") S2.COMMENT(\"=UPPER(@VALUE)\") S1.COMMENT(\"A tous\").SHORTITLE(\"[NAME]. [TITLE] (COMMENT])\") Ainsi le titre court de S1 devient \"S1. Le titre (A tous)\" Avec NAME = \"S1\" et TITLE = \"Le titre\". La fonction COMMENT conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/COMPOSE1/","text":"COMPOSE Fonction COMPOSE La fonction COMPOSE s'impose lorsqu'il s'agit de cr\u00e9er un crit\u00e8re complexe depuis une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La table attendue poss\u00e8de autant de colonnes que d\u00e9sir\u00e9 sachant que : - la derni\u00e8re colonne contient les d\u00e9finition \u00e0 ex\u00e9cuter pour chacune des modalit\u00e9s. A noter que la s\u00e9lection des r\u00e9pondants de la d\u00e9finition est automatique : inutile de les sp\u00e9cifier. - les colonnes qui pr\u00e9c\u00e8dent repr\u00e9sentent les textes des modalit\u00e9s selon les diff\u00e9rents niveaux hi\u00e9rarchiques n\u00e9cessaires. Syntaxe : Q01.COMPOSE(Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire Exemples : _COMPOSE(Q01;\"PDT!CRITERES\") Retourne une nouvelle variable depuis la table stock\u00e9e dans le fichier Excel \"PDT.xlsx\" pr\u00e9sent dans le r\u00e9pertoire de l'\u00e9tude, dans l'onglet \"CRITERES\". Le r\u00e9sultat a autant de modalit\u00e9s qu'il y en a dans la table. Les r\u00e9pondants de chaque modalit\u00e9 sont ceux des d\u00e9finitions saisies dans la derni\u00e8re colonne de chaque ligne de la table. Voir aussi : Utilisation de tables externes Crit\u00e8res","title":"COMPOSE"},{"location":"Fonctions/COMPOSE1/#compose","text":"","title":"COMPOSE"},{"location":"Fonctions/COMPOSE1/#fonction-compose","text":"La fonction COMPOSE s'impose lorsqu'il s'agit de cr\u00e9er un crit\u00e8re complexe depuis une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La table attendue poss\u00e8de autant de colonnes que d\u00e9sir\u00e9 sachant que : - la derni\u00e8re colonne contient les d\u00e9finition \u00e0 ex\u00e9cuter pour chacune des modalit\u00e9s. A noter que la s\u00e9lection des r\u00e9pondants de la d\u00e9finition est automatique : inutile de les sp\u00e9cifier. - les colonnes qui pr\u00e9c\u00e8dent repr\u00e9sentent les textes des modalit\u00e9s selon les diff\u00e9rents niveaux hi\u00e9rarchiques n\u00e9cessaires.","title":"Fonction COMPOSE"},{"location":"Fonctions/COMPOSE1/#syntaxe","text":"Q01.COMPOSE(Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COMPOSE1/#exemples","text":"_COMPOSE(Q01;\"PDT!CRITERES\") Retourne une nouvelle variable depuis la table stock\u00e9e dans le fichier Excel \"PDT.xlsx\" pr\u00e9sent dans le r\u00e9pertoire de l'\u00e9tude, dans l'onglet \"CRITERES\". Le r\u00e9sultat a autant de modalit\u00e9s qu'il y en a dans la table. Les r\u00e9pondants de chaque modalit\u00e9 sont ceux des d\u00e9finitions saisies dans la derni\u00e8re colonne de chaque ligne de la table. Voir aussi : Utilisation de tables externes Crit\u00e8res","title":"Exemples :"},{"location":"Fonctions/CONCAT1/","text":"CONCAT Fonction CONCAT La fonction CONCAT cr\u00e9e une variable litt\u00e9rale dont les valeurs sont la concat\u00e9nation des textes de plusieurs variables litt\u00e9rales. Syntaxe : _CONCAT(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables (logiques ou litt\u00e9rales) ou des cha\u00eenes \u00e0 concat\u00e9ner Obligatoire Remarques : Fonctionne comme le \\& de Excel. Exemples : _CONCAT(S1; S1) Cr\u00e9e une variable litt\u00e9rale dont les textes sont la concat\u00e9nation des valeurs de S1 avec S1 (donc r\u00e9p\u00e9t\u00e9s dans notre cas). _CONCAT(S1; S1; \" - \") Cr\u00e9e une variable litt\u00e9rale dont les textes sont la concat\u00e9nation des valeurs de S1 avec S1 (donc r\u00e9p\u00e9t\u00e9s dans notre cas) puis le caract\u00e8re \" - \". Voir aussi : Traiter les variables litt\u00e9rales Combiner les variables","title":"CONCAT"},{"location":"Fonctions/CONCAT1/#concat","text":"","title":"CONCAT"},{"location":"Fonctions/CONCAT1/#fonction-concat","text":"La fonction CONCAT cr\u00e9e une variable litt\u00e9rale dont les valeurs sont la concat\u00e9nation des textes de plusieurs variables litt\u00e9rales.","title":"Fonction CONCAT"},{"location":"Fonctions/CONCAT1/#syntaxe","text":"_CONCAT(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste des variables (logiques ou litt\u00e9rales) ou des cha\u00eenes \u00e0 concat\u00e9ner Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CONCAT1/#remarques","text":"Fonctionne comme le \\& de Excel.","title":"Remarques :"},{"location":"Fonctions/CONCAT1/#exemples","text":"_CONCAT(S1; S1) Cr\u00e9e une variable litt\u00e9rale dont les textes sont la concat\u00e9nation des valeurs de S1 avec S1 (donc r\u00e9p\u00e9t\u00e9s dans notre cas). _CONCAT(S1; S1; \" - \") Cr\u00e9e une variable litt\u00e9rale dont les textes sont la concat\u00e9nation des valeurs de S1 avec S1 (donc r\u00e9p\u00e9t\u00e9s dans notre cas) puis le caract\u00e8re \" - \". Voir aussi : Traiter les variables litt\u00e9rales Combiner les variables","title":"Exemples :"},{"location":"Fonctions/CONCATEX1/","text":"CONCATEX Fonction CONCATEX La fonction CONCATEX concat\u00e8ne les textes de plusieurs variables litt\u00e9rales \u00e0 l'aide d'un d\u00e9limiteur, d'un d\u00e9but de cha\u00eene et d'une fin de cha\u00eene. Cette fonction est donc particuli\u00e8rement adapt\u00e9e \u00e0 la cr\u00e9ation de cha\u00eenes avec d\u00e9limiteurs. Syntaxe : _CONCATEX(Delimiter; Start; End; Variables) **Nom ** **Type ** Description Remarque 1 Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser entre les variables litt\u00e9rales Obligatoire 2 Start Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 utiliser au d\u00e9but du r\u00e9sultat Obligatoire 3 End Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 utiliser \u00e0 la fin du r\u00e9sultat Obligatoire 4 Variables Liste de variables Liste des variables logiques ou litt\u00e9rales Obligatoire Voir aussi : Traiter les variables litt\u00e9rales Combiner les variables","title":"CONCATEX"},{"location":"Fonctions/CONCATEX1/#concatex","text":"","title":"CONCATEX"},{"location":"Fonctions/CONCATEX1/#fonction-concatex","text":"La fonction CONCATEX concat\u00e8ne les textes de plusieurs variables litt\u00e9rales \u00e0 l'aide d'un d\u00e9limiteur, d'un d\u00e9but de cha\u00eene et d'une fin de cha\u00eene. Cette fonction est donc particuli\u00e8rement adapt\u00e9e \u00e0 la cr\u00e9ation de cha\u00eenes avec d\u00e9limiteurs.","title":"Fonction CONCATEX"},{"location":"Fonctions/CONCATEX1/#syntaxe","text":"_CONCATEX(Delimiter; Start; End; Variables) **Nom ** **Type ** Description Remarque 1 Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser entre les variables litt\u00e9rales Obligatoire 2 Start Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 utiliser au d\u00e9but du r\u00e9sultat Obligatoire 3 End Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 utiliser \u00e0 la fin du r\u00e9sultat Obligatoire 4 Variables Liste de variables Liste des variables logiques ou litt\u00e9rales Obligatoire Voir aussi : Traiter les variables litt\u00e9rales Combiner les variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COPYCOL1/","text":"COPYCOL Fonction COPYCOL La fonction COPYCOL copie les libell\u00e9s des colonnes de la variable plac\u00e9e en argument. Syntaxe : Q01.COPYCOL(Argument) ou _COPYCOL(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire Exemples : Q2.COPYCOL(Q1) Les colonnes de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les colonnes de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"COPYCOL"},{"location":"Fonctions/COPYCOL1/#copycol","text":"","title":"COPYCOL"},{"location":"Fonctions/COPYCOL1/#fonction-copycol","text":"La fonction COPYCOL copie les libell\u00e9s des colonnes de la variable plac\u00e9e en argument.","title":"Fonction COPYCOL"},{"location":"Fonctions/COPYCOL1/#syntaxe","text":"Q01.COPYCOL(Argument) ou _COPYCOL(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COPYCOL1/#exemples","text":"Q2.COPYCOL(Q1) Les colonnes de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les colonnes de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/COPYFROM1/","text":"COPYFROM Fonction COPYFROM La fonction COPYFROM copie les propri\u00e9t\u00e9s d'une variable \"donneuse\" dans la variable trait\u00e9e. Les propri\u00e9t\u00e9s \u00e0 copier sont d\u00e9finies \u00e0 l'aide du 1er argument : TITLE : le titre SHORT_TITLE : le titre court COMMENT : les commentaire UNIVERSE : l'univers associ\u00e9 \u00e0 la variable WEIGHT : le poids associ\u00e9 \u00e0 la variable LABELS : les modalit\u00e9s COLUMNS : les colonnes ROWS : les lignes Syntaxe : Q01.COPYFROM(Argument; PropertyMask) ou _COPYFROM(Q01; Argument; PropertyMask) Exemples : Q2R.COPYFROM(Q2;SHORT_TITLE) Le titre court de la variable Q2R se voit attribuer le m\u00eame texte que le titre court de la variable Q2. **Nom ** **Type ** Description Remarque 1 Argument Variable Variable source Obligatoire 2 PropertyMask Cha\u00eene de caract\u00e8res El\u00e9ments \u00e0 copier s\u00e9par\u00e9s par un espace UNIVERSE WEIGHT LABELS COLUMNS ROWS TITLE SHORT_TITLE COMMENT Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"COPYFROM"},{"location":"Fonctions/COPYFROM1/#copyfrom","text":"","title":"COPYFROM"},{"location":"Fonctions/COPYFROM1/#fonction-copyfrom","text":"La fonction COPYFROM copie les propri\u00e9t\u00e9s d'une variable \"donneuse\" dans la variable trait\u00e9e. Les propri\u00e9t\u00e9s \u00e0 copier sont d\u00e9finies \u00e0 l'aide du 1er argument : TITLE : le titre SHORT_TITLE : le titre court COMMENT : les commentaire UNIVERSE : l'univers associ\u00e9 \u00e0 la variable WEIGHT : le poids associ\u00e9 \u00e0 la variable LABELS : les modalit\u00e9s COLUMNS : les colonnes ROWS : les lignes","title":"Fonction COPYFROM"},{"location":"Fonctions/COPYFROM1/#syntaxe","text":"Q01.COPYFROM(Argument; PropertyMask) ou _COPYFROM(Q01; Argument; PropertyMask)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COPYFROM1/#exemples","text":"Q2R.COPYFROM(Q2;SHORT_TITLE) Le titre court de la variable Q2R se voit attribuer le m\u00eame texte que le titre court de la variable Q2. **Nom ** **Type ** Description Remarque 1 Argument Variable Variable source Obligatoire 2 PropertyMask Cha\u00eene de caract\u00e8res El\u00e9ments \u00e0 copier s\u00e9par\u00e9s par un espace UNIVERSE WEIGHT LABELS COLUMNS ROWS TITLE SHORT_TITLE COMMENT Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/COPYMOD1/","text":"COPYMOD Fonction COPYMOD La fonction COPYMOD copie les libell\u00e9s des modalit\u00e9s de la variable plac\u00e9e en argument. Syntaxe : Q01.COPYMOD(Argument) ou _COPYMOD(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire Exemples : Q2.COPYMOD(Q1) Les modalit\u00e9s de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les modalit\u00e9s de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"COPYMOD"},{"location":"Fonctions/COPYMOD1/#copymod","text":"","title":"COPYMOD"},{"location":"Fonctions/COPYMOD1/#fonction-copymod","text":"La fonction COPYMOD copie les libell\u00e9s des modalit\u00e9s de la variable plac\u00e9e en argument.","title":"Fonction COPYMOD"},{"location":"Fonctions/COPYMOD1/#syntaxe","text":"Q01.COPYMOD(Argument) ou _COPYMOD(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire","title":"Syntaxe :"},{"location":"Fonctions/COPYMOD1/#exemples","text":"Q2.COPYMOD(Q1) Les modalit\u00e9s de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les modalit\u00e9s de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/COPYROW1/","text":"COPYROW Fonction COPYROW La fonction COPYROW copie les libell\u00e9s des lignes de la variable plac\u00e9e en argument. Syntaxe : Q01.COPYROW(Argument) ou _COPYROW(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire Exemples : Q2.COPYROW(Q1) Les lignes de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les lignes de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"COPYROW"},{"location":"Fonctions/COPYROW1/#copyrow","text":"","title":"COPYROW"},{"location":"Fonctions/COPYROW1/#fonction-copyrow","text":"La fonction COPYROW copie les libell\u00e9s des lignes de la variable plac\u00e9e en argument.","title":"Fonction COPYROW"},{"location":"Fonctions/COPYROW1/#syntaxe","text":"Q01.COPYROW(Argument) ou _COPYROW(Q01; Argument) **Nom ** **Type ** Description Remarque Argument Variable Variable source Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COPYROW1/#exemples","text":"Q2.COPYROW(Q1) Les lignes de la variable Q2 se voient attribuer les m\u00eames libell\u00e9s que les lignes de la variable Q1. Voir aussi : Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/COUNT/","text":"COUNT Fonction COUNT La fonction COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre de citations. Syntaxe : Q01.COUNT(Argument;Liste;Mode) ou _COUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE Exemples : Q2.COUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au 2 r\u00e9ponses. Q2.COUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : MINCOUNT() MAXCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"COUNT"},{"location":"Fonctions/COUNT/#count","text":"","title":"COUNT"},{"location":"Fonctions/COUNT/#fonction-count","text":"La fonction COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre de citations.","title":"Fonction COUNT"},{"location":"Fonctions/COUNT/#syntaxe","text":"Q01.COUNT(Argument;Liste;Mode) ou _COUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/COUNT/#exemples","text":"Q2.COUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au 2 r\u00e9ponses. Q2.COUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : MINCOUNT() MAXCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/CRANGE/","text":"CRANGE Fonction CRANGE La fonction CRANGE transforme une variable num\u00e9rique en variable logique (Discr\u00e8te) en tranches de m\u00eame taille. Syntaxe : Q01.CRANGE(Mini; Maxi; Factor) ou _CRANGE(Q01; Mini; Maxi; Factor) **Nom ** **Type ** Description Remarque 1 Mini Entier Borne minimum Obligatoire 2 Maxi Entier Borne maximum Obligatoire 3 Factor Entier Taille des classes Obligatoire Exemples : S2.CRANGE(0;100;10) Cr\u00e9e une variable logique constitu\u00e9e de 10 modalit\u00e9s ayant chacun une taille de 10. S2.CRANGE(0;100;5) Cr\u00e9e une variable logique constitu\u00e9e de 20 modalit\u00e9s ayant chacun une taille de 5. Voir aussi : Manipuler les variables num\u00e9riques","title":"CRANGE"},{"location":"Fonctions/CRANGE/#crange","text":"","title":"CRANGE"},{"location":"Fonctions/CRANGE/#fonction-crange","text":"La fonction CRANGE transforme une variable num\u00e9rique en variable logique (Discr\u00e8te) en tranches de m\u00eame taille.","title":"Fonction CRANGE"},{"location":"Fonctions/CRANGE/#syntaxe","text":"Q01.CRANGE(Mini; Maxi; Factor) ou _CRANGE(Q01; Mini; Maxi; Factor) **Nom ** **Type ** Description Remarque 1 Mini Entier Borne minimum Obligatoire 2 Maxi Entier Borne maximum Obligatoire 3 Factor Entier Taille des classes Obligatoire","title":"Syntaxe :"},{"location":"Fonctions/CRANGE/#exemples","text":"S2.CRANGE(0;100;10) Cr\u00e9e une variable logique constitu\u00e9e de 10 modalit\u00e9s ayant chacun une taille de 10. S2.CRANGE(0;100;5) Cr\u00e9e une variable logique constitu\u00e9e de 20 modalit\u00e9s ayant chacun une taille de 5. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CRIT1/","text":"CRIT Fonction CRIT La fonction CRIT concat\u00e8ne les r\u00e9pondants des variables en arguments en appliquant les univers associ\u00e9s. Elle permet de cr\u00e9er un crit\u00e8re dont chaque modalit\u00e9 est une d\u00e9finition potentiellement complexe. La variable qui en r\u00e9sulte poss\u00e8de une modalit\u00e9 par variable en argument. Syntaxe : Q01.CRIT(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste de d\u00e9finitions \u00e0 traiter Obligatoire Exemples : _CRIT(S1.MOD(1 2); S3.MOD(2 3 4); S2 > 30) Cr\u00e9e une variable logique constitu\u00e9e de 3 modalit\u00e9s : Les r\u00e9pondants \u00e0 S1.MOD(1) Les r\u00e9pondants \u00e0 S3.MOD(2 3 4) Les r\u00e9pondants \u00e0 S2 > 30 Remarques : La variable cr\u00e9\u00e9e n'a pas d'univers. Voir aussi : Crit\u00e8res","title":"CRIT"},{"location":"Fonctions/CRIT1/#crit","text":"","title":"CRIT"},{"location":"Fonctions/CRIT1/#fonction-crit","text":"La fonction CRIT concat\u00e8ne les r\u00e9pondants des variables en arguments en appliquant les univers associ\u00e9s. Elle permet de cr\u00e9er un crit\u00e8re dont chaque modalit\u00e9 est une d\u00e9finition potentiellement complexe. La variable qui en r\u00e9sulte poss\u00e8de une modalit\u00e9 par variable en argument.","title":"Fonction CRIT"},{"location":"Fonctions/CRIT1/#syntaxe","text":"Q01.CRIT(Variables) **Nom ** **Type ** Description Remarque Variables Liste de variables Liste de d\u00e9finitions \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CRIT1/#exemples","text":"_CRIT(S1.MOD(1 2); S3.MOD(2 3 4); S2 > 30) Cr\u00e9e une variable logique constitu\u00e9e de 3 modalit\u00e9s : Les r\u00e9pondants \u00e0 S1.MOD(1) Les r\u00e9pondants \u00e0 S3.MOD(2 3 4) Les r\u00e9pondants \u00e0 S2 > 30","title":"Exemples :"},{"location":"Fonctions/CRIT1/#remarques","text":"La variable cr\u00e9\u00e9e n'a pas d'univers. Voir aussi : Crit\u00e8res","title":"Remarques :"},{"location":"Fonctions/CSVCOL1/","text":"CSVCOL Fonction CSVCOL La fonction CSVCOL regroupe les colonnes d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les items \u00e0 retenir (et les textes associ\u00e9s) pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les items \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable dimensionn\u00e9e qui poss\u00e8de une colonne par ligne de la table. Syntaxe : Q01.CSVCOL(TableExpression) ou _CSVCOL(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire Exemples : Q01A.CSVCOL(\"COUNTRIES\") Retourne une variable dont les colonnes correspondent aux regroupements textuels list\u00e9s dans la table en argument. Voir aussi : Utilisation de tables externes","title":"CSVCOL"},{"location":"Fonctions/CSVCOL1/#csvcol","text":"","title":"CSVCOL"},{"location":"Fonctions/CSVCOL1/#fonction-csvcol","text":"La fonction CSVCOL regroupe les colonnes d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les items \u00e0 retenir (et les textes associ\u00e9s) pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les items \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable dimensionn\u00e9e qui poss\u00e8de une colonne par ligne de la table.","title":"Fonction CSVCOL"},{"location":"Fonctions/CSVCOL1/#syntaxe","text":"Q01.CSVCOL(TableExpression) ou _CSVCOL(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CSVCOL1/#exemples","text":"Q01A.CSVCOL(\"COUNTRIES\") Retourne une variable dont les colonnes correspondent aux regroupements textuels list\u00e9s dans la table en argument. Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/CSVMOD1/","text":"CSVMOD Fonction CSVMOD La fonction CSVMOD regroupe les modalit\u00e9s d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les modalit\u00e9s (et les textes associ\u00e9s) \u00e0 retenir pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les autres modalit\u00e9s \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable logique qui poss\u00e8de une modalit\u00e9 par ligne de la table. Syntaxe : Q01.CSVMOD(TableExpression) ou _CSVMOD(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire NotListed Bool\u00e9en Ajoute les r\u00e9ponses non list\u00e9es dans la table si TRUE FALSE par d\u00e9faut Remarques : Les fonctions CSVCOL et CSVROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Exemples : Q01A.CSVMOD(\"COUNTRIES\";TRUE) Retourne une variable logique dont les modalit\u00e9s correspondent aux regroupements textuels list\u00e9s dans la table en argument plus les r\u00e9ponses non list\u00e9es dans la table. Voir aussi : Utilisation de tables externes","title":"CSVMOD"},{"location":"Fonctions/CSVMOD1/#csvmod","text":"","title":"CSVMOD"},{"location":"Fonctions/CSVMOD1/#fonction-csvmod","text":"La fonction CSVMOD regroupe les modalit\u00e9s d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les modalit\u00e9s (et les textes associ\u00e9s) \u00e0 retenir pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les autres modalit\u00e9s \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable logique qui poss\u00e8de une modalit\u00e9 par ligne de la table.","title":"Fonction CSVMOD"},{"location":"Fonctions/CSVMOD1/#syntaxe","text":"Q01.CSVMOD(TableExpression) ou _CSVMOD(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire NotListed Bool\u00e9en Ajoute les r\u00e9ponses non list\u00e9es dans la table si TRUE FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CSVMOD1/#remarques","text":"Les fonctions CSVCOL et CSVROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source.","title":"Remarques :"},{"location":"Fonctions/CSVMOD1/#exemples","text":"Q01A.CSVMOD(\"COUNTRIES\";TRUE) Retourne une variable logique dont les modalit\u00e9s correspondent aux regroupements textuels list\u00e9s dans la table en argument plus les r\u00e9ponses non list\u00e9es dans la table. Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/CSVROW1/","text":"CSVROW Fonction CSVROW La fonction CSVROW regroupe les lignes d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les items \u00e0 retenir (et les textes associ\u00e9s) pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les items \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable dimensionn\u00e9e qui poss\u00e8de une ligne par ligne de la table. Syntaxe : Q01.CSVROW(TableExpression) ou _CSVROW(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire Exemples : Q01A.CSVROW(\"COUNTRIES\") Retourne une variable dont les lignes correspondent aux regroupements textuels list\u00e9s dans la table en argument. Voir aussi : Utilisation de tables externes","title":"CSVROW"},{"location":"Fonctions/CSVROW1/#csvrow","text":"","title":"CSVROW"},{"location":"Fonctions/CSVROW1/#fonction-csvrow","text":"La fonction CSVROW regroupe les lignes d'une variable \u00e0 l'aide de regroupements textuels d\u00e9crits dans une table externe. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. La 1\u00e8re colonne indique les items \u00e0 retenir (et les textes associ\u00e9s) pour constituer la variable r\u00e9sultat. Les colonnes qui suivent indiquent les items \u00e0 regrouper. Les textes saisis peuvent utiliser les 'jokers' (* et ?) pour exprimer des s\u00e9lections plus larges. La variable r\u00e9sultante est une variable dimensionn\u00e9e qui poss\u00e8de une ligne par ligne de la table.","title":"Fonction CSVROW"},{"location":"Fonctions/CSVROW1/#syntaxe","text":"Q01.CSVROW(TableExpression) ou _CSVROW(Q01; TableExpression) **Nom ** **Type ** Description Remarque TableExpression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res d\u00e9crivant le nom et l'onglet du classeur Excel contenant la table externe \u00e0 utiliser Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CSVROW1/#exemples","text":"Q01A.CSVROW(\"COUNTRIES\") Retourne une variable dont les lignes correspondent aux regroupements textuels list\u00e9s dans la table en argument. Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/CTOD1/","text":"CTOD Fonction CTOD La fonction CTOD transforme une variable num\u00e9rique en variable logique (Discr\u00e8te). Il suffit de lister les bornes inf\u00e9rieures des diff\u00e9rentes tranches pour cr\u00e9er une nouvelle variable dont chaque modalit\u00e9 correspond \u00e0 une tranche. Syntaxe n\u00b01 : Cr\u00e9ation de classes d'effectif constant Q01.CTOD(Nb; Factor) ou _CTOD(Q01; Nb; Factor) **Nom ** **Type ** Description Remarque 1 Nb Entier Nombre de classes \u00e0 cr\u00e9er Obligatoire 2 Factor Entier Si N, les bornes sont des multiples de N -1 par d\u00e9faut Remarque : Si la variable de abse est dimensionn\u00e9e, les bornes des classes sont determin\u00e9es par le premier item et appliqu\u00e9es \u00e0 toutes les items. Syntaxe n\u00b02 : Cr\u00e9ation de classes par indication des bornes inf\u00e9rieures Q01.CTOD(Boundaries) ou _CTOD(Q01; Boundaries) **Nom ** **Type ** Description Remarque Boundaries Liste de nombres Liste des bornes inf\u00e9rieures des classes \u00e0 cr\u00e9er Obligatoire Syntaxe n\u00b03 : Cr\u00e9ation d'une modalit\u00e9 par valeur rencontr\u00e9e (distribution) Q01.CTOD() ou _CTOD(Q01) Exemples : S2.CTOD() D\u00e9termine la distribution des valeurs rencontr\u00e9es (cr\u00e9e une tranche par valeur rencontr\u00e9e). AGE.CTOD(0 25 50) Cr\u00e9e les tranches \"moins de 25\", \"de 25 \u00e0 moins de 50\" et \"50 et plus\". AGE.CTOD(4) Cr\u00e9e les quartiles. AGE.CTOD(0 50) Cr\u00e9e une tranche moins de 50 et une tranche \"50 et plus\". Voir aussi : Manipuler les variables num\u00e9riques","title":"CTOD"},{"location":"Fonctions/CTOD1/#ctod","text":"","title":"CTOD"},{"location":"Fonctions/CTOD1/#fonction-ctod","text":"La fonction CTOD transforme une variable num\u00e9rique en variable logique (Discr\u00e8te). Il suffit de lister les bornes inf\u00e9rieures des diff\u00e9rentes tranches pour cr\u00e9er une nouvelle variable dont chaque modalit\u00e9 correspond \u00e0 une tranche.","title":"Fonction CTOD"},{"location":"Fonctions/CTOD1/#syntaxe-n1-creation-de-classes-deffectif-constant","text":"Q01.CTOD(Nb; Factor) ou _CTOD(Q01; Nb; Factor) **Nom ** **Type ** Description Remarque 1 Nb Entier Nombre de classes \u00e0 cr\u00e9er Obligatoire 2 Factor Entier Si N, les bornes sont des multiples de N -1 par d\u00e9faut","title":"Syntaxe n\u00b01 : Cr\u00e9ation de classes d'effectif constant"},{"location":"Fonctions/CTOD1/#remarque","text":"Si la variable de abse est dimensionn\u00e9e, les bornes des classes sont determin\u00e9es par le premier item et appliqu\u00e9es \u00e0 toutes les items.","title":"Remarque :"},{"location":"Fonctions/CTOD1/#_1","text":"","title":"&nbsp;"},{"location":"Fonctions/CTOD1/#_2","text":"","title":"&nbsp;"},{"location":"Fonctions/CTOD1/#syntaxe-n2-creation-de-classes-par-indication-des-bornes-inferieures","text":"Q01.CTOD(Boundaries) ou _CTOD(Q01; Boundaries) **Nom ** **Type ** Description Remarque Boundaries Liste de nombres Liste des bornes inf\u00e9rieures des classes \u00e0 cr\u00e9er Obligatoire","title":"Syntaxe n\u00b02 : Cr\u00e9ation de classes par indication des bornes inf\u00e9rieures&nbsp;"},{"location":"Fonctions/CTOD1/#syntaxe-n3-creation-dune-modalite-par-valeur-rencontree-distribution","text":"Q01.CTOD() ou _CTOD(Q01)","title":"Syntaxe n\u00b03 : Cr\u00e9ation d'une modalit\u00e9 par valeur rencontr\u00e9e (distribution)"},{"location":"Fonctions/CTOD1/#exemples","text":"S2.CTOD() D\u00e9termine la distribution des valeurs rencontr\u00e9es (cr\u00e9e une tranche par valeur rencontr\u00e9e). AGE.CTOD(0 25 50) Cr\u00e9e les tranches \"moins de 25\", \"de 25 \u00e0 moins de 50\" et \"50 et plus\". AGE.CTOD(4) Cr\u00e9e les quartiles. AGE.CTOD(0 50) Cr\u00e9e une tranche moins de 50 et une tranche \"50 et plus\". Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/CTOT1/","text":"CTOT Fonction CTOT La fonction CTOT transforme une variable num\u00e9rique en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\". Syntaxe : Q01.CTOT(Format; NoAnswersValue) ou _CTOT(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format num\u00e9rique \u00e0 utiliser vide par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Texte associ\u00e9 aux sans-r\u00e9ponse vide par d\u00e9faut Exemples : S2.CTOT(\"000\") Retourne une variable litt\u00e9rale dont le texte est l'\u00e2ge format\u00e9 sur 3 positions compl\u00e9t\u00e9es par des 0. DELTA.CTOT('+00;-00;\"=\"') Retourne une variable litt\u00e9rale dont les textes sont le delta format\u00e9 sur 2 positions compl\u00e9t\u00e9es par des 0, sign\u00e9es avec la valeur nulle remplac\u00e9e par le signe \"=\". S2.CTOT('0\" ans\"'; \"-\") Retourne une variable litt\u00e9rale dont les textes sont form\u00e9s par l'\u00e2ge format\u00e9 suivi de la cha\u00eene de caract\u00e8res \" ans\". Les sans-r\u00e9ponse re\u00e7oivent la cha\u00eene \"-\" Remarque : Il est toujours possible d'utiliser la fonction NATOVAL pour cont\u00f4ler le comportement des sans-r\u00e9ponses. Voir aussi : Manipuler les variables num\u00e9riques","title":"CTOT"},{"location":"Fonctions/CTOT1/#ctot","text":"","title":"CTOT"},{"location":"Fonctions/CTOT1/#fonction-ctot","text":"La fonction CTOT transforme une variable num\u00e9rique en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\".","title":"Fonction CTOT"},{"location":"Fonctions/CTOT1/#syntaxe","text":"Q01.CTOT(Format; NoAnswersValue) ou _CTOT(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format num\u00e9rique \u00e0 utiliser vide par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Texte associ\u00e9 aux sans-r\u00e9ponse vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CTOT1/#exemples","text":"S2.CTOT(\"000\") Retourne une variable litt\u00e9rale dont le texte est l'\u00e2ge format\u00e9 sur 3 positions compl\u00e9t\u00e9es par des 0. DELTA.CTOT('+00;-00;\"=\"') Retourne une variable litt\u00e9rale dont les textes sont le delta format\u00e9 sur 2 positions compl\u00e9t\u00e9es par des 0, sign\u00e9es avec la valeur nulle remplac\u00e9e par le signe \"=\". S2.CTOT('0\" ans\"'; \"-\") Retourne une variable litt\u00e9rale dont les textes sont form\u00e9s par l'\u00e2ge format\u00e9 suivi de la cha\u00eene de caract\u00e8res \" ans\". Les sans-r\u00e9ponse re\u00e7oivent la cha\u00eene \"-\"","title":"Exemples :"},{"location":"Fonctions/CTOT1/#remarque","text":"Il est toujours possible d'utiliser la fonction NATOVAL pour cont\u00f4ler le comportement des sans-r\u00e9ponses.","title":"Remarque :"},{"location":"Fonctions/CTOT1/#_1","text":"Voir aussi : Manipuler les variables num\u00e9riques","title":"&nbsp;"},{"location":"Fonctions/CUMCOL/","text":"CUMCOL Fonction CUMCOL La fonction CUMCOL permet de cumuler les colonnes d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re colonne, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res colonnes, etc. Syntaxe : Q01.CUMCOL() ou _CUMCOL(Q01) Exemples : S1.CUMCOL() Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"CUMCOL"},{"location":"Fonctions/CUMCOL/#cumcol","text":"","title":"CUMCOL"},{"location":"Fonctions/CUMCOL/#fonction-cumcol","text":"La fonction CUMCOL permet de cumuler les colonnes d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re colonne, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res colonnes, etc.","title":"Fonction CUMCOL"},{"location":"Fonctions/CUMCOL/#syntaxe","text":"Q01.CUMCOL() ou _CUMCOL(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CUMCOL/#exemples","text":"S1.CUMCOL() Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/CUMMOD/","text":"CUMMOD Fonction CUMMOD La fonction CUMMOD permet de cumuler les modalit\u00e9s d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re modalit\u00e9, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res modalit\u00e9s, etc. Syntaxe : Q01.CUMMOD() ou _CUMMOD(Q01) Exemples : S1.CUMMOD() Cette fonction peut, par exemple, s'utiliser dans le cas de l'\u00e9tude du prix psychologique. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"CUMMOD"},{"location":"Fonctions/CUMMOD/#cummod","text":"","title":"CUMMOD"},{"location":"Fonctions/CUMMOD/#fonction-cummod","text":"La fonction CUMMOD permet de cumuler les modalit\u00e9s d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re modalit\u00e9, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res modalit\u00e9s, etc.","title":"Fonction CUMMOD"},{"location":"Fonctions/CUMMOD/#syntaxe","text":"Q01.CUMMOD() ou _CUMMOD(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CUMMOD/#exemples","text":"S1.CUMMOD() Cette fonction peut, par exemple, s'utiliser dans le cas de l'\u00e9tude du prix psychologique. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/CUMROW/","text":"CUMROW Fonction CUMROW La fonction CUMROW permet de cumuler les lignes d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ligne, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res lignes, etc. Syntaxe : Q01.CUMROW() ou _CUMROW(Q01) Exemples : S1.CUMROW() Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"CUMROW"},{"location":"Fonctions/CUMROW/#cumrow","text":"","title":"CUMROW"},{"location":"Fonctions/CUMROW/#fonction-cumrow","text":"La fonction CUMROW permet de cumuler les lignes d'une variable : ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ligne, puis ceux qui ont r\u00e9pondu \u00e0 la premi\u00e8re ou \u00e0 la deuxi\u00e8me, puis ceux qui ont r\u00e9pondu \u00e0 moins une des trois premi\u00e8res lignes, etc.","title":"Fonction CUMROW"},{"location":"Fonctions/CUMROW/#syntaxe","text":"Q01.CUMROW() ou _CUMROW(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/CUMROW/#exemples","text":"S1.CUMROW() Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/DATE1/","text":"DATE Fonction DATE La fonction DATE cr\u00e9e une variable temporelle constante dont les composantes sont d\u00e9finies une \u00e0 une, par les arguments. La variable sera cr\u00e9e sur le niveau sp\u00e9cifi\u00e9 en premier argument. Syntaxe : _DATE(LevelName; Year; Month; Day; Hour; Minute; Second; Millisecond) Nom Type Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau cible Obligatoire 2 Year Entier Ann\u00e9e 0 par d\u00e9faut 3 Month Entier Mois (de 1 \u00e0 12) 0 par d\u00e9faut 4 Day Entier Jour (de 1 \u00e0 31) 0 par d\u00e9faut 5 Hour Entier Heure (de 0 \u00e0 23) 0 par d\u00e9faut 6 Minute Entier Minute (de 0 \u00e0 59) 0 par d\u00e9faut 7 Second Entier Seconde (de 9 \u00e0 59) 0 par d\u00e9faut 8 Millisecond Entier Millisecondes 0 par d\u00e9faut Exemples : _DATE(\"UNITS\";2020;3;17) Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DATE"},{"location":"Fonctions/DATE1/#date","text":"","title":"DATE"},{"location":"Fonctions/DATE1/#fonction-date","text":"La fonction DATE cr\u00e9e une variable temporelle constante dont les composantes sont d\u00e9finies une \u00e0 une, par les arguments. La variable sera cr\u00e9e sur le niveau sp\u00e9cifi\u00e9 en premier argument.","title":"Fonction DATE"},{"location":"Fonctions/DATE1/#syntaxe","text":"_DATE(LevelName; Year; Month; Day; Hour; Minute; Second; Millisecond) Nom Type Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau cible Obligatoire 2 Year Entier Ann\u00e9e 0 par d\u00e9faut 3 Month Entier Mois (de 1 \u00e0 12) 0 par d\u00e9faut 4 Day Entier Jour (de 1 \u00e0 31) 0 par d\u00e9faut 5 Hour Entier Heure (de 0 \u00e0 23) 0 par d\u00e9faut 6 Minute Entier Minute (de 0 \u00e0 59) 0 par d\u00e9faut 7 Second Entier Seconde (de 9 \u00e0 59) 0 par d\u00e9faut 8 Millisecond Entier Millisecondes 0 par d\u00e9faut","title":"Syntaxe :"},{"location":"Fonctions/DATE1/#exemples","text":"_DATE(\"UNITS\";2020;3;17) Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DATEDIST1/","text":"DATEDIST Fonction DATEDIST La fonction DATEDIST calcule une variable logique qui correspond \u00e0 la distribution d'une variable temporelle, selon une r\u00e9solution donn\u00e9e. YEAR Ann\u00e9e MONTH Mois DAY Jours WEEK Semaines HOUR Heures MINUTE Minutes SECOND Secondes Syntaxe : Q01.DATEDIST(Resolution; Format) ou _DATEDIST(Q01; Resolution; Format) **Nom ** **Type ** Description Remarque 1 Resolution Cha\u00eene de caract\u00e8res r\u00e9solution day/week/month/year vide par d\u00e9faut 2 Format Cha\u00eene de caract\u00e8res Format utilis\u00e9 pour libeller les modalit\u00e9s cr\u00e9\u00e9es vide par d\u00e9faut Remarques : Le format d\u00e9termine la fa\u00e7on de nommer les tranches. Le plus simple consiste \u00e0 laisser l'argument vide. Pour plus d'information sur les formats possibles : https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings Exemples : DATES.DATEDIST(\"MONTH\") Cr\u00e9e une variable logique dont les modalit\u00e9s sont les tranches mensuelles de la plus petite date \u00e0 la plus grande date rencontr\u00e9e avec conservation des valeurs interm\u00e9diaires vides. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DATEDIST"},{"location":"Fonctions/DATEDIST1/#datedist","text":"","title":"DATEDIST"},{"location":"Fonctions/DATEDIST1/#fonction-datedist","text":"La fonction DATEDIST calcule une variable logique qui correspond \u00e0 la distribution d'une variable temporelle, selon une r\u00e9solution donn\u00e9e. YEAR Ann\u00e9e MONTH Mois DAY Jours WEEK Semaines HOUR Heures MINUTE Minutes SECOND Secondes","title":"Fonction DATEDIST"},{"location":"Fonctions/DATEDIST1/#syntaxe","text":"Q01.DATEDIST(Resolution; Format) ou _DATEDIST(Q01; Resolution; Format) **Nom ** **Type ** Description Remarque 1 Resolution Cha\u00eene de caract\u00e8res r\u00e9solution day/week/month/year vide par d\u00e9faut 2 Format Cha\u00eene de caract\u00e8res Format utilis\u00e9 pour libeller les modalit\u00e9s cr\u00e9\u00e9es vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DATEDIST1/#remarques","text":"Le format d\u00e9termine la fa\u00e7on de nommer les tranches. Le plus simple consiste \u00e0 laisser l'argument vide. Pour plus d'information sur les formats possibles : https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings","title":"Remarques :"},{"location":"Fonctions/DATEDIST1/#exemples","text":"DATES.DATEDIST(\"MONTH\") Cr\u00e9e une variable logique dont les modalit\u00e9s sont les tranches mensuelles de la plus petite date \u00e0 la plus grande date rencontr\u00e9e avec conservation des valeurs interm\u00e9diaires vides. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DATETIME1/","text":"DATETIME Fonction DATETIME La fonction DATETIME construit une nouvelle variable temporelle, depuis une date donn\u00e9e sous forme de cha\u00eene de caract\u00e8res. Syntaxe : _DATETIME(Level; Value; Format) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Cha\u00eene de caract\u00e8res La valeur de la date \u00e0 d\u00e9coder Obligatoire 3 Format Cha\u00eene de caract\u00e8res Format de d\u00e9codage de la date vide par d\u00e9faut Remarques : Attention ! dans l'expression du format, la casse est importante : respectez bien les majuscules et les minuscules ! y Ann\u00e9e M Mois d Jours H Heures m Minutes s Secondes f Fractions de seconde Exemples : _DATETIME(\"UNITS\"; \"4/10/1957\"; \"d/M/yyyy\") Cr\u00e9e la variable du 4 octobre 1957. (Consultez les fonctions _NOW ou SYS pour cr\u00e9er une variable qui correspond \u00e0 la date actuelle) Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DATETIME"},{"location":"Fonctions/DATETIME1/#datetime","text":"","title":"DATETIME"},{"location":"Fonctions/DATETIME1/#fonction-datetime","text":"La fonction DATETIME construit une nouvelle variable temporelle, depuis une date donn\u00e9e sous forme de cha\u00eene de caract\u00e8res.","title":"Fonction DATETIME"},{"location":"Fonctions/DATETIME1/#syntaxe","text":"_DATETIME(Level; Value; Format) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Cha\u00eene de caract\u00e8res La valeur de la date \u00e0 d\u00e9coder Obligatoire 3 Format Cha\u00eene de caract\u00e8res Format de d\u00e9codage de la date vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DATETIME1/#remarques","text":"Attention ! dans l'expression du format, la casse est importante : respectez bien les majuscules et les minuscules ! y Ann\u00e9e M Mois d Jours H Heures m Minutes s Secondes f Fractions de seconde","title":"Remarques :"},{"location":"Fonctions/DATETIME1/#exemples","text":"_DATETIME(\"UNITS\"; \"4/10/1957\"; \"d/M/yyyy\") Cr\u00e9e la variable du 4 octobre 1957. (Consultez les fonctions _NOW ou SYS pour cr\u00e9er une variable qui correspond \u00e0 la date actuelle) Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DAY1/","text":"DAY Fonction DAY La fonction DAY construit une variable num\u00e9rique retournant la composante \"JOUR\" de la date plac\u00e9e en argument. Syntaxe : Q01.DAY() ou _DAY(Q01) Exemples : DATES.DAY() D\u00e9code la variable temporelle DATES et retourne la valeur des jours. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DAY"},{"location":"Fonctions/DAY1/#day","text":"","title":"DAY"},{"location":"Fonctions/DAY1/#fonction-day","text":"La fonction DAY construit une variable num\u00e9rique retournant la composante \"JOUR\" de la date plac\u00e9e en argument.","title":"Fonction DAY"},{"location":"Fonctions/DAY1/#syntaxe","text":"Q01.DAY() ou _DAY(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DAY1/#exemples","text":"DATES.DAY() D\u00e9code la variable temporelle DATES et retourne la valeur des jours. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DAYOFWEEK1/","text":"DAYOFWEEK Fonction DAYOFWEEK La fonction DAYOFWEEK construit une variable num\u00e9rique retournant la valeur du jour de la semaine de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.DAYOFWEEK() ou _DAYOFWEEK(Q01) Exemples : DATES.DAYOFWEEK() D\u00e9code la variable temporelle DATES et retourne la valeur du jour de la semaine avec : 0 = dimanche 1 = lundi 2 = mardi 3 = mercredi 4 = jeudi 5 = vendredi 6 = samedi Le 23 juin 1912 est un dimanche, cod\u00e9 0. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DAYOFWEEK"},{"location":"Fonctions/DAYOFWEEK1/#dayofweek","text":"","title":"DAYOFWEEK"},{"location":"Fonctions/DAYOFWEEK1/#fonction-dayofweek","text":"La fonction DAYOFWEEK construit une variable num\u00e9rique retournant la valeur du jour de la semaine de la variable temporelle plac\u00e9e en argument.","title":"Fonction DAYOFWEEK"},{"location":"Fonctions/DAYOFWEEK1/#syntaxe","text":"Q01.DAYOFWEEK() ou _DAYOFWEEK(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DAYOFWEEK1/#exemples","text":"DATES.DAYOFWEEK() D\u00e9code la variable temporelle DATES et retourne la valeur du jour de la semaine avec : 0 = dimanche 1 = lundi 2 = mardi 3 = mercredi 4 = jeudi 5 = vendredi 6 = samedi Le 23 juin 1912 est un dimanche, cod\u00e9 0. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DAYOFYEAR1/","text":"DAYOFYEAR Fonction DAYOFYEAR La fonction DAYOFYEAR construit une variable num\u00e9rique retournant le num\u00e9ro du jour dans l'ann\u00e9e de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.DAYOFYEAR() ou _DAYOFYEAR(Q01) Exemples : DATES.DAYOFYEAR() D\u00e9code la variable temporelle DATES et retourne le num\u00e9ro du jour dans l'ann\u00e9e Le 21 juillet 1969 est le 202e jour de l'ann\u00e9e 1969. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DAYOFYEAR"},{"location":"Fonctions/DAYOFYEAR1/#dayofyear","text":"","title":"DAYOFYEAR"},{"location":"Fonctions/DAYOFYEAR1/#fonction-dayofyear","text":"La fonction DAYOFYEAR construit une variable num\u00e9rique retournant le num\u00e9ro du jour dans l'ann\u00e9e de la variable temporelle plac\u00e9e en argument.","title":"Fonction DAYOFYEAR"},{"location":"Fonctions/DAYOFYEAR1/#syntaxe","text":"Q01.DAYOFYEAR() ou _DAYOFYEAR(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DAYOFYEAR1/#exemples","text":"DATES.DAYOFYEAR() D\u00e9code la variable temporelle DATES et retourne le num\u00e9ro du jour dans l'ann\u00e9e Le 21 juillet 1969 est le 202e jour de l'ann\u00e9e 1969. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DAYS1/","text":"DAYS Fonction DAYS La fonction DAYS traduit une variable de dur\u00e9e en variable num\u00e9rique. Syntaxe : Q01.DAYS(TotalCount; NaValue) ou _DAYS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"JOURS\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : DURATION.DAYS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"jour\" de la variable DURATION. DURATION.DAYS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de jours. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DAYS"},{"location":"Fonctions/DAYS1/#days","text":"","title":"DAYS"},{"location":"Fonctions/DAYS1/#fonction-days","text":"La fonction DAYS traduit une variable de dur\u00e9e en variable num\u00e9rique.","title":"Fonction DAYS"},{"location":"Fonctions/DAYS1/#syntaxe","text":"Q01.DAYS(TotalCount; NaValue) ou _DAYS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"JOURS\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DAYS1/#exemples","text":"DURATION.DAYS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"jour\" de la variable DURATION. DURATION.DAYS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de jours. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DELCOL1/","text":"DELCOL Fonction DELCOL La fonction DELCOL supprime la dimension colonnes d'une variable (si elle existe) \u00e0 l'aide d'un op\u00e9rateur de r\u00e9duction . Une batterie d'items est ainsi synth\u00e9tis\u00e9e en une variable simple par combinaison logique de ses modalit\u00e9s. Il est possible de sp\u00e9cifier un op\u00e9rateur de r\u00e9duction particulier en argument (son nom entre double-quotes). Consultez la table des op\u00e9rateurs de r\u00e9duction pour avoir la liste des diff\u00e9rentes possibilit\u00e9s. Syntaxe : Q01.DELCOL(Reducer) ou _DELCOL(Q01; Reducer) **Nom ** **Type ** Description Remarque Reducer Cha\u00eene de caract\u00e8res Op\u00e9rateur de r\u00e9duction, par d\u00e9faut OU pour les variables logiques, SUM pour les variables num\u00e9riques NUL par d\u00e9faut Exemples : S1.DELCOL() Supprime les colonnes d'une variable \u00e0 l'aide de l'op\u00e9rateur standard (OU pour les logiques et SUM pour les num\u00e9riques). S1.DELCOL(\"MEAN\") Supprime les colonnes d'une variable continue \u00e0 l'aide de l'op\u00e9rateur de calcul des moyennes. Voir aussi : Gestion des dimensions","title":"DELCOL"},{"location":"Fonctions/DELCOL1/#delcol","text":"","title":"DELCOL"},{"location":"Fonctions/DELCOL1/#fonction-delcol","text":"La fonction DELCOL supprime la dimension colonnes d'une variable (si elle existe) \u00e0 l'aide d'un op\u00e9rateur de r\u00e9duction . Une batterie d'items est ainsi synth\u00e9tis\u00e9e en une variable simple par combinaison logique de ses modalit\u00e9s. Il est possible de sp\u00e9cifier un op\u00e9rateur de r\u00e9duction particulier en argument (son nom entre double-quotes). Consultez la table des op\u00e9rateurs de r\u00e9duction pour avoir la liste des diff\u00e9rentes possibilit\u00e9s.","title":"Fonction DELCOL"},{"location":"Fonctions/DELCOL1/#syntaxe","text":"Q01.DELCOL(Reducer) ou _DELCOL(Q01; Reducer) **Nom ** **Type ** Description Remarque Reducer Cha\u00eene de caract\u00e8res Op\u00e9rateur de r\u00e9duction, par d\u00e9faut OU pour les variables logiques, SUM pour les variables num\u00e9riques NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELCOL1/#exemples","text":"S1.DELCOL() Supprime les colonnes d'une variable \u00e0 l'aide de l'op\u00e9rateur standard (OU pour les logiques et SUM pour les num\u00e9riques). S1.DELCOL(\"MEAN\") Supprime les colonnes d'une variable continue \u00e0 l'aide de l'op\u00e9rateur de calcul des moyennes. Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/DELMOD1/","text":"DELMOD Fonction DELMOD La fonction DELMOD supprime les modalit\u00e9s d'une variable sur la base d'un seuil exprim\u00e9 en nombre d'individus. Pour supprimer des modalit\u00e9s pr\u00e9cises (par position ou autres), allez voir REMMOD et HIDEMOD. Syntaxe : Q01.DELMOD(Value; GenerateOthers; Weighted) ou _DELMOD(Q01; Value; GenerateOthers; Weighted) **Nom ** **Type ** Description Remarque 1 Threshold Nombre Par d\u00e9faut 0, seuil d'effectif minimum de conservation des modalit\u00e9s 0 par d\u00e9faut 2 GenerateOthers Bool\u00e9en Par d\u00e9faut pas de modalit\u00e9s \"Autres\", Cr\u00e9e une modalit\u00e9s \"Autres\" si TRUE FALSE par d\u00e9faut 3 Weighted Variable Nom de la variable de pond\u00e9ration NONE par d\u00e9faut 4 IncludeThreshold Bool\u00e9en Si activ\u00e9, les modalit\u00e9s atteignant le seuil sont conserv\u00e9es. Sinon elles sont supprim\u00e9es FALSE par d\u00e9faut 5 Divisor (ou Base) Nom Si d\u00e9finie, le seuil de conservation est le pourcentage des modalit\u00e9s sur la base indiqu\u00e9e : \"R\" pour les r\u00e9pondants \"A\" pour les r\u00e9ponses \"I\" pour les interrog\u00e9s \"N\" pour les sans-r\u00e9ponses NONE par d\u00e9faut, alors seuil en effectif 6 Universe Variable Nom de la variable univers \u00e0 utiliser pour le calcul des statistiques. Si vide pas d'univers NONE par d\u00e9faut Remarques : La modalit\u00e9 \"Autres\" est automatiquement \u00e9pingl\u00e9e donc exclue des tris hi\u00e9rarchiques (cf. PINMOD ). DELMOD est tr\u00e8s diff\u00e9rent de DELCOL et DELROW. Exemples : S1.DELMOD() Supprime toutes les modalit\u00e9s vides. S1.DELMOD(30) Supprime toutes les modalit\u00e9s dont l'effectif est inf\u00e9rieur ou \u00e9gal \u00e0 trente. S1.DELMOD(30; TRUE) Supprime toutes les modalit\u00e9s dont l'effectif est inf\u00e9rieur ou \u00e9gal \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9). S1.DELMOD(30; TRUE; TRUE) Supprime toutes les modalit\u00e9s dont l'effectif pond\u00e9r\u00e9 est inf\u00e9rieur \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9) en tenant compte de la pond\u00e9ration de la variable. S1.DELMOD(30; TRUE; WEIGHT) Supprime toutes les modalit\u00e9s dont l'effectif pond\u00e9r\u00e9 est inf\u00e9rieur \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9) en appliquant la pond\u00e9ration WEIGHT. S1.DELMOD(10; FALSE; NONE;FALSE;\"R\";NONE) Supprime toutes les modalit\u00e9s dont le pourcentage brut est inf\u00e9rieur \u00e0 10% sur la base des r\u00e9pondants. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"DELMOD"},{"location":"Fonctions/DELMOD1/#delmod","text":"","title":"DELMOD"},{"location":"Fonctions/DELMOD1/#fonction-delmod","text":"La fonction DELMOD supprime les modalit\u00e9s d'une variable sur la base d'un seuil exprim\u00e9 en nombre d'individus. Pour supprimer des modalit\u00e9s pr\u00e9cises (par position ou autres), allez voir REMMOD et HIDEMOD.","title":"Fonction DELMOD"},{"location":"Fonctions/DELMOD1/#syntaxe","text":"Q01.DELMOD(Value; GenerateOthers; Weighted) ou _DELMOD(Q01; Value; GenerateOthers; Weighted) **Nom ** **Type ** Description Remarque 1 Threshold Nombre Par d\u00e9faut 0, seuil d'effectif minimum de conservation des modalit\u00e9s 0 par d\u00e9faut 2 GenerateOthers Bool\u00e9en Par d\u00e9faut pas de modalit\u00e9s \"Autres\", Cr\u00e9e une modalit\u00e9s \"Autres\" si TRUE FALSE par d\u00e9faut 3 Weighted Variable Nom de la variable de pond\u00e9ration NONE par d\u00e9faut 4 IncludeThreshold Bool\u00e9en Si activ\u00e9, les modalit\u00e9s atteignant le seuil sont conserv\u00e9es. Sinon elles sont supprim\u00e9es FALSE par d\u00e9faut 5 Divisor (ou Base) Nom Si d\u00e9finie, le seuil de conservation est le pourcentage des modalit\u00e9s sur la base indiqu\u00e9e : \"R\" pour les r\u00e9pondants \"A\" pour les r\u00e9ponses \"I\" pour les interrog\u00e9s \"N\" pour les sans-r\u00e9ponses NONE par d\u00e9faut, alors seuil en effectif 6 Universe Variable Nom de la variable univers \u00e0 utiliser pour le calcul des statistiques. Si vide pas d'univers NONE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELMOD1/#remarques","text":"La modalit\u00e9 \"Autres\" est automatiquement \u00e9pingl\u00e9e donc exclue des tris hi\u00e9rarchiques (cf. PINMOD ). DELMOD est tr\u00e8s diff\u00e9rent de DELCOL et DELROW.","title":"Remarques :"},{"location":"Fonctions/DELMOD1/#exemples","text":"S1.DELMOD() Supprime toutes les modalit\u00e9s vides. S1.DELMOD(30) Supprime toutes les modalit\u00e9s dont l'effectif est inf\u00e9rieur ou \u00e9gal \u00e0 trente. S1.DELMOD(30; TRUE) Supprime toutes les modalit\u00e9s dont l'effectif est inf\u00e9rieur ou \u00e9gal \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9). S1.DELMOD(30; TRUE; TRUE) Supprime toutes les modalit\u00e9s dont l'effectif pond\u00e9r\u00e9 est inf\u00e9rieur \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9) en tenant compte de la pond\u00e9ration de la variable. S1.DELMOD(30; TRUE; WEIGHT) Supprime toutes les modalit\u00e9s dont l'effectif pond\u00e9r\u00e9 est inf\u00e9rieur \u00e0 trente et cr\u00e9e un sous-total \"autres\" qui les regroupe (en derni\u00e8re modalit\u00e9) en appliquant la pond\u00e9ration WEIGHT. S1.DELMOD(10; FALSE; NONE;FALSE;\"R\";NONE) Supprime toutes les modalit\u00e9s dont le pourcentage brut est inf\u00e9rieur \u00e0 10% sur la base des r\u00e9pondants. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/DELPREFIX1/","text":"DELPREFIX Fonction DELPREFIX La fonction DELPREFIX d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les modalit\u00e9s de la variable trait\u00e9e, puis le supprime. Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue. Syntaxe : Q01.DELPREFIX(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIX(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut Exemples : Q01.DELPREFIX(TRUE;TRUE;) Ici le pr\u00e9fixe commun est \" Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.( \" Avec cette d\u00e9finition les libell\u00e9s des modalit\u00e9s de la variable Q01 deviennent : Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Allemagne) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Autriche) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Belgique) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Danemark) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Espagne) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Finlande) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(France) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Gr\u00e8ce) Allemagne Autriche Belgique Danemark Espagne Finlande France Gr\u00e8ce Remarque : Si le libell\u00e9 se termine par une parenth\u00e8se \")\", elle est supprim\u00e9e. Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"DELPREFIX"},{"location":"Fonctions/DELPREFIX1/#delprefix","text":"","title":"DELPREFIX"},{"location":"Fonctions/DELPREFIX1/#fonction-delprefix","text":"La fonction DELPREFIX d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les modalit\u00e9s de la variable trait\u00e9e, puis le supprime. Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue.","title":"Fonction DELPREFIX"},{"location":"Fonctions/DELPREFIX1/#syntaxe","text":"Q01.DELPREFIX(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIX(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELPREFIX1/#exemples","text":"Q01.DELPREFIX(TRUE;TRUE;) Ici le pr\u00e9fixe commun est \" Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.( \" Avec cette d\u00e9finition les libell\u00e9s des modalit\u00e9s de la variable Q01 deviennent : Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Allemagne) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Autriche) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Belgique) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Danemark) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Espagne) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Finlande) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(France) Dans quelle mesure, retourneriez-vous dans les diff\u00e9rents pays cit\u00e9s ci-dessus.(Gr\u00e8ce) Allemagne Autriche Belgique Danemark Espagne Finlande France Gr\u00e8ce","title":"Exemples :"},{"location":"Fonctions/DELPREFIX1/#remarque","text":"Si le libell\u00e9 se termine par une parenth\u00e8se \")\", elle est supprim\u00e9e. Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"Remarque :"},{"location":"Fonctions/DELPREFIXCOL1/","text":"DELPREFIXCOL Fonction DELPREFIXCOL La fonction DELPREFIXCOL d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les colonnes de la variable trait\u00e9e, puis le supprime. Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue. Syntaxe : Q01.DELPREFIXCOL(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIXCOL(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"DELPREFIXCOL"},{"location":"Fonctions/DELPREFIXCOL1/#delprefixcol","text":"","title":"DELPREFIXCOL"},{"location":"Fonctions/DELPREFIXCOL1/#fonction-delprefixcol","text":"La fonction DELPREFIXCOL d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les colonnes de la variable trait\u00e9e, puis le supprime. Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue.","title":"Fonction DELPREFIXCOL"},{"location":"Fonctions/DELPREFIXCOL1/#syntaxe","text":"Q01.DELPREFIXCOL(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIXCOL(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELPREFIXROW1/","text":"DELPREFIXROW Fonction DELPREFIXROW La fonction DELPREFIXROW d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les lignes de la variable trait\u00e9e, puis le supprime Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue. Syntaxe : Q01.DELPREFIXROW(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIXROW(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"DELPREFIXROW"},{"location":"Fonctions/DELPREFIXROW1/#delprefixrow","text":"","title":"DELPREFIXROW"},{"location":"Fonctions/DELPREFIXROW1/#fonction-delprefixrow","text":"La fonction DELPREFIXROW d\u00e9tecte le pr\u00e9fixe commun \u00e0 toutes les lignes de la variable trait\u00e9e, puis le supprime Il est possible de nettoyer les textes (suppression des blancs et caract\u00e8res ind\u00e9sirables en t\u00eate/fin de texte etc.) qui en r\u00e9sultent. Il est \u00e9galement possible d'affecter le pr\u00e9fixe d\u00e9tect\u00e9 au titre de la variable qui en r\u00e9sulte. Cette fonction est g\u00e9n\u00e9ralement appel\u00e9e apr\u00e8s une fusion (sur modalit\u00e9 ou sur dimension) pour ajuster les textes de la variable obtenue.","title":"Fonction DELPREFIXROW"},{"location":"Fonctions/DELPREFIXROW1/#syntaxe","text":"Q01.DELPREFIXROW(CleanText; ModifyTitle; PartDelimiter) ou _DELPREFIXROW(Q01; CleanText; ModifyTitle; PartDelimiter) **Nom ** **Type ** Description Remarque 1 CleanText Bool\u00e9en Nettoyage auto du texte si TRUE TRUE par d\u00e9faut 2 ModifyTitle Bool\u00e9en Le pr\u00e9fixe d\u00e9tect\u00e9 sera ajout\u00e9 dans le titre si TRUE TRUE par d\u00e9faut 3 PartDelimiter Caract\u00e8re Lorsqu'il existe, le s\u00e9parateur simplifie la d\u00e9tection du pr\u00e9fixe commun NUL par d\u00e9faut Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELST1/","text":"DELST Fonction DELST La fonction DELST supprime les sous-titres rencontr\u00e9s dans les modalit\u00e9s de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des modalit\u00e9s \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale. Syntaxe : Q01.DELST(Delimiter) ou _DELST(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur optionnel vide par d\u00e9faut Remarques : Les fonctions DELSTCOL et DELSTROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Exemples : BR1.DELST() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des modalit\u00e9s. BR1.DELST(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des modalit\u00e9s, mais indiqu\u00e9s dans chacune des modalit\u00e9s et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"DELST"},{"location":"Fonctions/DELST1/#delst","text":"","title":"DELST"},{"location":"Fonctions/DELST1/#fonction-delst","text":"La fonction DELST supprime les sous-titres rencontr\u00e9s dans les modalit\u00e9s de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des modalit\u00e9s \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale.","title":"Fonction DELST"},{"location":"Fonctions/DELST1/#syntaxe","text":"Q01.DELST(Delimiter) ou _DELST(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur optionnel vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELST1/#remarques","text":"Les fonctions DELSTCOL et DELSTROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source.","title":"Remarques :"},{"location":"Fonctions/DELST1/#exemples","text":"BR1.DELST() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des modalit\u00e9s. BR1.DELST(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des modalit\u00e9s, mais indiqu\u00e9s dans chacune des modalit\u00e9s et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/DELSTCOL1/","text":"DELSTCOL Fonction DELSTCOL La fonction DELSTCOL supprime les sous-titres rencontr\u00e9s dans les colonnes de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des colonnes \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale. Syntaxe : Q01.DELSTCOL(Delimiter) ou _DELSTCOL(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur optionnel vide par d\u00e9faut Exemples : Q01.DELSTCOL() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes. BR1.DELSTCOL(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes, mais indiqu\u00e9s dans chacune des colonnes et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"DELSTCOL"},{"location":"Fonctions/DELSTCOL1/#delstcol","text":"","title":"DELSTCOL"},{"location":"Fonctions/DELSTCOL1/#fonction-delstcol","text":"La fonction DELSTCOL supprime les sous-titres rencontr\u00e9s dans les colonnes de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des colonnes \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale.","title":"Fonction DELSTCOL"},{"location":"Fonctions/DELSTCOL1/#syntaxe","text":"Q01.DELSTCOL(Delimiter) ou _DELSTCOL(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur optionnel vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELSTCOL1/#exemples","text":"Q01.DELSTCOL() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes. BR1.DELSTCOL(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes, mais indiqu\u00e9s dans chacune des colonnes et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/DELSTROW1/","text":"DELSTROW Fonction DELSTROW La fonction DELSTROW supprime les sous-titres rencontr\u00e9s dans les lignes de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des lignes \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale. Syntaxe : Q01.DELSTROW(Delimiter) ou _DELSTROW(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur. vide par d\u00e9faut Exemples : Q01.DELSTCOL() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes. BR1.DELSTCOL(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes, mais indiqu\u00e9s dans chacune des colonnes et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"DELSTROW"},{"location":"Fonctions/DELSTROW1/#delstrow","text":"","title":"DELSTROW"},{"location":"Fonctions/DELSTROW1/#fonction-delstrow","text":"La fonction DELSTROW supprime les sous-titres rencontr\u00e9s dans les lignes de la variable trait\u00e9e. Deux modes de travail sont possibles : soit ils sont purement et simplement supprim\u00e9s, soit ils sont r\u00e9p\u00e9t\u00e9s au niveau des lignes \u00e0 l'aide d'un s\u00e9parateur, tout en respectant la hi\u00e9rarchie originale.","title":"Fonction DELSTROW"},{"location":"Fonctions/DELSTROW1/#syntaxe","text":"Q01.DELSTROW(Delimiter) ou _DELSTROW(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur. vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DELSTROW1/#exemples","text":"Q01.DELSTCOL() Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes. BR1.DELSTCOL(\" - \") Retourne une variable dont les sous-titres sont supprim\u00e9s de la liste des colonnes, mais indiqu\u00e9s dans chacune des colonnes et s\u00e9par\u00e9s par la cha\u00eene \" - \". Voir aussi : Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/DEPCOL1/","text":"DEPCOL Fonction DEPCOL La fonction DEPCOL \u00e9tale les d\u00e9tails d'une variable pour les positionner en modalit\u00e9s. Le nombre de modalit\u00e9s de la variable r\u00e9sultat est \u00e9gale au produit du nombre de modalit\u00e9s par le nombre de colonnes. La variable r\u00e9sultat n'a plus de dimension colonnes. Les d\u00e9tails d'origine sont transform\u00e9s en sous-titres, structurant les modalit\u00e9s du r\u00e9sultat. Syntaxe : Q01.DEPCOL() ou _DEPCOL(Q01) Exemples : Q02C.DEPCOL() Retourne une variable dont les modalit\u00e9s sont les modalit\u00e9s de la variable Q02C r\u00e9p\u00e9t\u00e9es pour chaque d\u00e9tail de la variable Q02C. La variable r\u00e9sultante n'a plus de d\u00e9tail en colonne. Voir aussi : Gestion des dimensions","title":"DEPCOL"},{"location":"Fonctions/DEPCOL1/#depcol","text":"","title":"DEPCOL"},{"location":"Fonctions/DEPCOL1/#fonction-depcol","text":"La fonction DEPCOL \u00e9tale les d\u00e9tails d'une variable pour les positionner en modalit\u00e9s. Le nombre de modalit\u00e9s de la variable r\u00e9sultat est \u00e9gale au produit du nombre de modalit\u00e9s par le nombre de colonnes. La variable r\u00e9sultat n'a plus de dimension colonnes. Les d\u00e9tails d'origine sont transform\u00e9s en sous-titres, structurant les modalit\u00e9s du r\u00e9sultat.","title":"Fonction DEPCOL"},{"location":"Fonctions/DEPCOL1/#syntaxe","text":"Q01.DEPCOL() ou _DEPCOL(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DEPCOL1/#exemples","text":"Q02C.DEPCOL() Retourne une variable dont les modalit\u00e9s sont les modalit\u00e9s de la variable Q02C r\u00e9p\u00e9t\u00e9es pour chaque d\u00e9tail de la variable Q02C. La variable r\u00e9sultante n'a plus de d\u00e9tail en colonne. Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/DEPTH/","text":"DEPTH Fonction DEPTH La fonction DEPTH permet de s\u00e9lectionner des modalit\u00e9s depuis un niveau hi\u00e9rarchique. Par exemple, si une variable VAGUE est pr\u00e9sent\u00e9e selon 3 niveaux : Ann\u00e9es, Trimestres, Mois (avec des sous-totaux), alors ilo est facile d'en d\u00e9duire une variable qui ne porte que sur les ann\u00e9es ou les trimestres. Syntaxe : Q01.DEPTH(Value) ou _DELSTROW(Q01; Delimiter) **Nom ** **Type ** Description Remarque Value Entier Niveau hi\u00e9rarchique de r\u00e9f\u00e9rence pour l'extraction des modalit\u00e9s Obligatoire Exemples : S1.DEPTH(2) Elimine les modalit\u00e9 dont la profondeur est sup\u00e9rieure \u00e0 2.","title":"DEPTH"},{"location":"Fonctions/DEPTH/#depth","text":"","title":"DEPTH"},{"location":"Fonctions/DEPTH/#fonction-depth","text":"La fonction DEPTH permet de s\u00e9lectionner des modalit\u00e9s depuis un niveau hi\u00e9rarchique. Par exemple, si une variable VAGUE est pr\u00e9sent\u00e9e selon 3 niveaux : Ann\u00e9es, Trimestres, Mois (avec des sous-totaux), alors ilo est facile d'en d\u00e9duire une variable qui ne porte que sur les ann\u00e9es ou les trimestres.","title":"Fonction DEPTH"},{"location":"Fonctions/DEPTH/#syntaxe","text":"Q01.DEPTH(Value) ou _DELSTROW(Q01; Delimiter) **Nom ** **Type ** Description Remarque Value Entier Niveau hi\u00e9rarchique de r\u00e9f\u00e9rence pour l'extraction des modalit\u00e9s Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DEPTH/#exemples","text":"S1.DEPTH(2) Elimine les modalit\u00e9 dont la profondeur est sup\u00e9rieure \u00e0 2.","title":"Exemples :"},{"location":"Fonctions/DIST1/","text":"DIST Fonction DIST La fonction DIST appliqu\u00e9e \u00e0 une variable calcule la distribution des valeurs rencontr\u00e9es. Pour les variables num\u00e9riques, il s'agit donc d'une \u00e9criture \u00e9quivalente \u00e0 la fonction CTOD sans argument. Mais la fonction DIST est plus g\u00e9n\u00e9rale : elle est applicable \u00e0 tout type de variable (litt\u00e9rale, date, dur\u00e9e, etc.). Syntaxe : Q01.DIST() ou _DIST(Q01) Exemples : S2.DIST() Cr\u00e9e une modalit\u00e9 par valeur rencontr\u00e9e (\u00e0 partir, par exemple, de la distribution de l'\u00e2ge). Voir aussi : Manipuler les variables num\u00e9riques","title":"DIST"},{"location":"Fonctions/DIST1/#dist","text":"","title":"DIST"},{"location":"Fonctions/DIST1/#fonction-dist","text":"La fonction DIST appliqu\u00e9e \u00e0 une variable calcule la distribution des valeurs rencontr\u00e9es. Pour les variables num\u00e9riques, il s'agit donc d'une \u00e9criture \u00e9quivalente \u00e0 la fonction CTOD sans argument. Mais la fonction DIST est plus g\u00e9n\u00e9rale : elle est applicable \u00e0 tout type de variable (litt\u00e9rale, date, dur\u00e9e, etc.).","title":"Fonction DIST"},{"location":"Fonctions/DIST1/#syntaxe","text":"Q01.DIST() ou _DIST(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIST1/#exemples","text":"S2.DIST() Cr\u00e9e une modalit\u00e9 par valeur rencontr\u00e9e (\u00e0 partir, par exemple, de la distribution de l'\u00e2ge). Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/DIV1/","text":"DIV Fonction DIV La fonction DIV s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le r\u00e9sultat de la division des arguments. La base du r\u00e9sultat correspond aux r\u00e9pondants aux 2 variables. Syntaxe : Q01.DIV(Variables) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : Pour que les sans-r\u00e9ponses soient ramen\u00e9s \u00e0 la valeur neutre, et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez DIVNA. Exemples : _DIV(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la division num\u00e9rique de Q04A par Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"DIV"},{"location":"Fonctions/DIV1/#div","text":"","title":"DIV"},{"location":"Fonctions/DIV1/#fonction-div","text":"La fonction DIV s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le r\u00e9sultat de la division des arguments. La base du r\u00e9sultat correspond aux r\u00e9pondants aux 2 variables.","title":"Fonction DIV"},{"location":"Fonctions/DIV1/#syntaxe","text":"Q01.DIV(Variables) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIV1/#remarques","text":"Pour que les sans-r\u00e9ponses soient ramen\u00e9s \u00e0 la valeur neutre, et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez DIVNA.","title":"Remarques :"},{"location":"Fonctions/DIV1/#exemples","text":"_DIV(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la division num\u00e9rique de Q04A par Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/DIVCOL1/","text":"DIVCOL Fonction DIVCOL La fonction DIVCOL permet de modifier le diviseur associ\u00e9 aux colonnes d'une variable dimensionn\u00e9e. Syntaxe : Q01.DIVCOL(Values; s\u00e9lection) ou _DIVCOL(Q01; Values; s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut Remarques : La fonction DIVCOL conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine. Exemples : S1.DIVCOL(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"DIVCOL"},{"location":"Fonctions/DIVCOL1/#divcol","text":"","title":"DIVCOL"},{"location":"Fonctions/DIVCOL1/#fonction-divcol","text":"La fonction DIVCOL permet de modifier le diviseur associ\u00e9 aux colonnes d'une variable dimensionn\u00e9e.","title":"Fonction DIVCOL"},{"location":"Fonctions/DIVCOL1/#syntaxe","text":"Q01.DIVCOL(Values; s\u00e9lection) ou _DIVCOL(Q01; Values; s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIVCOL1/#remarques","text":"La fonction DIVCOL conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine.","title":"Remarques :"},{"location":"Fonctions/DIVCOL1/#exemples","text":"S1.DIVCOL(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/DIVMOD1/","text":"DIVMOD Fonction DIVMOD La fonction DIVMOD permet de modifier le diviseur associ\u00e9 aux modalit\u00e9s d'une variable logique. Syntaxe : Q01.DIVMOD(Values; s\u00e9lection) ou _DIVMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut Remarques : La fonction DIVMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine. Exemples : S1.DIVMOD(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"DIVMOD"},{"location":"Fonctions/DIVMOD1/#divmod","text":"","title":"DIVMOD"},{"location":"Fonctions/DIVMOD1/#fonction-divmod","text":"La fonction DIVMOD permet de modifier le diviseur associ\u00e9 aux modalit\u00e9s d'une variable logique.","title":"Fonction DIVMOD"},{"location":"Fonctions/DIVMOD1/#syntaxe","text":"Q01.DIVMOD(Values; s\u00e9lection) ou _DIVMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIVMOD1/#remarques","text":"La fonction DIVMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine.","title":"Remarques :"},{"location":"Fonctions/DIVMOD1/#exemples","text":"S1.DIVMOD(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/DIVNA1/","text":"DIVNA Fonction DIVNA La fonction DIVNA s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le r\u00e9sultat de la division des arguments. La base du r\u00e9sultat correspond aux interrog\u00e9s aux 2 variables. DIVNA est insensible aux sans-r\u00e9ponses (NA). Syntaxe : Q01.DIVNA(s\u00e9lection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _DIVNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la division num\u00e9rique de Q04A par Q04B. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables _DIV","title":"DIVNA"},{"location":"Fonctions/DIVNA1/#divna","text":"","title":"DIVNA"},{"location":"Fonctions/DIVNA1/#fonction-divna","text":"La fonction DIVNA s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le r\u00e9sultat de la division des arguments. La base du r\u00e9sultat correspond aux interrog\u00e9s aux 2 variables. DIVNA est insensible aux sans-r\u00e9ponses (NA).","title":"Fonction DIVNA"},{"location":"Fonctions/DIVNA1/#syntaxe","text":"Q01.DIVNA(s\u00e9lection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIVNA1/#exemples","text":"_DIVNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la division num\u00e9rique de Q04A par Q04B. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables _DIV","title":"Exemples :"},{"location":"Fonctions/DIVROW1/","text":"DIVROW Fonction DIVROW La fonction DIVROW permet de modifier le diviseur associ\u00e9 aux lignes d'une variable dimensionn\u00e9e. Syntaxe : Q01.DIVROW(Values; s\u00e9lection) ou _DIVROW(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut Remarques : La fonction DIVROW conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine. Exemples : S1.DIVROW(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"DIVROW"},{"location":"Fonctions/DIVROW1/#divrow","text":"","title":"DIVROW"},{"location":"Fonctions/DIVROW1/#fonction-divrow","text":"La fonction DIVROW permet de modifier le diviseur associ\u00e9 aux lignes d'une variable dimensionn\u00e9e.","title":"Fonction DIVROW"},{"location":"Fonctions/DIVROW1/#syntaxe","text":"Q01.DIVROW(Values; s\u00e9lection) ou _DIVROW(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers valeurs du diviseur Obligatoire 2 s\u00e9lection Liste de valeurs liste des positions affect\u00e9es vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DIVROW1/#remarques","text":"La fonction DIVROW conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine.","title":"Remarques :"},{"location":"Fonctions/DIVROW1/#exemples","text":"S1.DIVROW(1 1 1 2 2) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/DTOC1/","text":"DTOC Fonction DTOC La fonction DTOC construit une variable num\u00e9rique depuis une variable logique en assignant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique. Chaque r\u00e9pondant re\u00e7oit ainsi la valeur num\u00e9rique associ\u00e9e \u00e0 sa modalit\u00e9 de r\u00e9ponse. Cette fonction est utile pour calculer par exemple des scores moyens sur des \u00e9chelles. Les valeurs associ\u00e9es aux modalit\u00e9s peuvent \u00eatre sp\u00e9cifi\u00e9es dans la variable elle-m\u00eame via sont r\u00e9ducteur, ou directement dans l'appel de fonction, au choix. Par d\u00e9faut, le r\u00e9ducteur est utilis\u00e9 en tant que valeurs associ\u00e9es Syntaxe : Q01.DTOC(Values) ou _DTOC(Q01; Values) **Nom ** **Type ** Description Remarque Values Liste de nombres ou un code Valeurs affect\u00e9es aux modalit\u00e9s OU BIEN Codes possibles : \"N\" pour le num\u00e9ro de modalit\u00e9 \"T\" pour le texte de modalit\u00e9 \"R\" pour le r\u00e9ducteur de modalit\u00e9 \"C\" pour le code de modalit\u00e9 Obligatoire Remarques : Sur une variable multi-r\u00e9ponses avec un r\u00e9ducteur \u00e0 1, la fonction retourne en standard le nombre de r\u00e9ponses cit\u00e9es. La valeur particuli\u00e8re Na (ou NAn) indique que la modalit\u00e9 associ\u00e9e sera exclue dans la conversion en valeur num\u00e9rique. Cette valeur est associ\u00e9e par d\u00e9faut aux sous-totaux issus de regroupement de modalit\u00e9s. Attention un r\u00e9ducteur \u00e0 0 n'exclut pas la modalit\u00e9 associ\u00e9e de la variable cr\u00e9\u00e9e. La fonction DTOC conserve les dimensions et l'univers de la variable source. Exemples : Q02C.DTOC(10 20 30 40 50) Cet appel applique une conversion num\u00e9rique en assignant les valeurs 10, 20, 30, 40 et 50 aux modalit\u00e9s 1 \u00e0 5 de la variable Q02C. La variable r\u00e9sultante est une quantit\u00e9 dont la moyenne est ainsi comprise entre 10 et 50. Q02C.DTOC() Cet appel est similaire au pr\u00e9c\u00e9dent \u00e0 la diff\u00e9rence que les coefficients appliqu\u00e9s aux modalit\u00e9s sont lus dans la variable Q02C, directement (le \"r\u00e9ducteur\"). S3.DTOC(\"T\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique d\u00e9duite du libell\u00e9 (du Texte). S3.DTOC(\"N\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 son num\u00e9ro de modalit\u00e9 comme valeur num\u00e9rique. S3.DTOC(\"C\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique d\u00e9duite du code. Il est possible d'exploiter les propri\u00e9t\u00e9s des d\u00e9tails Lignes/Colonnes lors de la g\u00e9n\u00e9ration num\u00e9rique bas\u00e9e sur des propri\u00e9t\u00e9s (codes, textes, etc.). Pour ce faire, il suffit de pr\u00e9fixer par \"C\" pour utiliser les propri\u00e9tes des Colonnes et par \"R\" pour les propri\u00e9t\u00e9s des Lignes. Q12.DTOC(\"CC\") Cette d\u00e9finition cr\u00e9e une variable continue dont la valeur est le code des colonnes. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"DTOC"},{"location":"Fonctions/DTOC1/#dtoc","text":"","title":"DTOC"},{"location":"Fonctions/DTOC1/#fonction-dtoc","text":"La fonction DTOC construit une variable num\u00e9rique depuis une variable logique en assignant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique. Chaque r\u00e9pondant re\u00e7oit ainsi la valeur num\u00e9rique associ\u00e9e \u00e0 sa modalit\u00e9 de r\u00e9ponse. Cette fonction est utile pour calculer par exemple des scores moyens sur des \u00e9chelles. Les valeurs associ\u00e9es aux modalit\u00e9s peuvent \u00eatre sp\u00e9cifi\u00e9es dans la variable elle-m\u00eame via sont r\u00e9ducteur, ou directement dans l'appel de fonction, au choix. Par d\u00e9faut, le r\u00e9ducteur est utilis\u00e9 en tant que valeurs associ\u00e9es","title":"Fonction DTOC"},{"location":"Fonctions/DTOC1/#syntaxe","text":"Q01.DTOC(Values) ou _DTOC(Q01; Values) **Nom ** **Type ** Description Remarque Values Liste de nombres ou un code Valeurs affect\u00e9es aux modalit\u00e9s OU BIEN Codes possibles : \"N\" pour le num\u00e9ro de modalit\u00e9 \"T\" pour le texte de modalit\u00e9 \"R\" pour le r\u00e9ducteur de modalit\u00e9 \"C\" pour le code de modalit\u00e9 Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DTOC1/#remarques","text":"Sur une variable multi-r\u00e9ponses avec un r\u00e9ducteur \u00e0 1, la fonction retourne en standard le nombre de r\u00e9ponses cit\u00e9es. La valeur particuli\u00e8re Na (ou NAn) indique que la modalit\u00e9 associ\u00e9e sera exclue dans la conversion en valeur num\u00e9rique. Cette valeur est associ\u00e9e par d\u00e9faut aux sous-totaux issus de regroupement de modalit\u00e9s. Attention un r\u00e9ducteur \u00e0 0 n'exclut pas la modalit\u00e9 associ\u00e9e de la variable cr\u00e9\u00e9e. La fonction DTOC conserve les dimensions et l'univers de la variable source.","title":"Remarques :"},{"location":"Fonctions/DTOC1/#exemples","text":"Q02C.DTOC(10 20 30 40 50) Cet appel applique une conversion num\u00e9rique en assignant les valeurs 10, 20, 30, 40 et 50 aux modalit\u00e9s 1 \u00e0 5 de la variable Q02C. La variable r\u00e9sultante est une quantit\u00e9 dont la moyenne est ainsi comprise entre 10 et 50. Q02C.DTOC() Cet appel est similaire au pr\u00e9c\u00e9dent \u00e0 la diff\u00e9rence que les coefficients appliqu\u00e9s aux modalit\u00e9s sont lus dans la variable Q02C, directement (le \"r\u00e9ducteur\"). S3.DTOC(\"T\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique d\u00e9duite du libell\u00e9 (du Texte). S3.DTOC(\"N\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 son num\u00e9ro de modalit\u00e9 comme valeur num\u00e9rique. S3.DTOC(\"C\") Cr\u00e9e une variable num\u00e9rique en associant \u00e0 chaque modalit\u00e9 une valeur num\u00e9rique d\u00e9duite du code. Il est possible d'exploiter les propri\u00e9t\u00e9s des d\u00e9tails Lignes/Colonnes lors de la g\u00e9n\u00e9ration num\u00e9rique bas\u00e9e sur des propri\u00e9t\u00e9s (codes, textes, etc.). Pour ce faire, il suffit de pr\u00e9fixer par \"C\" pour utiliser les propri\u00e9tes des Colonnes et par \"R\" pour les propri\u00e9t\u00e9s des Lignes. Q12.DTOC(\"CC\") Cette d\u00e9finition cr\u00e9e une variable continue dont la valeur est le code des colonnes. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/DTOT1/","text":"DTOT Fonction DTOT La fonction DTOT construit une variable litt\u00e9rale depuis une variable logique : chaque r\u00e9pondant re\u00e7oit en guise de r\u00e9ponse le texte de la modalit\u00e9 qu'il a cit\u00e9e. La transformation en variable litt\u00e9rale permet d'appliquer des traitements textuels. Et elle convient bien \u00e0 l'utilisation des identifiants textuels (non num\u00e9riques), au formatage des variables multi-r\u00e9ponses ou num\u00e9riques. Syntaxe : Q01.DTOT(Delimiter; NoAnswersValue;TextMode) ou _DTOT(Q01; Delimiter; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser pour concat\u00e9ner les r\u00e9ponses multiples d'un individu NUL par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Cha\u00eene pour les sans-r\u00e9ponse NUL par d\u00e9faut 3 TextMode Caract\u00e8re R\u00e9f\u00e9rence utilis\u00e9e pour la r\u00e9ponse \"T\" par d\u00e9faut Remarques : Dans les tableaux, les variables litt\u00e9rales agissent comme les variables \"logiques\" : la distribution des textes est calcul\u00e9e automatiquement. L'ordre des modalit\u00e9s ainsi cr\u00e9\u00e9es est l'ordre alphab\u00e9tique. L'argument 3 (TextMode) peut \u00eatre : \"C\" : utilise les codes \"N\" : utilise le n\u00b0 de modalit\u00e9 \"T\" : utilise le texte des modalit\u00e9s (en majuscules) Exemples : S1.DTOT() La variable obtenue ne comporte plus de modalit\u00e9 : c'est une variable litt\u00e9rale. La valeur de chaque r\u00e9pondant est une cha\u00eene de caract\u00e8res. S6.DTOT(\" - \"; \"!\";\"T\") Pour concat\u00e9ner les diff\u00e9rentes r\u00e9ponses d'un individu avec \" - \" pour s\u00e9parateur. Les sans-r\u00e9ponses seront repr\u00e9sent\u00e9s par des \"!\". Voir aussi : Traiter les variables litt\u00e9rales","title":"DTOT"},{"location":"Fonctions/DTOT1/#dtot","text":"","title":"DTOT"},{"location":"Fonctions/DTOT1/#fonction-dtot","text":"La fonction DTOT construit une variable litt\u00e9rale depuis une variable logique : chaque r\u00e9pondant re\u00e7oit en guise de r\u00e9ponse le texte de la modalit\u00e9 qu'il a cit\u00e9e. La transformation en variable litt\u00e9rale permet d'appliquer des traitements textuels. Et elle convient bien \u00e0 l'utilisation des identifiants textuels (non num\u00e9riques), au formatage des variables multi-r\u00e9ponses ou num\u00e9riques.","title":"Fonction DTOT"},{"location":"Fonctions/DTOT1/#syntaxe","text":"Q01.DTOT(Delimiter; NoAnswersValue;TextMode) ou _DTOT(Q01; Delimiter; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser pour concat\u00e9ner les r\u00e9ponses multiples d'un individu NUL par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Cha\u00eene pour les sans-r\u00e9ponse NUL par d\u00e9faut 3 TextMode Caract\u00e8re R\u00e9f\u00e9rence utilis\u00e9e pour la r\u00e9ponse \"T\" par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DTOT1/#remarques","text":"Dans les tableaux, les variables litt\u00e9rales agissent comme les variables \"logiques\" : la distribution des textes est calcul\u00e9e automatiquement. L'ordre des modalit\u00e9s ainsi cr\u00e9\u00e9es est l'ordre alphab\u00e9tique. L'argument 3 (TextMode) peut \u00eatre : \"C\" : utilise les codes \"N\" : utilise le n\u00b0 de modalit\u00e9 \"T\" : utilise le texte des modalit\u00e9s (en majuscules)","title":"Remarques :"},{"location":"Fonctions/DTOT1/#exemples","text":"S1.DTOT() La variable obtenue ne comporte plus de modalit\u00e9 : c'est une variable litt\u00e9rale. La valeur de chaque r\u00e9pondant est une cha\u00eene de caract\u00e8res. S6.DTOT(\" - \"; \"!\";\"T\") Pour concat\u00e9ner les diff\u00e9rentes r\u00e9ponses d'un individu avec \" - \" pour s\u00e9parateur. Les sans-r\u00e9ponses seront repr\u00e9sent\u00e9s par des \"!\". Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/DURATION/","text":"DURATION Fonction DURATION La fonction DURATION calcule une variable num\u00e9rique qui correspond \u00e0 la dur\u00e9e entre les deux variables date s\u00e9lectionn\u00e9es. Syntaxe : _DURATION(Start; Finish) **Nom ** **Type ** Description Remarque 1 Start Variable Variable de type date Obligatoire 2 Finish Variable Variable de type date Obligatoire Exemples : _DURATION(DATE_ENTREE; DATE_SORTIE) La variable obtenue correspond \u00e0 la dur\u00e9e entre les dates. Remarques : Cette dur\u00e9e devra \u00eatre convertie en une unit\u00e9 de temps avec les fonctions DURATIONDIST , MILLISECONDS , SECONDS , MINUTES , HOURS ou DAYS . Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DURATION"},{"location":"Fonctions/DURATION/#duration","text":"","title":"DURATION"},{"location":"Fonctions/DURATION/#fonction-duration","text":"La fonction DURATION calcule une variable num\u00e9rique qui correspond \u00e0 la dur\u00e9e entre les deux variables date s\u00e9lectionn\u00e9es.","title":"Fonction DURATION"},{"location":"Fonctions/DURATION/#syntaxe","text":"_DURATION(Start; Finish) **Nom ** **Type ** Description Remarque 1 Start Variable Variable de type date Obligatoire 2 Finish Variable Variable de type date Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DURATION/#exemples","text":"_DURATION(DATE_ENTREE; DATE_SORTIE) La variable obtenue correspond \u00e0 la dur\u00e9e entre les dates.","title":"Exemples :"},{"location":"Fonctions/DURATION/#remarques","text":"Cette dur\u00e9e devra \u00eatre convertie en une unit\u00e9 de temps avec les fonctions DURATIONDIST , MILLISECONDS , SECONDS , MINUTES , HOURS ou DAYS . Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Remarques :"},{"location":"Fonctions/DURATIONDIST1/","text":"DURATIONDIST Fonction DURATIONDIST La fonction DURATIONDIST calcule une variable logique qui correspond \u00e0 la distribution des dur\u00e9es selon des tranches impos\u00e9es. Syntaxe : Q01.DURATIONDIST(unit\u00e9; Step; Format) ou _DURATIONDIST(Q01; unit\u00e9; Step; Format) Nom Type Description Remarque 1 unit\u00e9 Cha\u00eene de caract\u00e8res r\u00e9solution vide par d\u00e9faut 2 Step Entier pas 0 par d\u00e9faut 3 Format Cha\u00eene de caract\u00e8res Format d'affichage dans les libell\u00e9s de modalit\u00e9s vide par d\u00e9faut Remarques : L'unit\u00e9 est une valeur de la table : MILLISECONDS En millisecondes SECONDS En secondes MINUTES En minutes HOURS En heures DAYS En jours Pour plus d'informations sur le format : https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings Exemples : DURATIONS.DURATIONDIST(\"MINUTES\"; 5) Cr\u00e9e une variable logique dont les modalit\u00e9s sont les tranches de dur\u00e9e de 5 minutes, de la plus petite \u00e0 la plus grande (5 min, 10 min, etc.). Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"DURATIONDIST"},{"location":"Fonctions/DURATIONDIST1/#durationdist","text":"","title":"DURATIONDIST"},{"location":"Fonctions/DURATIONDIST1/#fonction-durationdist","text":"La fonction DURATIONDIST calcule une variable logique qui correspond \u00e0 la distribution des dur\u00e9es selon des tranches impos\u00e9es.","title":"Fonction DURATIONDIST"},{"location":"Fonctions/DURATIONDIST1/#syntaxe","text":"Q01.DURATIONDIST(unit\u00e9; Step; Format) ou _DURATIONDIST(Q01; unit\u00e9; Step; Format) Nom Type Description Remarque 1 unit\u00e9 Cha\u00eene de caract\u00e8res r\u00e9solution vide par d\u00e9faut 2 Step Entier pas 0 par d\u00e9faut 3 Format Cha\u00eene de caract\u00e8res Format d'affichage dans les libell\u00e9s de modalit\u00e9s vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DURATIONDIST1/#remarques","text":"L'unit\u00e9 est une valeur de la table : MILLISECONDS En millisecondes SECONDS En secondes MINUTES En minutes HOURS En heures DAYS En jours Pour plus d'informations sur le format : https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings","title":"Remarques :"},{"location":"Fonctions/DURATIONDIST1/#exemples","text":"DURATIONS.DURATIONDIST(\"MINUTES\"; 5) Cr\u00e9e une variable logique dont les modalit\u00e9s sont les tranches de dur\u00e9e de 5 minutes, de la plus petite \u00e0 la plus grande (5 min, 10 min, etc.). Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/DYNCOL1/","text":"DYNCOL Fonction DYNCOL Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes. Syntaxe : Q01.DYNCOL(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNCOL(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut Exemples : Voir aussi : Utilisation de tables externes","title":"DYNCOL"},{"location":"Fonctions/DYNCOL1/#dyncol","text":"","title":"DYNCOL"},{"location":"Fonctions/DYNCOL1/#fonction-dyncol","text":"Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes.","title":"Fonction DYNCOL"},{"location":"Fonctions/DYNCOL1/#syntaxe","text":"Q01.DYNCOL(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNCOL(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DYNCOL1/#exemples","text":"Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/DYNMOD1/","text":"DYNMOD Fonction DYNMOD Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes. Syntaxe : Q01.DYNMOD(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNMOD(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut Exemples : Voir aussi : Utilisation de tables externes","title":"DYNMOD"},{"location":"Fonctions/DYNMOD1/#dynmod","text":"","title":"DYNMOD"},{"location":"Fonctions/DYNMOD1/#fonction-dynmod","text":"Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes.","title":"Fonction DYNMOD"},{"location":"Fonctions/DYNMOD1/#syntaxe","text":"Q01.DYNMOD(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNMOD(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DYNMOD1/#exemples","text":"Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/DYNROW1/","text":"DYNROW Fonction DYNROW Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes. Syntaxe : Q01.DYNROW(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNROW(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut Exemples : Voir aussi : Utilisation de tables externes","title":"DYNROW"},{"location":"Fonctions/DYNROW1/#dynrow","text":"","title":"DYNROW"},{"location":"Fonctions/DYNROW1/#fonction-dynrow","text":"Sur la base d'une table de r\u00e9f\u00e9rence qui liste un ensemble d'\u00e9l\u00e9ments codifi\u00e9s, cr\u00e9e des regroupements dynamiques avec hi\u00e9rarchie, le tout pilot\u00e9 dans des tables externes.","title":"Fonction DYNROW"},{"location":"Fonctions/DYNROW1/#syntaxe","text":"Q01.DYNROW(Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) ou _DYNROW(Q01; Table; Index; MatchMode; Sorters; Groupers; CodeColumn; TextColumn) **Nom ** **Type ** Description Remarque 1 Table Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Index Cha\u00eene de caract\u00e8res table des modalit\u00e9s \u00e0 construire Obligatoire 3 MatchMode Cha\u00eene de caract\u00e8res Rep\u00e9rage par code ou position ou texte. Code par d\u00e9faut \"CODE\"/POSITION/TEXT par d\u00e9faut 4 Sorters Cha\u00eene de caract\u00e8res Liste des noms de colonnes de tables utilis\u00e9es pour trier \"\" par d\u00e9faut 5 Groupers Cha\u00eene de caract\u00e8res liste des noms de colonnes de tables utilis\u00e9es pour regrouper \"\" par d\u00e9faut 6 CodeColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les codes de ref Obligatoire 7 TextColumn Cha\u00eene de caract\u00e8res nom de la colonne indiquant les textes de ref \"\" par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/DYNROW1/#exemples","text":"Voir aussi : Utilisation de tables externes","title":"Exemples :"},{"location":"Fonctions/EXACTLY1/","text":"EXACTLY Fonction EXACTLY La fonction EXACTLY permet de s\u00e9lectionner les individus ayant cit\u00e9 exactement toutes les modalit\u00e9s list\u00e9es et rien d'autre. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondus exactement toutes les modalit\u00e9s s\u00e9lectionn\u00e9es et rien d'autres. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.EXACTLY(Keys) ou _EXACTLY(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : S1.EXACTLY(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant cit\u00e9s exactement les modalit\u00e9s 1 et 2 et 3. S1.GRPMOD(EXACTLY(1 2 3) est une d\u00e9finition \u00e9quivalente. Voir aussi : ALL ANY NONE","title":"EXACTLY"},{"location":"Fonctions/EXACTLY1/#exactly","text":"","title":"EXACTLY"},{"location":"Fonctions/EXACTLY1/#fonction-exactly","text":"La fonction EXACTLY permet de s\u00e9lectionner les individus ayant cit\u00e9 exactement toutes les modalit\u00e9s list\u00e9es et rien d'autre. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus ayant r\u00e9pondus exactement toutes les modalit\u00e9s s\u00e9lectionn\u00e9es et rien d'autres. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction EXACTLY"},{"location":"Fonctions/EXACTLY1/#syntaxe","text":"Q01.EXACTLY(Keys) ou _EXACTLY(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/EXACTLY1/#exemples","text":"S1.EXACTLY(1 2 3) Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus ayant cit\u00e9s exactement les modalit\u00e9s 1 et 2 et 3. S1.GRPMOD(EXACTLY(1 2 3) est une d\u00e9finition \u00e9quivalente. Voir aussi : ALL ANY NONE","title":"Exemples :"},{"location":"Fonctions/FITCOL1/","text":"FITCOL Fonction FITCOL La fonction FITCOL permet d'aligner les colonnes d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement. Syntaxe : Q01.FITCOL(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence Remarques : FITCOL est une sorte de SELCOL dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc. Exemples : Q01.FITMOD(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les colonnes sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"FITCOL"},{"location":"Fonctions/FITCOL1/#fitcol","text":"","title":"FITCOL"},{"location":"Fonctions/FITCOL1/#fonction-fitcol","text":"La fonction FITCOL permet d'aligner les colonnes d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement.","title":"Fonction FITCOL"},{"location":"Fonctions/FITCOL1/#syntaxe","text":"Q01.FITCOL(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FITCOL1/#remarques","text":"FITCOL est une sorte de SELCOL dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc.","title":"Remarques :"},{"location":"Fonctions/FITCOL1/#exemples","text":"Q01.FITMOD(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les colonnes sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/FITMOD1/","text":"FITMOD Fonction FITMOD La fonction FITMOD permet d'aligner les modalit\u00e9s d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement. Syntaxe : Q01.FITMOD(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence Remarques : FITMOD est une sorte de SELMOD dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc. Exemples : Q01.FITMOD(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"FITMOD"},{"location":"Fonctions/FITMOD1/#fitmod","text":"","title":"FITMOD"},{"location":"Fonctions/FITMOD1/#fonction-fitmod","text":"La fonction FITMOD permet d'aligner les modalit\u00e9s d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement.","title":"Fonction FITMOD"},{"location":"Fonctions/FITMOD1/#syntaxe","text":"Q01.FITMOD(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FITMOD1/#remarques","text":"FITMOD est une sorte de SELMOD dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc.","title":"Remarques :"},{"location":"Fonctions/FITMOD1/#exemples","text":"Q01.FITMOD(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/FITROW1/","text":"FITROW Fonction FITROW La fonction FITROW permet d'aligner les lignes d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement. Syntaxe : Q01.FITROW(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence Remarques : FITROW est une sorte de SELROW dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc. Exemples : Q01.FITROW(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les lignes sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"FITROW"},{"location":"Fonctions/FITROW1/#fitrow","text":"","title":"FITROW"},{"location":"Fonctions/FITROW1/#fonction-fitrow","text":"La fonction FITROW permet d'aligner les lignes d'une variable sur une autre. L'argument 2 correspond au mode de reconnaissance appliqu\u00e9 pour r\u00e9aliser cet alignement.","title":"Fonction FITROW"},{"location":"Fonctions/FITROW1/#syntaxe","text":"Q01.FITROW(Variable;MatchMode) **Nom ** **Type ** Description Remarque 1 Variable variable Variable de r\u00e9f\u00e9rence Obligatoire 2 MatchMode caract\u00e8re Mode de reconnaissance appliqu\u00e9 Obligatoire Les modes de reconnaissance : C (CODE): recherche par CODES E (EXACT): recherche compl\u00e8te (CODE + TEXTE) T (TEXT): recherche par texte S (SIMPLIFIED): recherche par texte simplifi\u00e9 (ignore accents, blancs etc.) N (NUMBER): aligne simplement la taille sans tenir compte d'un quelconque alignement R (REPEAT) : r\u00e9p\u00e8te les modalit\u00e9s de la premi\u00e8re variable pour s'accorder avec la variable de r\u00e9f\u00e9rence","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FITROW1/#remarques","text":"FITROW est une sorte de SELROW dynamique. Les fonctions FITCOL et FITROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable en argument 1. Cela permet un contr\u00f4le fin lors de l'interaction de deux variables (op\u00e9rateur, FIX, FLT etc.), alignement de modalit\u00e9s, alignement de colonnes, etc.","title":"Remarques :"},{"location":"Fonctions/FITROW1/#exemples","text":"Q01.FITROW(Q02;\"T\") Cr\u00e9e une nouvelle variable dont les lignes sont les m\u00eames que celles de Q02 mais avec les donn\u00e9es de Q01. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/FIX1/","text":"FIX Fonction FIX La fonction FIX \"r\u00e9pare\" une variable en modifiant les r\u00e9ponses de ses r\u00e9pondants selon un univers d'application. Syntaxe : Q01.FIX(Universe; NewValue; AppendMode) ou _FIX(Variable; Universe; NewValue; AppendMode) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 2 Universe Variable Univers d'application (une variable ou une construction) Obligatoire 3 NewValue Valeur r\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire 4 AppendMode Bool\u00e9en Par d\u00e9faut remplace, si TRUE ajoute la nouvelle valeur FALSE par d\u00e9faut 5 Insertion text Cha\u00eene Libell\u00e9 de la nouvelle modalit\u00e9 cr\u00e9\u00e9e pr\u00e9c\u00e9d\u00e9e de @code pour lui affecter un code Optionnel Exemples : S1.FIX(S2 > 80; 5) La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s la r\u00e9ponse 5 (\u00e0 la S1). S1.FIX(S2 > 80; 6;FALSE;\"@99 NC\") La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s la r\u00e9ponse 6 (\u00e0 la S1) qui sera libell\u00e9e \"NC\" et dont le code associ\u00e9 vaut 99. S6.FIX(S2 > 80; 5; TRUE) La variable obtenue est en tous points similaire \u00e0 la variable S6. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement augment\u00e9s de la r\u00e9ponse 5 (\u00e0 la S6). S6.FIX(S2 > 80; 5; FALSE) La variable obtenue est en tous points similaire \u00e0 la variable S6. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s (quitte \u00e0 supprimer les autres r\u00e9ponses cit\u00e9es par ces individus) la r\u00e9ponse 5 (\u00e0 la S6). Une nubilit\u00e9 variable ! Dans notre \u00e9tude factice, MARI repr\u00e9sente le statut marital (la premi\u00e8re modalit\u00e9 est \"mari\u00e9\") PAYS repr\u00e9sente le pays d'origine (la premi\u00e8re modalit\u00e9 est \"France\") AGE repr\u00e9sente l'\u00e2ge en clair SEXE repr\u00e9sente le sexe de l'interview\u00e9 (Homme, Femme) Le probl\u00e8me : En France, les femmes peuvent se marier d\u00e8s leur 13 ans alors que les gar\u00e7ons doivent attendre leur 15 ans. Dans notre enqu\u00eate factice, il se trouve qu'un gar\u00e7on de 14 ans d\u00e9clare \u00eatre mari\u00e9... sans doute une erreur de jeunesse. Comment r\u00e9soudre cet \u00e9pineux probl\u00e8me et nettoyer la variable MARI ? Une solution : MARI.FIX(_UNIV(PAYS 1; SEXE 1; AGE \\< 15); NA) Retourne une variable MARI \"propre\" dans laquelle les gar\u00e7ons fran\u00e7ais dont l'\u00e2ge est strictement inf\u00e9rieur \u00e0 15 sont assign\u00e9s \u00e0 sans-r\u00e9ponse. Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable sous conditions","title":"FIX"},{"location":"Fonctions/FIX1/#fix","text":"","title":"FIX"},{"location":"Fonctions/FIX1/#fonction-fix","text":"La fonction FIX \"r\u00e9pare\" une variable en modifiant les r\u00e9ponses de ses r\u00e9pondants selon un univers d'application.","title":"Fonction FIX"},{"location":"Fonctions/FIX1/#syntaxe","text":"Q01.FIX(Universe; NewValue; AppendMode) ou _FIX(Variable; Universe; NewValue; AppendMode) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 2 Universe Variable Univers d'application (une variable ou une construction) Obligatoire 3 NewValue Valeur r\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire 4 AppendMode Bool\u00e9en Par d\u00e9faut remplace, si TRUE ajoute la nouvelle valeur FALSE par d\u00e9faut 5 Insertion text Cha\u00eene Libell\u00e9 de la nouvelle modalit\u00e9 cr\u00e9\u00e9e pr\u00e9c\u00e9d\u00e9e de @code pour lui affecter un code Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FIX1/#exemples","text":"S1.FIX(S2 > 80; 5) La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s la r\u00e9ponse 5 (\u00e0 la S1). S1.FIX(S2 > 80; 6;FALSE;\"@99 NC\") La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s la r\u00e9ponse 6 (\u00e0 la S1) qui sera libell\u00e9e \"NC\" et dont le code associ\u00e9 vaut 99. S6.FIX(S2 > 80; 5; TRUE) La variable obtenue est en tous points similaire \u00e0 la variable S6. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement augment\u00e9s de la r\u00e9ponse 5 (\u00e0 la S6). S6.FIX(S2 > 80; 5; FALSE) La variable obtenue est en tous points similaire \u00e0 la variable S6. Mais les r\u00e9pondants \u00e0 S2 > 80 se voient automatiquement attribu\u00e9s (quitte \u00e0 supprimer les autres r\u00e9ponses cit\u00e9es par ces individus) la r\u00e9ponse 5 (\u00e0 la S6). Une nubilit\u00e9 variable ! Dans notre \u00e9tude factice, MARI repr\u00e9sente le statut marital (la premi\u00e8re modalit\u00e9 est \"mari\u00e9\") PAYS repr\u00e9sente le pays d'origine (la premi\u00e8re modalit\u00e9 est \"France\") AGE repr\u00e9sente l'\u00e2ge en clair SEXE repr\u00e9sente le sexe de l'interview\u00e9 (Homme, Femme) Le probl\u00e8me : En France, les femmes peuvent se marier d\u00e8s leur 13 ans alors que les gar\u00e7ons doivent attendre leur 15 ans. Dans notre enqu\u00eate factice, il se trouve qu'un gar\u00e7on de 14 ans d\u00e9clare \u00eatre mari\u00e9... sans doute une erreur de jeunesse. Comment r\u00e9soudre cet \u00e9pineux probl\u00e8me et nettoyer la variable MARI ? Une solution : MARI.FIX(_UNIV(PAYS 1; SEXE 1; AGE \\< 15); NA) Retourne une variable MARI \"propre\" dans laquelle les gar\u00e7ons fran\u00e7ais dont l'\u00e2ge est strictement inf\u00e9rieur \u00e0 15 sont assign\u00e9s \u00e0 sans-r\u00e9ponse. Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable sous conditions","title":"Exemples :"},{"location":"Fonctions/FLATTEN1/","text":"FLATTEN Fonction FLATTEN La fonction FLATTEN \u00e9tale les d\u00e9tails d'une variable pour les positionner en modalit\u00e9s. Le nombre de modalit\u00e9s de la variable r\u00e9sultat est \u00e9gale au produit du nombre de modalit\u00e9s par le nombre de colonnes et le nombre de lignes. La variable r\u00e9sultat n'a plus de dimension. Les d\u00e9tails d'origine sont transform\u00e9s en sous-titres, structurant les modalit\u00e9s du r\u00e9sultat. Syntaxe : Q01.FLATTEN(Delimiter) ou _FLATTEN(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res \":\" par d\u00e9faut NUL par d\u00e9faut Remarques : FLATTEN est une g\u00e9n\u00e9ralisation de la fonction DEPCOL. Exemples : Voir aussi : Gestion des dimensions","title":"FLATTEN"},{"location":"Fonctions/FLATTEN1/#flatten","text":"","title":"FLATTEN"},{"location":"Fonctions/FLATTEN1/#fonction-flatten","text":"La fonction FLATTEN \u00e9tale les d\u00e9tails d'une variable pour les positionner en modalit\u00e9s. Le nombre de modalit\u00e9s de la variable r\u00e9sultat est \u00e9gale au produit du nombre de modalit\u00e9s par le nombre de colonnes et le nombre de lignes. La variable r\u00e9sultat n'a plus de dimension. Les d\u00e9tails d'origine sont transform\u00e9s en sous-titres, structurant les modalit\u00e9s du r\u00e9sultat.","title":"Fonction FLATTEN"},{"location":"Fonctions/FLATTEN1/#syntaxe","text":"Q01.FLATTEN(Delimiter) ou _FLATTEN(Q01; Delimiter) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res \":\" par d\u00e9faut NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FLATTEN1/#remarques","text":"FLATTEN est une g\u00e9n\u00e9ralisation de la fonction DEPCOL.","title":"Remarques :"},{"location":"Fonctions/FLATTEN1/#exemples","text":"Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/FLT1/","text":"FLT Fonction FLT La fonction FLT filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable en lui appliquant des conditions de validit\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments. Syntaxe : Q01.FLT(Filters) ou _FLT(Q01; Filters) **Nom ** **Type ** Description Remarque Filters Liste de variables Univers d'application Obligatoire Exemples : S1.FLT(S2 > 10; S3 1) La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S2 > 10 ET \u00e0 S3 1. Voir aussi : Univers de variables Combiner les variables","title":"FLT"},{"location":"Fonctions/FLT1/#flt","text":"","title":"FLT"},{"location":"Fonctions/FLT1/#fonction-flt","text":"La fonction FLT filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable en lui appliquant des conditions de validit\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments.","title":"Fonction FLT"},{"location":"Fonctions/FLT1/#syntaxe","text":"Q01.FLT(Filters) ou _FLT(Q01; Filters) **Nom ** **Type ** Description Remarque Filters Liste de variables Univers d'application Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FLT1/#exemples","text":"S1.FLT(S2 > 10; S3 1) La variable obtenue est en tous points similaire \u00e0 la variable S1. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S2 > 10 ET \u00e0 S3 1. Voir aussi : Univers de variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/FLTCOL1/","text":"FLTCOL Fonction FLTCOL La fonction FLTCOL filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable puis cr\u00e9e un d\u00e9tail en colonne qui correspond au titre du filtre appliqu\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments. Syntaxe : Q01.FLTCOL(Filter; Title) ou _FLTCOL(Q01; Filters; Title) **Nom ** **Type ** Description Remarque Filter D\u00e9finition D\u00e9finition du filtre \u00e0 appliquer aux donn\u00e9es de la variable Obligatoire Title Cha\u00eene Titre \u00e0 int\u00e9grer en colonne de la variable r\u00e9sultat Optionnel Exemples : S1.FLTCOL(S2 > 50; \"Plus de 50 ans\") La variable obtenue est dimensionn\u00e9e avec 1 colonne et similaire \u00e0 la variable S1. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S2 > 50.","title":"FLTCOL"},{"location":"Fonctions/FLTCOL1/#fltcol","text":"","title":"FLTCOL"},{"location":"Fonctions/FLTCOL1/#fonction-fltcol","text":"La fonction FLTCOL filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable puis cr\u00e9e un d\u00e9tail en colonne qui correspond au titre du filtre appliqu\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments.","title":"Fonction FLTCOL"},{"location":"Fonctions/FLTCOL1/#syntaxe","text":"Q01.FLTCOL(Filter; Title) ou _FLTCOL(Q01; Filters; Title) **Nom ** **Type ** Description Remarque Filter D\u00e9finition D\u00e9finition du filtre \u00e0 appliquer aux donn\u00e9es de la variable Obligatoire Title Cha\u00eene Titre \u00e0 int\u00e9grer en colonne de la variable r\u00e9sultat Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FLTCOL1/#exemples","text":"S1.FLTCOL(S2 > 50; \"Plus de 50 ans\") La variable obtenue est dimensionn\u00e9e avec 1 colonne et similaire \u00e0 la variable S1. Mais ses donn\u00e9es sont filtr\u00e9es selon les r\u00e9pondants \u00e0 S2 > 50.","title":"Exemples :"},{"location":"Fonctions/FLTROW1/","text":"FLTROW Fonction FLTROW La fonction FLTROW filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable puis cr\u00e9e un d\u00e9tail en ligne qui correspond au titre du filtre appliqu\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments. Syntaxe : Q01.FLTROW(Filter; Title) ou _FLTROW(Q01; Filters; Title) **Nom ** **Type ** Description Remarque Filter D\u00e9finition D\u00e9finition du filtre \u00e0 appliquer aux donn\u00e9es de la variable Obligatoire Title Cha\u00eene Titre \u00e0 int\u00e9grer en ligne de la variable r\u00e9sultat Optionnel Exemples : S1.FLTROW(S2 > 50; \"Plus de 50 ans\") Remarques : Une variable ayant une dimension ligne a obligatoirement une dimension colonne. Autrement dit, seule une variable doublement dimensionn\u00e9e a des lignes et des colonnes. Une variable simplement dimensionn\u00e9e n'a jamais de lignes.","title":"FLTROW"},{"location":"Fonctions/FLTROW1/#fltrow","text":"","title":"FLTROW"},{"location":"Fonctions/FLTROW1/#fonction-fltrow","text":"La fonction FLTROW filtre (met \u00e0 \"sans-r\u00e9ponse\") les r\u00e9pondants de la variable puis cr\u00e9e un d\u00e9tail en ligne qui correspond au titre du filtre appliqu\u00e9. L'univers appliqu\u00e9 \u00e0 la variable est celui de ceux qui ont r\u00e9pondu \u00e0 toutes les variables et/ou constructions en arguments.","title":"Fonction FLTROW"},{"location":"Fonctions/FLTROW1/#syntaxe","text":"Q01.FLTROW(Filter; Title) ou _FLTROW(Q01; Filters; Title) **Nom ** **Type ** Description Remarque Filter D\u00e9finition D\u00e9finition du filtre \u00e0 appliquer aux donn\u00e9es de la variable Obligatoire Title Cha\u00eene Titre \u00e0 int\u00e9grer en ligne de la variable r\u00e9sultat Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FLTROW1/#exemples","text":"S1.FLTROW(S2 > 50; \"Plus de 50 ans\")","title":"Exemples :"},{"location":"Fonctions/FLTROW1/#remarques","text":"Une variable ayant une dimension ligne a obligatoirement une dimension colonne. Autrement dit, seule une variable doublement dimensionn\u00e9e a des lignes et des colonnes. Une variable simplement dimensionn\u00e9e n'a jamais de lignes.","title":"Remarques :"},{"location":"Fonctions/FMTDATE1/","text":"FMTDATE Fonction FMTDATE La fonction FMTDATE transforme une variable temporelle en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\". Syntaxe : Q01.FMTDATE(Format; NoAnswersValue) ou _FMTDATE(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format d'affichage \"g\" par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Valeurs des sans-r\u00e9ponse vide par d\u00e9faut Exemples : DATE.FTMDATE(\"g\") Retourne une variable litt\u00e9rale dont les textes sont sous la forme \"10/12/1815\". DATE.FTMDATE(\"D\") Retourne une variable litt\u00e9rale dont les textes sont sous la forme \"dimanche 10 d\u00e9cembre 1815\". Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"FMTDATE"},{"location":"Fonctions/FMTDATE1/#fmtdate","text":"","title":"FMTDATE"},{"location":"Fonctions/FMTDATE1/#fonction-fmtdate","text":"La fonction FMTDATE transforme une variable temporelle en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\".","title":"Fonction FMTDATE"},{"location":"Fonctions/FMTDATE1/#syntaxe","text":"Q01.FMTDATE(Format; NoAnswersValue) ou _FMTDATE(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format d'affichage \"g\" par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Valeurs des sans-r\u00e9ponse vide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FMTDATE1/#exemples","text":"DATE.FTMDATE(\"g\") Retourne une variable litt\u00e9rale dont les textes sont sous la forme \"10/12/1815\". DATE.FTMDATE(\"D\") Retourne une variable litt\u00e9rale dont les textes sont sous la forme \"dimanche 10 d\u00e9cembre 1815\". Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/FMTDURATION1/","text":"FMTDURATION Fonction FMTDURATION La fonction FMTDURATION transforme une variable de dur\u00e9e en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\". Syntaxe : Q01.FMTDURATION(Format; NoAnswersValue) ou _FMTDURATION(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format d'affichage \"g\" par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Valeurs des sans-r\u00e9ponse NUL par d\u00e9faut Exemples : DURATION.FTMDURATION(\"D\") Retourne une variable litt\u00e9rale dont les textes repr\u00e9sentent les dur\u00e9es en clair. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"FMTDURATION"},{"location":"Fonctions/FMTDURATION1/#fmtduration","text":"","title":"FMTDURATION"},{"location":"Fonctions/FMTDURATION1/#fonction-fmtduration","text":"La fonction FMTDURATION transforme une variable de dur\u00e9e en variable litt\u00e9rale \u00e0 l'aide d'un format num\u00e9rique \"\u00e0 la Excel\".","title":"Fonction FMTDURATION"},{"location":"Fonctions/FMTDURATION1/#syntaxe","text":"Q01.FMTDURATION(Format; NoAnswersValue) ou _FMTDURATION(Q01; Format; NoAnswersValue) **Nom ** **Type ** Description Remarque 1 Format Cha\u00eene de caract\u00e8res Format d'affichage \"g\" par d\u00e9faut 2 NoAnswersValue Cha\u00eene de caract\u00e8res Valeurs des sans-r\u00e9ponse NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/FMTDURATION1/#exemples","text":"DURATION.FTMDURATION(\"D\") Retourne une variable litt\u00e9rale dont les textes repr\u00e9sentent les dur\u00e9es en clair. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/GENID/","text":"GENID Fonction GENID La fonction GENID calcule un identifiant d'individu selon les modalit\u00e9s de la variable logique utilis\u00e9e. A chaque modalit\u00e9 correspond un incr\u00e9ment diff\u00e9rent. . Syntaxe : Q01.GENID() ou _GENID(Q01) Exemples : S1.GENID() Voir aussi :","title":"GENID"},{"location":"Fonctions/GENID/#genid","text":"","title":"GENID"},{"location":"Fonctions/GENID/#fonction-genid","text":"La fonction GENID calcule un identifiant d'individu selon les modalit\u00e9s de la variable logique utilis\u00e9e. A chaque modalit\u00e9 correspond un incr\u00e9ment diff\u00e9rent. .","title":"Fonction GENID"},{"location":"Fonctions/GENID/#syntaxe","text":"Q01.GENID() ou _GENID(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GENID/#exemples","text":"S1.GENID() Voir aussi :","title":"Exemples :"},{"location":"Fonctions/GENST/","text":"GENST Fonction GENST La fonction GENST cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELST. Syntaxe : Q01.GENST(Delimiter; rightAlign) ou _GENST(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite Exemples : BR1.GENST(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des modalit\u00e9s. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"GENST"},{"location":"Fonctions/GENST/#genst","text":"","title":"GENST"},{"location":"Fonctions/GENST/#fonction-genst","text":"La fonction GENST cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELST.","title":"Fonction GENST"},{"location":"Fonctions/GENST/#syntaxe","text":"Q01.GENST(Delimiter; rightAlign) ou _GENST(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GENST/#_1","text":"","title":"&nbsp;"},{"location":"Fonctions/GENST/#exemples","text":"BR1.GENST(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des modalit\u00e9s. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"Exemples :"},{"location":"Fonctions/GENSTCOL/","text":"GENSTCOL Fonction GENSTCOL La fonction GENSTCOL cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELSTCOL. Syntaxe : Q01.GENSTCOL(Delimiter; rightAlign) ou _GENSTCOL(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite Exemples : BR1.GENSTCOL(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des Colonnes. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"GENSTCOL"},{"location":"Fonctions/GENSTCOL/#genstcol","text":"","title":"GENSTCOL"},{"location":"Fonctions/GENSTCOL/#fonction-genstcol","text":"La fonction GENSTCOL cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELSTCOL.","title":"Fonction GENSTCOL"},{"location":"Fonctions/GENSTCOL/#syntaxe","text":"Q01.GENSTCOL(Delimiter; rightAlign) ou _GENSTCOL(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GENSTCOL/#_1","text":"","title":"&nbsp;"},{"location":"Fonctions/GENSTCOL/#exemples","text":"BR1.GENSTCOL(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des Colonnes. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"Exemples :"},{"location":"Fonctions/GENSTROW/","text":"GENSTROW Fonction GENSTROW La fonction GENSTROW cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELSTROW. Syntaxe : Q01.GENSTROW(Delimiter; rightAlign) ou _GENSTROW(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite Exemples : BR1.GENSTROW(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des modalit\u00e9s. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"GENSTROW"},{"location":"Fonctions/GENSTROW/#genstrow","text":"","title":"GENSTROW"},{"location":"Fonctions/GENSTROW/#fonction-genstrow","text":"La fonction GENSTROW cr\u00e9e des sous-titres en fonction d'un d\u00e9limiteur choisi. c'est l'inverse de DELSTROW.","title":"Fonction GENSTROW"},{"location":"Fonctions/GENSTROW/#syntaxe","text":"Q01.GENSTROW(Delimiter; rightAlign) ou _GENSTROW(Q01; Delimiter; rightAlign) **Nom ** **Type ** Description Remarque Delimiter Cha\u00eene de caract\u00e8res S\u00e9parateur oblogatoire rightAlign Bool\u00e9en TRUE : commence le d\u00e9codage par la droite","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GENSTROW/#_1","text":"","title":"&nbsp;"},{"location":"Fonctions/GENSTROW/#exemples","text":"BR1.GENSTROW(\",\") Retourne une variable dont les sous-titres sont cr\u00e9\u00e9s \u00e0 partir des libell\u00e9s des modalit\u00e9s. France, Homme France, Femme Espagne, Homme Espagne, Femme devient France Homme Femme Espagne Homme Femme","title":"Exemples :"},{"location":"Fonctions/GET3/","text":"GET Fonction GET La fonction GET retourne simplement la variable qui porte le nom de l'argument. Elle est donc \u00e0 consid\u00e9rer comme une fonction \"d'indirection\". Syntaxe : Q01.GET(Name) ou _GET(Q01; Name) **Nom ** **Type ** Description Remarque Name Cha\u00eene de caract\u00e8res Tous types Obligatoire Exemples : _GET(\"S1\") Cet appel retourne simplement la variable S1. Voir aussi : Utilitaires \\& divers","title":"GET"},{"location":"Fonctions/GET3/#get","text":"","title":"GET"},{"location":"Fonctions/GET3/#fonction-get","text":"La fonction GET retourne simplement la variable qui porte le nom de l'argument. Elle est donc \u00e0 consid\u00e9rer comme une fonction \"d'indirection\".","title":"Fonction GET"},{"location":"Fonctions/GET3/#syntaxe","text":"Q01.GET(Name) ou _GET(Q01; Name) **Nom ** **Type ** Description Remarque Name Cha\u00eene de caract\u00e8res Tous types Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GET3/#exemples","text":"_GET(\"S1\") Cet appel retourne simplement la variable S1. Voir aussi : Utilitaires \\& divers","title":"Exemples :"},{"location":"Fonctions/GROUP1/","text":"GROUP Fonction GROUP La fonction GROUP construit une liste de variables h\u00e9t\u00e9rog\u00e8nes. Il sera ainsi possible de choisir ce \"groupe\" pour produire un tableau composite Syntaxe : _GROUP(Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Liste de variables ou expression de s\u00e9lection de variables (ex: '$\"S?\"') Obligatoire Remarques : La fonction GROUP tient compte des items lignes/colonnes s'ils existent. Exemples : _GROUP(S1;S3;S4) Voir aussi : Pr\u00e9senter les variables dans les tableaux Combiner les variables","title":"GROUP"},{"location":"Fonctions/GROUP1/#group","text":"","title":"GROUP"},{"location":"Fonctions/GROUP1/#fonction-group","text":"La fonction GROUP construit une liste de variables h\u00e9t\u00e9rog\u00e8nes. Il sera ainsi possible de choisir ce \"groupe\" pour produire un tableau composite","title":"Fonction GROUP"},{"location":"Fonctions/GROUP1/#syntaxe","text":"_GROUP(Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Liste de variables ou expression de s\u00e9lection de variables (ex: '$\"S?\"') Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GROUP1/#remarques","text":"La fonction GROUP tient compte des items lignes/colonnes s'ils existent.","title":"Remarques :"},{"location":"Fonctions/GROUP1/#exemples","text":"_GROUP(S1;S3;S4) Voir aussi : Pr\u00e9senter les variables dans les tableaux Combiner les variables","title":"Exemples :"},{"location":"Fonctions/GRPCOL1/","text":"GRPCOL Fonction GRPCOL La fonction GRPCOL permet de regrouper les colonnes d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de colonnes qu'il y a groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.GRPCOL(Keys) ou _GRPCOL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : L'op\u00e9rateur de regroupement est : OU pour les variables logiques, SUM pour les variables num\u00e9riques. Exemples : S1.GRPCOL(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les colonnes sont : - le groupement des colonnes 1 et 2 de S1 - la premi\u00e8re colonne de S1 - la deuxi\u00e8me colonne de S1 - la derni\u00e8re de S1. S1.GRPCOL(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les colonnes sont : - le groupement des colonnes 1 et 2 de S1 - la premi\u00e8re colonne de S1 - la deuxi\u00e8me colonne de S1 - les colonnes non cit\u00e9es Voir aussi : Gestion des dimensions","title":"GRPCOL"},{"location":"Fonctions/GRPCOL1/#grpcol","text":"","title":"GRPCOL"},{"location":"Fonctions/GRPCOL1/#fonction-grpcol","text":"La fonction GRPCOL permet de regrouper les colonnes d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de colonnes qu'il y a groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction GRPCOL"},{"location":"Fonctions/GRPCOL1/#syntaxe","text":"Q01.GRPCOL(Keys) ou _GRPCOL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GRPCOL1/#remarques","text":"L'op\u00e9rateur de regroupement est : OU pour les variables logiques, SUM pour les variables num\u00e9riques.","title":"Remarques :"},{"location":"Fonctions/GRPCOL1/#exemples","text":"S1.GRPCOL(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les colonnes sont : - le groupement des colonnes 1 et 2 de S1 - la premi\u00e8re colonne de S1 - la deuxi\u00e8me colonne de S1 - la derni\u00e8re de S1. S1.GRPCOL(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les colonnes sont : - le groupement des colonnes 1 et 2 de S1 - la premi\u00e8re colonne de S1 - la deuxi\u00e8me colonne de S1 - les colonnes non cit\u00e9es Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/GRPMOD1/","text":"GRPMOD Fonction GRPMOD La fonction GRPMOD permet de regrouper les modalit\u00e9s d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de modalit\u00e9s qu'il y a de groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.GRPMOD(Keys) ou _GRPMOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : GRPMOD et SELMOD sont tr\u00e8s proches ! En r\u00e9alit\u00e9, la seule diff\u00e9rence vient du comportement par d\u00e9faut lorsqu'un argument correspond \u00e0 une liste d'items : GRPMOD cr\u00e9e un sous-total et SELMOD en liste le d\u00e9tail. Les fonctions GRPCOL et GRPROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Dans le cas d'une variable logique, 0 cr\u00e9e une modalit\u00e9 vide alors que dans le cas d'une variable continue, 0 s\u00e9lectionne bien le code 0. Exemples : S1.GRPMOD(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - le groupement des modalit\u00e9s 1 et 2 de S1 - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - la derni\u00e8re de S1. S1.GRPMOD(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - le groupement des modalit\u00e9s 1 et 2 de S1 - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - les modalit\u00e9s non cit\u00e9es S1.GRPMOD(1; ~1) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - la s\u00e9lection de la modalit\u00e9 1 de S1 - la s\u00e9lection du compl\u00e9ment de la modalit\u00e9 1 de S1, sur la base des r\u00e9pondants \u00e0 S1 Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"GRPMOD"},{"location":"Fonctions/GRPMOD1/#grpmod","text":"","title":"GRPMOD"},{"location":"Fonctions/GRPMOD1/#fonction-grpmod","text":"La fonction GRPMOD permet de regrouper les modalit\u00e9s d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de modalit\u00e9s qu'il y a de groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction GRPMOD"},{"location":"Fonctions/GRPMOD1/#syntaxe","text":"Q01.GRPMOD(Keys) ou _GRPMOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GRPMOD1/#remarques","text":"GRPMOD et SELMOD sont tr\u00e8s proches ! En r\u00e9alit\u00e9, la seule diff\u00e9rence vient du comportement par d\u00e9faut lorsqu'un argument correspond \u00e0 une liste d'items : GRPMOD cr\u00e9e un sous-total et SELMOD en liste le d\u00e9tail. Les fonctions GRPCOL et GRPROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Dans le cas d'une variable logique, 0 cr\u00e9e une modalit\u00e9 vide alors que dans le cas d'une variable continue, 0 s\u00e9lectionne bien le code 0.","title":"Remarques :"},{"location":"Fonctions/GRPMOD1/#exemples","text":"S1.GRPMOD(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - le groupement des modalit\u00e9s 1 et 2 de S1 - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - la derni\u00e8re de S1. S1.GRPMOD(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - le groupement des modalit\u00e9s 1 et 2 de S1 - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - les modalit\u00e9s non cit\u00e9es","title":"Exemples :"},{"location":"Fonctions/GRPMOD1/#s1grpmod1-1","text":"Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - la s\u00e9lection de la modalit\u00e9 1 de S1 - la s\u00e9lection du compl\u00e9ment de la modalit\u00e9 1 de S1, sur la base des r\u00e9pondants \u00e0 S1 Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"S1.GRPMOD(1; ~1)"},{"location":"Fonctions/GRPROW1/","text":"GRPROW Fonction GRPROW La fonction GRPROW permet de regrouper les colonnes d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de lignes qu'il y a groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.GRPROW(Keys) ou _GRPROW(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : L'op\u00e9rateur de regroupement est : OU pour les variables logiques, SUM pour les variables num\u00e9riques. Exemples : S1.GRPROW(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les lignes sont : - le groupement des lignes 1 et 2 de S1 - la premi\u00e8re ligne de S1 - la deuxi\u00e8me ligne de S1 - la derni\u00e8re de S1. S1.GRPMOD(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les lignes sont : - le groupement des lignes 1 et 2 de S1 - la premi\u00e8re ligne de S1 - la deuxi\u00e8me ligne de S1 - les modalit\u00e9s non cit\u00e9es Voir aussi : Gestion des dimensions","title":"GRPROW"},{"location":"Fonctions/GRPROW1/#grprow","text":"","title":"GRPROW"},{"location":"Fonctions/GRPROW1/#fonction-grprow","text":"La fonction GRPROW permet de regrouper les colonnes d'une variable. Les arguments correspondent aux diff\u00e9rents groupements souhait\u00e9s. La variable r\u00e9sultat comporte autant de lignes qu'il y a groupements. Pour cr\u00e9er un groupe, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction GRPROW"},{"location":"Fonctions/GRPROW1/#syntaxe","text":"Q01.GRPROW(Keys) ou _GRPROW(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/GRPROW1/#remarques","text":"L'op\u00e9rateur de regroupement est : OU pour les variables logiques, SUM pour les variables num\u00e9riques.","title":"Remarques :"},{"location":"Fonctions/GRPROW1/#exemples","text":"S1.GRPROW(1 2; 1; 2; -1) Cr\u00e9e une nouvelle variable dont les lignes sont : - le groupement des lignes 1 et 2 de S1 - la premi\u00e8re ligne de S1 - la deuxi\u00e8me ligne de S1 - la derni\u00e8re de S1. S1.GRPMOD(1 2; 1; 2; $O) Cr\u00e9e une nouvelle variable dont les lignes sont : - le groupement des lignes 1 et 2 de S1 - la premi\u00e8re ligne de S1 - la deuxi\u00e8me ligne de S1 - les modalit\u00e9s non cit\u00e9es Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/HIDECOL1/","text":"HIDECOL Fonction HIDECOL La consigne HIDECOL permet de cacher des colonnes d'une variable sans en modifier la base. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIDECOL(s\u00e9lection) ou _HIDECOL(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : Contrairement \u00e0 REMCOL, la fonction HIDECOL ne modifie pas la base de la variable utilis\u00e9e. Exemples : Q01.HIDECOL(1) Retourne une variable dont la 1e colonne est cach\u00e9e dans les tableaux Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"HIDECOL"},{"location":"Fonctions/HIDECOL1/#hidecol","text":"","title":"HIDECOL"},{"location":"Fonctions/HIDECOL1/#fonction-hidecol","text":"La consigne HIDECOL permet de cacher des colonnes d'une variable sans en modifier la base. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIDECOL"},{"location":"Fonctions/HIDECOL1/#syntaxe","text":"Q01.HIDECOL(s\u00e9lection) ou _HIDECOL(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIDECOL1/#remarques","text":"Contrairement \u00e0 REMCOL, la fonction HIDECOL ne modifie pas la base de la variable utilis\u00e9e.","title":"Remarques :"},{"location":"Fonctions/HIDECOL1/#exemples","text":"Q01.HIDECOL(1) Retourne une variable dont la 1e colonne est cach\u00e9e dans les tableaux Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIDEMOD1/","text":"HIDEMOD Fonction HIDEMOD La consigne HIDEMOD permet de cacher des modalit\u00e9s d'une variable sans en modifier la base. Les arguments correspondent aux listes de modalit\u00e9s \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIDEMOD(s\u00e9lection) ou _HIDEMOD(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : Contrairement \u00e0 REMMOD, la fonction HIDEMOD ne modifie pas la base de la variable utilis\u00e9e. Exemples : S1.HIDEMOD(1 -1) Cr\u00e9e une nouvelle variable dans laquelle la premi\u00e8re et la derni\u00e8re modalit\u00e9s sont cach\u00e9es dans les tris. En termes de manipulations, ces modalit\u00e9s sont toujours pr\u00e9sentes (par exemple pour un tri, une s\u00e9lection ult\u00e9rieure, etc.). Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux","title":"HIDEMOD"},{"location":"Fonctions/HIDEMOD1/#hidemod","text":"","title":"HIDEMOD"},{"location":"Fonctions/HIDEMOD1/#fonction-hidemod","text":"La consigne HIDEMOD permet de cacher des modalit\u00e9s d'une variable sans en modifier la base. Les arguments correspondent aux listes de modalit\u00e9s \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIDEMOD"},{"location":"Fonctions/HIDEMOD1/#syntaxe","text":"Q01.HIDEMOD(s\u00e9lection) ou _HIDEMOD(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIDEMOD1/#remarques","text":"Contrairement \u00e0 REMMOD, la fonction HIDEMOD ne modifie pas la base de la variable utilis\u00e9e.","title":"Remarques :"},{"location":"Fonctions/HIDEMOD1/#exemples","text":"S1.HIDEMOD(1 -1) Cr\u00e9e une nouvelle variable dans laquelle la premi\u00e8re et la derni\u00e8re modalit\u00e9s sont cach\u00e9es dans les tris. En termes de manipulations, ces modalit\u00e9s sont toujours pr\u00e9sentes (par exemple pour un tri, une s\u00e9lection ult\u00e9rieure, etc.). Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIDEROW1/","text":"HIDEROW Fonction HIDEROW La consigne HIDEROW permet de cacher des lignes d'une variable sans en modifier la base. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIDEROW(s\u00e9lection) ou _HIDEROW(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarques : Contrairement \u00e0 REMROW, la fonction HIDEROW ne modifie pas la base de la variable utilis\u00e9e. Exemples : _HIDEROW(Q01; 1) Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"HIDEROW"},{"location":"Fonctions/HIDEROW1/#hiderow","text":"","title":"HIDEROW"},{"location":"Fonctions/HIDEROW1/#fonction-hiderow","text":"La consigne HIDEROW permet de cacher des lignes d'une variable sans en modifier la base. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 cacher. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIDEROW"},{"location":"Fonctions/HIDEROW1/#syntaxe","text":"Q01.HIDEROW(s\u00e9lection) ou _HIDEROW(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIDEROW1/#remarques","text":"Contrairement \u00e0 REMROW, la fonction HIDEROW ne modifie pas la base de la variable utilis\u00e9e.","title":"Remarques :"},{"location":"Fonctions/HIDEROW1/#exemples","text":"_HIDEROW(Q01; 1) Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIGHCOL1/","text":"HIGHCOL Fonction HIGHCOL La consigne HIGHCOL permet de mettre en \u00e9vidence des colonnes d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIGHCOL(Keys) ou _HIGHCOL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"HIGHCOL"},{"location":"Fonctions/HIGHCOL1/#highcol","text":"","title":"HIGHCOL"},{"location":"Fonctions/HIGHCOL1/#fonction-highcol","text":"La consigne HIGHCOL permet de mettre en \u00e9vidence des colonnes d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIGHCOL"},{"location":"Fonctions/HIGHCOL1/#syntaxe","text":"Q01.HIGHCOL(Keys) ou _HIGHCOL(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIGHCOL1/#exemples","text":"Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIGHMOD1/","text":"HIGHMOD Fonction HIGHMOD La consigne HIGHMOD permet de mettre en \u00e9vidence des modalit\u00e9s d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIGHMOD(Keys) ou _HIGHMOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : Voir aussi : Gestion des libell\u00e9s Pr\u00e9senter les variables dans les tableaux","title":"HIGHMOD"},{"location":"Fonctions/HIGHMOD1/#highmod","text":"","title":"HIGHMOD"},{"location":"Fonctions/HIGHMOD1/#fonction-highmod","text":"La consigne HIGHMOD permet de mettre en \u00e9vidence des modalit\u00e9s d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIGHMOD"},{"location":"Fonctions/HIGHMOD1/#syntaxe","text":"Q01.HIGHMOD(Keys) ou _HIGHMOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIGHMOD1/#exemples","text":"Voir aussi : Gestion des libell\u00e9s Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIGHROW1/","text":"HIGHROW Fonction HIGHROW La consigne HIGHCOL permet de mettre en \u00e9vidence des lignes d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.HIGHROW(Keys) ou _HIGHROW(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Exemples : Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"HIGHROW"},{"location":"Fonctions/HIGHROW1/#highrow","text":"","title":"HIGHROW"},{"location":"Fonctions/HIGHROW1/#fonction-highrow","text":"La consigne HIGHCOL permet de mettre en \u00e9vidence des lignes d'une variable. Les arguments correspondent aux listes de \u00e9l\u00e9ments \u00e0 mettre en gras. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction HIGHROW"},{"location":"Fonctions/HIGHROW1/#syntaxe","text":"Q01.HIGHROW(Keys) ou _HIGHROW(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Valeur Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIGHROW1/#exemples","text":"Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/HIMOD/","text":"HIMOD Fonction HIMOD La fonction HIMOD permet d\u2019indiquer des modalit\u00e9s \u00ab principales \u00bb, qui seront conserv\u00e9es lors de l\u2019export Excel. De mani\u00e8re \u00e0 cr\u00e9er des tableaux de synth\u00e8se. Syntaxe : Q01.HIMOD(Values) ou _HIMOD(Selection; Values) **Nom ** **Type ** Description Remarque Values Liste de valeurs Liste des modalit\u00e9s \u00e0 traiter Obligatoire Exemples : Voir aussi : LOWMOD()","title":"HIMOD"},{"location":"Fonctions/HIMOD/#himod","text":"","title":"HIMOD"},{"location":"Fonctions/HIMOD/#fonction-himod","text":"La fonction HIMOD permet d\u2019indiquer des modalit\u00e9s \u00ab principales \u00bb, qui seront conserv\u00e9es lors de l\u2019export Excel. De mani\u00e8re \u00e0 cr\u00e9er des tableaux de synth\u00e8se.","title":"Fonction HIMOD"},{"location":"Fonctions/HIMOD/#syntaxe","text":"Q01.HIMOD(Values) ou _HIMOD(Selection; Values) **Nom ** **Type ** Description Remarque Values Liste de valeurs Liste des modalit\u00e9s \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HIMOD/#exemples","text":"Voir aussi : LOWMOD()","title":"Exemples :"},{"location":"Fonctions/HOUR1/","text":"HOUR Fonction HOUR La fonction HOUR construit une variable num\u00e9rique retournant l'heure du jour de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.HOUR(NaValue) ou _HOUR(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Nombre invalide par d\u00e9faut Exemples : DATES.HOUR() D\u00e9code la variable temporelle DATES et retourne l'heure de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"HOUR"},{"location":"Fonctions/HOUR1/#hour","text":"","title":"HOUR"},{"location":"Fonctions/HOUR1/#fonction-hour","text":"La fonction HOUR construit une variable num\u00e9rique retournant l'heure du jour de la variable temporelle plac\u00e9e en argument.","title":"Fonction HOUR"},{"location":"Fonctions/HOUR1/#syntaxe","text":"Q01.HOUR(NaValue) ou _HOUR(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Nombre invalide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HOUR1/#exemples","text":"DATES.HOUR() D\u00e9code la variable temporelle DATES et retourne l'heure de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/HOURS1/","text":"HOURS Fonction HOURS La fonction HOURS traduit une variable de dur\u00e9e en variable num\u00e9rique. Le r\u00e9sultat est une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s Syntaxe : Q01.HOURS(TotalCount; NaValue) ou _HOURS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"HEURES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : DURATION.HOURS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"heures\" de la variable DURATION. DURATION.HOURS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de heures. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"HOURS"},{"location":"Fonctions/HOURS1/#hours","text":"","title":"HOURS"},{"location":"Fonctions/HOURS1/#fonction-hours","text":"La fonction HOURS traduit une variable de dur\u00e9e en variable num\u00e9rique. Le r\u00e9sultat est une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s","title":"Fonction HOURS"},{"location":"Fonctions/HOURS1/#syntaxe","text":"Q01.HOURS(TotalCount; NaValue) ou _HOURS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"HEURES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/HOURS1/#exemples","text":"DURATION.HOURS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"heures\" de la variable DURATION. DURATION.HOURS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de heures. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/IF/","text":"IF Fonction IF La fonction IF permet de reconstruire en fonction d'une condition. Syntaxe : Q01.IF(Universe; ValueIfTrue; Value IfFalse) ou _IF(Variable; Universe; ValueIfTrue; Value IfFalse) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 2 Universe Variable Univers d'application (une variable ou une construction) Obligatoire 3 ValueIfTrue Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire 4 ValueIfFalse Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire Exemples : S1.IF(S2 > 80; 1; 2) Les r\u00e9pondants \u00e0 S2 > 80 se voient attribu\u00e9s la r\u00e9ponse 1 et les autres la r\u00e9ponse 2. S6.FIX(F1; Q1; Q2) Les r\u00e9pondants \u00e0 F1 se voient attribu\u00e9s la valeur de Q1 et les autres la valeurs de Q2 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"IF"},{"location":"Fonctions/IF/#if","text":"","title":"IF"},{"location":"Fonctions/IF/#fonction-if","text":"La fonction IF permet de reconstruire en fonction d'une condition.","title":"Fonction IF"},{"location":"Fonctions/IF/#syntaxe","text":"Q01.IF(Universe; ValueIfTrue; Value IfFalse) ou _IF(Variable; Universe; ValueIfTrue; Value IfFalse) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 2 Universe Variable Univers d'application (une variable ou une construction) Obligatoire 3 ValueIfTrue Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire 4 ValueIfFalse Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/IF/#exemples","text":"S1.IF(S2 > 80; 1; 2) Les r\u00e9pondants \u00e0 S2 > 80 se voient attribu\u00e9s la r\u00e9ponse 1 et les autres la r\u00e9ponse 2. S6.FIX(F1; Q1; Q2) Les r\u00e9pondants \u00e0 F1 se voient attribu\u00e9s la valeur de Q1 et les autres la valeurs de Q2 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"Exemples :"},{"location":"Fonctions/INSMOD2/","text":"INSMOD Fonction INSMOD La fonction INSMOD ajoute une modalit\u00e9 vide avant la position indiqu\u00e9 et lui attribue un libell\u00e9. Syntaxe : Q01.INSMOD(InsertionPoint; Text) ou _INSMOD(Q01; InsertionPoint; Text) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : La nouvelle modalit\u00e9 sera ins\u00e9r\u00e9e avant la position indiqu\u00e9e. Obligatoire 2 Text Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser (\u00e0 \u00e9viter lors des traitements multilingues !) Exemples : S3.INSMOD(2; \"Mon libell\u00e9\") Retourne une variable logique dont la 2e modalit\u00e9 a pour texte \"Mon libell\u00e9\". Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"INSMOD"},{"location":"Fonctions/INSMOD2/#insmod","text":"","title":"INSMOD"},{"location":"Fonctions/INSMOD2/#fonction-insmod","text":"La fonction INSMOD ajoute une modalit\u00e9 vide avant la position indiqu\u00e9 et lui attribue un libell\u00e9.","title":"Fonction INSMOD"},{"location":"Fonctions/INSMOD2/#syntaxe","text":"Q01.INSMOD(InsertionPoint; Text) ou _INSMOD(Q01; InsertionPoint; Text) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : La nouvelle modalit\u00e9 sera ins\u00e9r\u00e9e avant la position indiqu\u00e9e. Obligatoire 2 Text Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser (\u00e0 \u00e9viter lors des traitements multilingues !)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/INSMOD2/#exemples","text":"S3.INSMOD(2; \"Mon libell\u00e9\") Retourne une variable logique dont la 2e modalit\u00e9 a pour texte \"Mon libell\u00e9\". Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/INVERT/","text":"INVERT Fonction INVERT La fonction INVERT permet de s\u00e9lectionner le compl\u00e9ment des modalit\u00e9s choisies hors sans-r\u00e9ponses Syntaxe : Q01.INVERT(Selection) ou _INSVERT(Q01; Selection) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Liste des N\u00b0 de modalit\u00e9s \u00e0 traiter Obligatoire Exemples : S3.INVERT(1 3) Retourne une variable logique dont les deux modalit\u00e9s sont les compl\u00e9ments des modalit\u00e9s 1 et 3 hors sans-r\u00e9ponses. La base r\u00e9pondants initiale est conserv\u00e9e. Il est aussi possible d'\u00e9crire S3.MOD(~1 ~3) Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"INVERT"},{"location":"Fonctions/INVERT/#invert","text":"","title":"INVERT"},{"location":"Fonctions/INVERT/#fonction-invert","text":"La fonction INVERT permet de s\u00e9lectionner le compl\u00e9ment des modalit\u00e9s choisies hors sans-r\u00e9ponses","title":"Fonction INVERT"},{"location":"Fonctions/INVERT/#syntaxe","text":"Q01.INVERT(Selection) ou _INSVERT(Q01; Selection) **Nom ** **Type ** Description Remarque 1 Selection Liste de valeurs Liste des N\u00b0 de modalit\u00e9s \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/INVERT/#exemples","text":"S3.INVERT(1 3) Retourne une variable logique dont les deux modalit\u00e9s sont les compl\u00e9ments des modalit\u00e9s 1 et 3 hors sans-r\u00e9ponses. La base r\u00e9pondants initiale est conserv\u00e9e.","title":"Exemples :"},{"location":"Fonctions/INVERT/#il-est-aussi-possible-decrire-s3mod1-3","text":"Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"Il est aussi possible d'\u00e9crire S3.MOD(~1 ~3)"},{"location":"Fonctions/JUXCOL/","text":"JUXCOL Fonction JUXCOL La fonction JUXCOL juxtapose les variables en arguments sur la dimension des colonnes. Les variables qui n'ont pas de colonnes sont automatiquement adapt\u00e9es. IMPORTANT : Les modalit\u00e9s de la variable r\u00e9sultante ob\u00e9issent au principe de l'harmonisation des dimensions. Il est donc toujours possible de juxtaposer n'importe quelles variables sur les colonnes : la fonction se charge de tout harmoniser si besoin. La fonction JUXCOL est l'\u00e9quivalent de la fonction JUXROW sur la dimension des lignes. Syntaxe : _JUXCOL(selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _JUXCOL(Q1:Q2:Q3) _JUXCOL(\"Q*\") Remarque : Dans le cas de juxtaposition de plusieurs variables simples, les items colonnes r\u00e9cup\u00e8rent un libell\u00e9 constitu\u00e9 par la partie variable du titre des variables d'origines. Alors que la partie commune devient le titre de la nouvelle variable. Pour juxtaposer des variables sans tenir compte des libell\u00e9s, il faut utiliser au pr\u00e9alable les fonctions NOTXT , CLRCOL ou CLRROW Voir aussi : Gestion des dimensions Combiner les variables","title":"JUXCOL"},{"location":"Fonctions/JUXCOL/#juxcol","text":"","title":"JUXCOL"},{"location":"Fonctions/JUXCOL/#fonction-juxcol","text":"La fonction JUXCOL juxtapose les variables en arguments sur la dimension des colonnes. Les variables qui n'ont pas de colonnes sont automatiquement adapt\u00e9es. IMPORTANT : Les modalit\u00e9s de la variable r\u00e9sultante ob\u00e9issent au principe de l'harmonisation des dimensions. Il est donc toujours possible de juxtaposer n'importe quelles variables sur les colonnes : la fonction se charge de tout harmoniser si besoin. La fonction JUXCOL est l'\u00e9quivalent de la fonction JUXROW sur la dimension des lignes.","title":"Fonction JUXCOL"},{"location":"Fonctions/JUXCOL/#syntaxe","text":"_JUXCOL(selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/JUXCOL/#exemples","text":"_JUXCOL(Q1:Q2:Q3) _JUXCOL(\"Q*\")","title":"Exemples :"},{"location":"Fonctions/JUXCOL/#remarque","text":"Dans le cas de juxtaposition de plusieurs variables simples, les items colonnes r\u00e9cup\u00e8rent un libell\u00e9 constitu\u00e9 par la partie variable du titre des variables d'origines. Alors que la partie commune devient le titre de la nouvelle variable. Pour juxtaposer des variables sans tenir compte des libell\u00e9s, il faut utiliser au pr\u00e9alable les fonctions NOTXT , CLRCOL ou CLRROW Voir aussi : Gestion des dimensions Combiner les variables","title":"Remarque :"},{"location":"Fonctions/JUXROW1/","text":"JUXROW Fonction JUXROW La fonction JUXROW juxtapose les variables en arguments sur la dimension des lignes. Les variables qui n'ont pas de lignes sont automatiquement adapt\u00e9es. IMPORTANT : Les modalit\u00e9s de la variable r\u00e9sultante ob\u00e9issent au principe de l'harmonisation des dimensions. Il est donc toujours possible de juxtaposer n'importe quelles variables sur les lignes : la fonction se charge de tout harmoniser si besoin. La fonction JUXROW est l'\u00e9quivalent de la fonction JUXCOL sur la dimension des colonnes. Syntaxe : _JUXROW(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _JUXROW(Q1:Q2:Q3) _JUXROW(\"Q*\") Remarque : Une variable ayant une dimension ligne a obligatoirement une dimension colonne. Autrement dit, seule une variable doublement dimensionn\u00e9e a des lignes et des colonnes. Une variable simplement dimensionn\u00e9e n'a jamais de lignes. Dans le cas de juxtaposition de plusieurs varaibles simples, les items colonnes r\u00e9cup\u00e8rent un libell\u00e9 constitu\u00e9 par la partie variable du titre des variables d'origines. Alors que la partie commune devient le titre de la nouvelle variable. Pour juxtaposer des variables sans tenir compte des libell\u00e9s, il faut utiliser au pr\u00e9alable les fonctions NOTXT , CLRCOL ou CLRROW Voir aussi : Gestion des dimensions Combiner les variables","title":"JUXROW"},{"location":"Fonctions/JUXROW1/#juxrow","text":"","title":"JUXROW"},{"location":"Fonctions/JUXROW1/#fonction-juxrow","text":"La fonction JUXROW juxtapose les variables en arguments sur la dimension des lignes. Les variables qui n'ont pas de lignes sont automatiquement adapt\u00e9es. IMPORTANT : Les modalit\u00e9s de la variable r\u00e9sultante ob\u00e9issent au principe de l'harmonisation des dimensions. Il est donc toujours possible de juxtaposer n'importe quelles variables sur les lignes : la fonction se charge de tout harmoniser si besoin. La fonction JUXROW est l'\u00e9quivalent de la fonction JUXCOL sur la dimension des colonnes.","title":"Fonction JUXROW"},{"location":"Fonctions/JUXROW1/#syntaxe","text":"_JUXROW(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/JUXROW1/#exemples","text":"_JUXROW(Q1:Q2:Q3) _JUXROW(\"Q*\")","title":"Exemples :"},{"location":"Fonctions/JUXROW1/#remarque","text":"Une variable ayant une dimension ligne a obligatoirement une dimension colonne. Autrement dit, seule une variable doublement dimensionn\u00e9e a des lignes et des colonnes. Une variable simplement dimensionn\u00e9e n'a jamais de lignes. Dans le cas de juxtaposition de plusieurs varaibles simples, les items colonnes r\u00e9cup\u00e8rent un libell\u00e9 constitu\u00e9 par la partie variable du titre des variables d'origines. Alors que la partie commune devient le titre de la nouvelle variable. Pour juxtaposer des variables sans tenir compte des libell\u00e9s, il faut utiliser au pr\u00e9alable les fonctions NOTXT , CLRCOL ou CLRROW Voir aussi : Gestion des dimensions Combiner les variables","title":"Remarque :"},{"location":"Fonctions/JUXVAR1/","text":"JUXVAR Fonction JUXVAR La fonction JUXVAR juxtapose les modalit\u00e9s des variables en argument. Si la premi\u00e8re variable a 3 modalit\u00e9s et la seconde en a 2, alors la variables r\u00e9sultante poss\u00e8de 5 modalit\u00e9s. La base de la variable obtenue est celle des r\u00e9pondants \u00e0 au moins une des variables en argument. La fonction JUXVAR est \u00e9quivalente \u00e0 l'op\u00e9rateur de juxtaposition \",\" (la virgule). Syntaxe : _JUXVAR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _JUXVAR(S1; S3) [ou S1, S3] La variable r\u00e9sultante liste les modalit\u00e9s de S1 puis les modalit\u00e9s de S3. Base : r\u00e9pondants \u00e0 S1 ou S3. _JUXVAR(S1; S3; S4) [ou S1, S3, S4] La variable r\u00e9sultante liste les modalit\u00e9s de S1 puis celles de S3 puis celles de S4. Base : r\u00e9pondants \u00e0 S1, S3 ou S4. Remarques : Il est possible de juxtaposer des variables logiques avec des variables num\u00e9riques : _JUXVAR(S1; S1Q.TITLE(\"Nombre de r\u00e9ponses cit\u00e9es\")) En cas de contr\u00f4le du calcul affich\u00e9, la fonction TOMOD est plus adapt\u00e9e. L'utilisation de cette fonction avec des variables continues est \u00e9quivalente \u00e0 JUXCOL() et cr\u00e9e donc des d\u00e9tails (lignes et/ou colonnes) Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Crit\u00e8res Combiner les variables","title":"JUXVAR"},{"location":"Fonctions/JUXVAR1/#juxvar","text":"","title":"JUXVAR"},{"location":"Fonctions/JUXVAR1/#fonction-juxvar","text":"La fonction JUXVAR juxtapose les modalit\u00e9s des variables en argument. Si la premi\u00e8re variable a 3 modalit\u00e9s et la seconde en a 2, alors la variables r\u00e9sultante poss\u00e8de 5 modalit\u00e9s. La base de la variable obtenue est celle des r\u00e9pondants \u00e0 au moins une des variables en argument. La fonction JUXVAR est \u00e9quivalente \u00e0 l'op\u00e9rateur de juxtaposition \",\" (la virgule).","title":"Fonction JUXVAR"},{"location":"Fonctions/JUXVAR1/#syntaxe","text":"_JUXVAR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/JUXVAR1/#exemples","text":"_JUXVAR(S1; S3) [ou S1, S3] La variable r\u00e9sultante liste les modalit\u00e9s de S1 puis les modalit\u00e9s de S3. Base : r\u00e9pondants \u00e0 S1 ou S3. _JUXVAR(S1; S3; S4) [ou S1, S3, S4] La variable r\u00e9sultante liste les modalit\u00e9s de S1 puis celles de S3 puis celles de S4. Base : r\u00e9pondants \u00e0 S1, S3 ou S4.","title":"Exemples :"},{"location":"Fonctions/JUXVAR1/#remarques","text":"Il est possible de juxtaposer des variables logiques avec des variables num\u00e9riques : _JUXVAR(S1; S1Q.TITLE(\"Nombre de r\u00e9ponses cit\u00e9es\")) En cas de contr\u00f4le du calcul affich\u00e9, la fonction TOMOD est plus adapt\u00e9e. L'utilisation de cette fonction avec des variables continues est \u00e9quivalente \u00e0 JUXCOL() et cr\u00e9e donc des d\u00e9tails (lignes et/ou colonnes) Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Crit\u00e8res Combiner les variables","title":"Remarques :"},{"location":"Fonctions/LOGINFO1/","text":"LOGINFO Fonction LOGINFO La fonction LOGINFO permet d'afficher un message dans le journal \u00e0 l'occasion d'une recodification. Syntaxe : _LOGINFO(variable;texte) ou variable.LOGINFO(texte) **Nom ** **Type ** Description Remarque texte cha\u00eene de caract\u00e8res Message affich\u00e9 dans le journal. Usage des annotations possible. Obligatoire Exemples : Q1.TITLE(\"Nouveau titre\").LOGINFO(\"Mise \u00e0 jour du titre de Q1\") Le message \"Mise \u00e0 jour du titre de Q1\" appara\u00eet dans le journal. Avec l'utilisation des annotations [TITLE] et [NAME], il est possible d'\u00e9crire : Q1.LOGINFO(\"le titre de [NAME] est [TITLE]\") cela affiche dans le journal : \"le titre de Q1 est Q1. Age de l'interrog\u00e9 \" Remarques : Les annotations disponibles sont : [NAME] : nom de la variable [TITLE] : titre de la variable [TITLE:S] : titre court de la variable [COMMENT] : commentaire de la variable [UNIVERSE] : univers de la variable [WEIGHT] : poids de la variable [DEFINITION] : d\u00e9finition de la variable Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Crit\u00e8res Combiner les variables","title":"LOGINFO"},{"location":"Fonctions/LOGINFO1/#loginfo","text":"","title":"LOGINFO"},{"location":"Fonctions/LOGINFO1/#fonction-loginfo","text":"La fonction LOGINFO permet d'afficher un message dans le journal \u00e0 l'occasion d'une recodification.","title":"Fonction LOGINFO"},{"location":"Fonctions/LOGINFO1/#syntaxe","text":"_LOGINFO(variable;texte) ou variable.LOGINFO(texte) **Nom ** **Type ** Description Remarque texte cha\u00eene de caract\u00e8res Message affich\u00e9 dans le journal. Usage des annotations possible. Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/LOGINFO1/#exemples","text":"Q1.TITLE(\"Nouveau titre\").LOGINFO(\"Mise \u00e0 jour du titre de Q1\") Le message \"Mise \u00e0 jour du titre de Q1\" appara\u00eet dans le journal. Avec l'utilisation des annotations [TITLE] et [NAME], il est possible d'\u00e9crire : Q1.LOGINFO(\"le titre de [NAME] est [TITLE]\") cela affiche dans le journal : \"le titre de Q1 est Q1. Age de l'interrog\u00e9 \"","title":"Exemples :"},{"location":"Fonctions/LOGINFO1/#remarques","text":"Les annotations disponibles sont : [NAME] : nom de la variable [TITLE] : titre de la variable [TITLE:S] : titre court de la variable [COMMENT] : commentaire de la variable [UNIVERSE] : univers de la variable [WEIGHT] : poids de la variable [DEFINITION] : d\u00e9finition de la variable Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Crit\u00e8res Combiner les variables","title":"Remarques :"},{"location":"Fonctions/LOWER/","text":"LOWER Fonction LOWER La fonction LOWER passe les r\u00e9ponses d'une variable litt\u00e9rale en minuscules. Syntaxe : Q01.LOWER() ou _LOWER(Q01) Exemples : \\ S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"LOWER"},{"location":"Fonctions/LOWER/#lower","text":"","title":"LOWER"},{"location":"Fonctions/LOWER/#fonction-lower","text":"La fonction LOWER passe les r\u00e9ponses d'une variable litt\u00e9rale en minuscules.","title":"Fonction LOWER"},{"location":"Fonctions/LOWER/#syntaxe","text":"Q01.LOWER() ou _LOWER(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/LOWER/#exemples","text":"\\ S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/LOWMOD/","text":"LOWMOD Fonction LOWMOD La fonction LOWMOD permet d\u2019indiquer des modalit\u00e9s \u00ab secondaires \u00bb, qui seront masques lors de l\u2019export Excel. Syntaxe : Q01.LOWMOD(Values) ou _LOWMOD(Selection; Values) **Nom ** **Type ** Description Remarque Values Liste de valeurs Liste des modalit\u00e9s \u00e0 traiter Obligatoire Exemples : Voir aussi : HIMOD()","title":"LOWMOD"},{"location":"Fonctions/LOWMOD/#lowmod","text":"","title":"LOWMOD"},{"location":"Fonctions/LOWMOD/#fonction-lowmod","text":"La fonction LOWMOD permet d\u2019indiquer des modalit\u00e9s \u00ab secondaires \u00bb, qui seront masques lors de l\u2019export Excel.","title":"Fonction LOWMOD"},{"location":"Fonctions/LOWMOD/#syntaxe","text":"Q01.LOWMOD(Values) ou _LOWMOD(Selection; Values) **Nom ** **Type ** Description Remarque Values Liste de valeurs Liste des modalit\u00e9s \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/LOWMOD/#exemples","text":"Voir aussi : HIMOD()","title":"Exemples :"},{"location":"Fonctions/MAX/","text":"MAX Fonction MAX La fonction MAX s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le maximum des valeurs rencontr\u00e9es dans les arguments . La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MAXNA. Syntaxe : _MAX(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MAX(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. _MAXNA(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MAX"},{"location":"Fonctions/MAX/#max","text":"","title":"MAX"},{"location":"Fonctions/MAX/#fonction-max","text":"La fonction MAX s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le maximum des valeurs rencontr\u00e9es dans les arguments . La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MAXNA.","title":"Fonction MAX"},{"location":"Fonctions/MAX/#syntaxe","text":"_MAX(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MAX/#exemples","text":"_MAX(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. _MAXNA(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MAXCOUNT/","text":"MAXCOUNT Fonction MAXCOUNT La fonction MAX COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre maximum de citations. Syntaxe : Q01.MAXCOUNT(Argument;Liste;Mode) ou _MAXCOUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre maximum de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE Exemples : Q2.MAXCOUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au maximum 2 r\u00e9ponses. Q2.MINCOUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au maximum 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : COUNT() MINCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"MAXCOUNT"},{"location":"Fonctions/MAXCOUNT/#maxcount","text":"","title":"MAXCOUNT"},{"location":"Fonctions/MAXCOUNT/#fonction-maxcount","text":"La fonction MAX COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre maximum de citations.","title":"Fonction MAXCOUNT"},{"location":"Fonctions/MAXCOUNT/#syntaxe","text":"Q01.MAXCOUNT(Argument;Liste;Mode) ou _MAXCOUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre maximum de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MAXCOUNT/#exemples","text":"Q2.MAXCOUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au maximum 2 r\u00e9ponses. Q2.MINCOUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au maximum 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : COUNT() MINCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/MAXNA1/","text":"MAXNA Fonction MAXNA La fonction MAXNA calcule la valeur maximum entre plusieurs variables num\u00e9riques (maximum entre X et NA = X quelque soit X). Syntaxe : _MAXNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MAXNA(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. _MAX(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MAXNA"},{"location":"Fonctions/MAXNA1/#maxna","text":"","title":"MAXNA"},{"location":"Fonctions/MAXNA1/#fonction-maxna","text":"La fonction MAXNA calcule la valeur maximum entre plusieurs variables num\u00e9riques (maximum entre X et NA = X quelque soit X).","title":"Fonction MAXNA"},{"location":"Fonctions/MAXNA1/#syntaxe","text":"_MAXNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MAXNA1/#exemples","text":"_MAXNA(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. _MAX(Q04A; Q04B) Retourne une variable qui plafonne Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MEAN1/","text":"MEAN Fonction MEAN La fonction MEAN s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont les moyennes des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MEANNA. Syntaxe : _MEAN(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MEAN(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la moyenne arithm\u00e9tique de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MEAN"},{"location":"Fonctions/MEAN1/#mean","text":"","title":"MEAN"},{"location":"Fonctions/MEAN1/#fonction-mean","text":"La fonction MEAN s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont les moyennes des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MEANNA.","title":"Fonction MEAN"},{"location":"Fonctions/MEAN1/#syntaxe","text":"_MEAN(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MEAN1/#exemples","text":"_MEAN(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la moyenne arithm\u00e9tique de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MEANNA1/","text":"MEANNA Fonction MEANNA La fonction MEANNA calcule la valeur moyenne entre plusieurs variables num\u00e9riques (moyenne de X et NA = X quelque soit X). Syntaxe : _MEANNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MEANNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la moyenne arithm\u00e9tique Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MEANNA"},{"location":"Fonctions/MEANNA1/#meanna","text":"","title":"MEANNA"},{"location":"Fonctions/MEANNA1/#fonction-meanna","text":"La fonction MEANNA calcule la valeur moyenne entre plusieurs variables num\u00e9riques (moyenne de X et NA = X quelque soit X).","title":"Fonction MEANNA"},{"location":"Fonctions/MEANNA1/#syntaxe","text":"_MEANNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MEANNA1/#exemples","text":"_MEANNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la moyenne arithm\u00e9tique Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MERGE1/","text":"MERGE Fonction MERGE La fonction MERGE colle les enregistrements des variables plac\u00e9es en argument et cr\u00e9e le niveau qui y correspond. Ainsi, le nombre d'enregistrements de la variable r\u00e9sultat est la somme des nombres d'enregistrements des variables en argument. Syntaxe : _MERGE(LevelName; Variables) **Nom ** **Type ** Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau cible (le niveau DOIT EXISTER) Obligatoire 2 Variables Liste de variables Liste des variables \u00e0 fusionner, g\u00e9n\u00e9ralement sur des niveaux diff\u00e9rents. Si le niveau d'arriv\u00e9e existe d\u00e9j\u00e0, alors les variables doivent \u00eatre coh\u00e9rentes avec les niveaux utilis\u00e9s lors du 1er appel. Obligatoire Remarques : Cette fonction permet de r\u00e9aliser une fusion d'\u00e9tudes \"manuelle\" : vous importez les diff\u00e9rentes \u00e9tudes sous forme de niveaux \u00e0 part enti\u00e8re (vous pouvez utiliser un masque de renommage pour bien isoler les variables). Puis vous cr\u00e9ez les variables fusionn\u00e9es \u00e0 l'aide de MERGE. Il sera sans doute utile de recourir \u00e0 FITMOD pour harmoniser les variables en question (au choix, sur les codes, les textes, etc.). Exemples : _MERGE(\"PRODUITS\";Q1A;Q1B) Voir aussi : Niveaux","title":"MERGE"},{"location":"Fonctions/MERGE1/#merge","text":"","title":"MERGE"},{"location":"Fonctions/MERGE1/#fonction-merge","text":"La fonction MERGE colle les enregistrements des variables plac\u00e9es en argument et cr\u00e9e le niveau qui y correspond. Ainsi, le nombre d'enregistrements de la variable r\u00e9sultat est la somme des nombres d'enregistrements des variables en argument.","title":"Fonction MERGE"},{"location":"Fonctions/MERGE1/#syntaxe","text":"_MERGE(LevelName; Variables) **Nom ** **Type ** Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau cible (le niveau DOIT EXISTER) Obligatoire 2 Variables Liste de variables Liste des variables \u00e0 fusionner, g\u00e9n\u00e9ralement sur des niveaux diff\u00e9rents. Si le niveau d'arriv\u00e9e existe d\u00e9j\u00e0, alors les variables doivent \u00eatre coh\u00e9rentes avec les niveaux utilis\u00e9s lors du 1er appel. Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MERGE1/#remarques","text":"Cette fonction permet de r\u00e9aliser une fusion d'\u00e9tudes \"manuelle\" : vous importez les diff\u00e9rentes \u00e9tudes sous forme de niveaux \u00e0 part enti\u00e8re (vous pouvez utiliser un masque de renommage pour bien isoler les variables). Puis vous cr\u00e9ez les variables fusionn\u00e9es \u00e0 l'aide de MERGE. Il sera sans doute utile de recourir \u00e0 FITMOD pour harmoniser les variables en question (au choix, sur les codes, les textes, etc.).","title":"Remarques :"},{"location":"Fonctions/MERGE1/#exemples","text":"_MERGE(\"PRODUITS\";Q1A;Q1B) Voir aussi : Niveaux","title":"Exemples :"},{"location":"Fonctions/MILLISECOND1/","text":"MILLISECOND Fonction MILLISECOND La fonction MILLISECOND construit une variable num\u00e9rique retournant la composante millisecondes de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.MILLISECOND(NaValue) ou _MILLISECOND(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur affect\u00e9e aux sans-r\u00e9ponses Sans-r\u00e9ponse par d\u00e9faut Exemples : DATES.MILLISECOND() D\u00e9code la variable temporelle DATES et retourne les millisecondes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"MILLISECOND"},{"location":"Fonctions/MILLISECOND1/#millisecond","text":"","title":"MILLISECOND"},{"location":"Fonctions/MILLISECOND1/#fonction-millisecond","text":"La fonction MILLISECOND construit une variable num\u00e9rique retournant la composante millisecondes de la variable temporelle plac\u00e9e en argument.","title":"Fonction MILLISECOND"},{"location":"Fonctions/MILLISECOND1/#syntaxe","text":"Q01.MILLISECOND(NaValue) ou _MILLISECOND(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur affect\u00e9e aux sans-r\u00e9ponses Sans-r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MILLISECOND1/#exemples","text":"DATES.MILLISECOND() D\u00e9code la variable temporelle DATES et retourne les millisecondes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/MILLISECONDS1/","text":"MILLISECONDS Fonction MILLISECONDS La fonction MILLISECONDS traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de millisecondes Si FALSE, retourne simplement le composant \"millisecondes\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s Syntaxe : Q01.MILLISECONDS(TotalCount; NaValue) ou _MILLISECONDS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"MILLISECONDES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : DURATION.MILLISECONDS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"millisecondes\" de la variable DURATION. DURATION.MILLISECONDS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de millisecondes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"MILLISECONDS"},{"location":"Fonctions/MILLISECONDS1/#milliseconds","text":"","title":"MILLISECONDS"},{"location":"Fonctions/MILLISECONDS1/#fonction-milliseconds","text":"La fonction MILLISECONDS traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de millisecondes Si FALSE, retourne simplement le composant \"millisecondes\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s","title":"Fonction MILLISECONDS"},{"location":"Fonctions/MILLISECONDS1/#syntaxe","text":"Q01.MILLISECONDS(TotalCount; NaValue) ou _MILLISECONDS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"MILLISECONDES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MILLISECONDS1/#exemples","text":"DURATION.MILLISECONDS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"millisecondes\" de la variable DURATION. DURATION.MILLISECONDS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de millisecondes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/MIMAX1/","text":"MIMAX Fonction MIMAX La fonction MIMAX circonscrit une variable num\u00e9rique en lui appliquant une borne inf\u00e9rieure et/ou sup\u00e9rieure. Argument 1 : la valeur minimale (plancher) Argument 2 : la valeur maximale (plafond) Argument 3 optionnel : TRUE (par d\u00e9faut) pour autoriser la valeur minimale, FALSE pour l'exclure Argument 4 optionnel : TRUE (par d\u00e9faut) pour autoriser la valeur maximale, FALSE pour l'exclure Argument 5 optionnel : TRUE pour ramener les valeurs hors zone \u00e0 la borne, FALSE (par d\u00e9faut) pour les mettre \u00e0 Sans-R\u00e9ponse Syntaxe : Q01.MIMAX(MinValue; MaxValue; IncludeMini; IncludeMaxi; ForceInsideRangeMode) ou _MIMAX(Q01; MinValue; MaxValue; IncludeMini; IncludeMaxi; ForceInsideRangeMode) **Nom ** **Type ** Description Remarque 1 MinValue Nombre Valeur mini 1 par d\u00e9faut 2 MaxValue Nombre Valeur maxi Nombre maximal par d\u00e9faut 3 IncludeMini Bool\u00e9en Par d\u00e9faut mini inclus TRUE par d\u00e9faut 4 IncludeMaxi Bool\u00e9en par d\u00e9faut, maxi inclus TRUE par d\u00e9faut 5 ForceInsideRangeMode Bool\u00e9en Par d\u00e9faut, les hors intervalle sont en sans-r\u00e9ponse FALSE par d\u00e9faut Exemples : AGE.MIMAX(18; 99; TRUE; TRUE; TRUE) La variable produite repr\u00e9sente l'\u00e2ge entre 18 et 99 compris. Les valeurs initialement hors champ sont ramen\u00e9es \u00e0 la borne la plus proche. AGE.MIMAX(18; 99) La variable produite repr\u00e9sente l'\u00e2ge entre 18 et 99 compris. Les valeurs initialement hors champ sont \u00e9limin\u00e9es (sans-r\u00e9ponse). Voir aussi : Manipuler les variables num\u00e9riques","title":"MIMAX"},{"location":"Fonctions/MIMAX1/#mimax","text":"","title":"MIMAX"},{"location":"Fonctions/MIMAX1/#fonction-mimax","text":"La fonction MIMAX circonscrit une variable num\u00e9rique en lui appliquant une borne inf\u00e9rieure et/ou sup\u00e9rieure. Argument 1 : la valeur minimale (plancher) Argument 2 : la valeur maximale (plafond) Argument 3 optionnel : TRUE (par d\u00e9faut) pour autoriser la valeur minimale, FALSE pour l'exclure Argument 4 optionnel : TRUE (par d\u00e9faut) pour autoriser la valeur maximale, FALSE pour l'exclure Argument 5 optionnel : TRUE pour ramener les valeurs hors zone \u00e0 la borne, FALSE (par d\u00e9faut) pour les mettre \u00e0 Sans-R\u00e9ponse","title":"Fonction MIMAX"},{"location":"Fonctions/MIMAX1/#syntaxe","text":"Q01.MIMAX(MinValue; MaxValue; IncludeMini; IncludeMaxi; ForceInsideRangeMode) ou _MIMAX(Q01; MinValue; MaxValue; IncludeMini; IncludeMaxi; ForceInsideRangeMode) **Nom ** **Type ** Description Remarque 1 MinValue Nombre Valeur mini 1 par d\u00e9faut 2 MaxValue Nombre Valeur maxi Nombre maximal par d\u00e9faut 3 IncludeMini Bool\u00e9en Par d\u00e9faut mini inclus TRUE par d\u00e9faut 4 IncludeMaxi Bool\u00e9en par d\u00e9faut, maxi inclus TRUE par d\u00e9faut 5 ForceInsideRangeMode Bool\u00e9en Par d\u00e9faut, les hors intervalle sont en sans-r\u00e9ponse FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MIMAX1/#exemples","text":"AGE.MIMAX(18; 99; TRUE; TRUE; TRUE) La variable produite repr\u00e9sente l'\u00e2ge entre 18 et 99 compris. Les valeurs initialement hors champ sont ramen\u00e9es \u00e0 la borne la plus proche. AGE.MIMAX(18; 99) La variable produite repr\u00e9sente l'\u00e2ge entre 18 et 99 compris. Les valeurs initialement hors champ sont \u00e9limin\u00e9es (sans-r\u00e9ponse). Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MIN1/","text":"MIN Fonction MIN La fonction MIN s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le minimum des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MINNA. Syntaxe : _MIN(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MIN(Q04A; Q04B) Retourne une variable plancher de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MIN"},{"location":"Fonctions/MIN1/#min","text":"","title":"MIN"},{"location":"Fonctions/MIN1/#fonction-min","text":"La fonction MIN s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le minimum des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MINNA.","title":"Fonction MIN"},{"location":"Fonctions/MIN1/#syntaxe","text":"_MIN(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :"},{"location":"Fonctions/MIN1/#exemples","text":"_MIN(Q04A; Q04B) Retourne une variable plancher de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MINCOUNT/","text":"MINCOUNT Fonction MINCOUNT La fonction MIN COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre minimum de citations. Syntaxe : Q01.MINCOUNT(Argument;Liste;Mode) ou _MINCOUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre minimum de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE Exemples : Q2.MINCOUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au minimum 2 r\u00e9ponses. Q2.MINCOUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au minimum 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : COUNT() MAXCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"MINCOUNT"},{"location":"Fonctions/MINCOUNT/#mincount","text":"","title":"MINCOUNT"},{"location":"Fonctions/MINCOUNT/#fonction-mincount","text":"La fonction MIN COUNT cr\u00e9e un filtre depuis une variable multi-r\u00e9ponses et un nombre minimum de citations.","title":"Fonction MINCOUNT"},{"location":"Fonctions/MINCOUNT/#syntaxe","text":"Q01.MINCOUNT(Argument;Liste;Mode) ou _MINCOUNT(Q01; Argument;Liste;Mode) **Nom ** **Type ** Description Remarque Argument Entier Nombre minimum de citations Obligatoire Liste Liste Liste des modalit\u00e9s consid\u00e9r\u00e9es Mode Bool\u00e9en Exclusivement sur la base de la s\u00e9lection si TRUE","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MINCOUNT/#exemples","text":"Q2.MINCOUNT(2) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au minimum 2 r\u00e9ponses. Q2.MINCOUNT(2; 1 2 3;TRUE) Cr\u00e9e un filtre s\u00e9lectionnant les individus ayant cit\u00e9 au minimum 2 r\u00e9ponses parmi les modalit\u00e9s 1, 2 ou 3 exclusivement. Voir aussi : COUNT() MAXCOUNT() Gestion des libell\u00e9s Propri\u00e9t\u00e9s des variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/MINNA1/","text":"MINNA Fonction MINNA La fonction MINNA calcule la valeur minimum entre plusieurs variables num\u00e9riques (minimum entre X et NA = X quelque soit X). Syntaxe : _MINNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MINNA(Q04A; Q04B) Retourne une variable plancher de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"MINNA"},{"location":"Fonctions/MINNA1/#minna","text":"","title":"MINNA"},{"location":"Fonctions/MINNA1/#fonction-minna","text":"La fonction MINNA calcule la valeur minimum entre plusieurs variables num\u00e9riques (minimum entre X et NA = X quelque soit X).","title":"Fonction MINNA"},{"location":"Fonctions/MINNA1/#syntaxe","text":"_MINNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MINNA1/#exemples","text":"_MINNA(Q04A; Q04B) Retourne une variable plancher de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/MINUTE1/","text":"MINUTE Fonction MINUTE La fonction MINUTE construit une variable num\u00e9rique retournant la composante minutes de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.MINUTE(NaValue) ou _MINUTE(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut Exemples : DATES.MINUTE() D\u00e9code la variable temporelle DATES et retourne les minutes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"MINUTE"},{"location":"Fonctions/MINUTE1/#minute","text":"","title":"MINUTE"},{"location":"Fonctions/MINUTE1/#fonction-minute","text":"La fonction MINUTE construit une variable num\u00e9rique retournant la composante minutes de la variable temporelle plac\u00e9e en argument.","title":"Fonction MINUTE"},{"location":"Fonctions/MINUTE1/#syntaxe","text":"Q01.MINUTE(NaValue) ou _MINUTE(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MINUTE1/#exemples","text":"DATES.MINUTE() D\u00e9code la variable temporelle DATES et retourne les minutes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/MINUTES1/","text":"MINUTES Fonction MINUTES La fonction MINUTES traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de minutes Si FALSE, retourne simplement le composant \"minute\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s Syntaxe : Q01.MINUTES(TotalCount; NaValue) ou _MINUTES(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"MINUTES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : DURATION.MINUTES(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"minute\" de la variable DURATION. DURATION.MINUTES(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de minutes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"MINUTES"},{"location":"Fonctions/MINUTES1/#minutes","text":"","title":"MINUTES"},{"location":"Fonctions/MINUTES1/#fonction-minutes","text":"La fonction MINUTES traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de minutes Si FALSE, retourne simplement le composant \"minute\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s","title":"Fonction MINUTES"},{"location":"Fonctions/MINUTES1/#syntaxe","text":"Q01.MINUTES(TotalCount; NaValue) ou _MINUTES(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"MINUTES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MINUTES1/#exemples","text":"DURATION.MINUTES(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"minute\" de la variable DURATION. DURATION.MINUTES(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de minutes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/MOD/","text":"MOD Fonction MOD voir SELMOD","title":"MOD"},{"location":"Fonctions/MOD/#mod","text":"","title":"MOD"},{"location":"Fonctions/MOD/#fonction-mod","text":"voir SELMOD","title":"Fonction MOD"},{"location":"Fonctions/MONTH1/","text":"MONTH Fonction MONTH La fonction MONTH construit une variable num\u00e9rique retournant la composante \"mois\" de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.MONTH(NaValue) ou _MONTH(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut Exemples : DATES.MONTH() d\u00e9code la variable temporelle DATES et retourne les mois de la variable avec : 1 = janvier 2 = f\u00e9vrier 3 = mars 4 = avril 5 = mai 6 = juin 7 = juillet 8 = ao\u00fbt 9 = septembre 10 = octobre 11 = novembre 12 = d\u00e9cembre Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"MONTH"},{"location":"Fonctions/MONTH1/#month","text":"","title":"MONTH"},{"location":"Fonctions/MONTH1/#fonction-month","text":"La fonction MONTH construit une variable num\u00e9rique retournant la composante \"mois\" de la variable temporelle plac\u00e9e en argument.","title":"Fonction MONTH"},{"location":"Fonctions/MONTH1/#syntaxe","text":"Q01.MONTH(NaValue) ou _MONTH(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MONTH1/#exemples","text":"DATES.MONTH() d\u00e9code la variable temporelle DATES et retourne les mois de la variable avec : 1 = janvier 2 = f\u00e9vrier 3 = mars 4 = avril 5 = mai 6 = juin 7 = juillet 8 = ao\u00fbt 9 = septembre 10 = octobre 11 = novembre 12 = d\u00e9cembre Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/MTOD1/","text":"MTOD Fonction MTOD La fonction MTOD transforme une variable multi-r\u00e9ponses en variable mono-r\u00e9ponse. Deux possibilit\u00e9s sont offertes : soit la \"plus petite\" des modalit\u00e9s cit\u00e9es est retenue, soit la fonction ne retient que ceux qui ont donn\u00e9 une seule et unique r\u00e9ponse. L'argument optionnel permet de d\u00e9terminer le mode de travail : FALSE (valeur par d\u00e9faut) : la plus petite modalit\u00e9 cit\u00e9e est retenue TRUE : seuls les r\u00e9pondants qui n'ont cit\u00e9 qu'une seule modalit\u00e9s sont retenus Syntaxe : Q01.MTOD(SingleAnswerOnly) ou _MTOD(Q01; SingleAnswerOnly) **Nom ** **Type ** Description Remarque SingleAnswerOnly Bool\u00e9en Par d\u00e9faut, consid\u00e8re toutes les r\u00e9ponses FALSE par d\u00e9faut Exemples : S6.MTOD() [ou S6.MTOD(FALSE)] La variable r\u00e9sultante est une mono-r\u00e9ponse dont les r\u00e9ponses sont uniquement les plus petites modalit\u00e9s cit\u00e9es. S6.MTOD(TRUE) La variable r\u00e9sultante est une mono-r\u00e9ponse dont les r\u00e9ponses sont celles de ceux qui n'ont cit\u00e9 qu'une seule r\u00e9ponse. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"MTOD"},{"location":"Fonctions/MTOD1/#mtod","text":"","title":"MTOD"},{"location":"Fonctions/MTOD1/#fonction-mtod","text":"La fonction MTOD transforme une variable multi-r\u00e9ponses en variable mono-r\u00e9ponse. Deux possibilit\u00e9s sont offertes : soit la \"plus petite\" des modalit\u00e9s cit\u00e9es est retenue, soit la fonction ne retient que ceux qui ont donn\u00e9 une seule et unique r\u00e9ponse. L'argument optionnel permet de d\u00e9terminer le mode de travail : FALSE (valeur par d\u00e9faut) : la plus petite modalit\u00e9 cit\u00e9e est retenue TRUE : seuls les r\u00e9pondants qui n'ont cit\u00e9 qu'une seule modalit\u00e9s sont retenus","title":"Fonction MTOD"},{"location":"Fonctions/MTOD1/#syntaxe","text":"Q01.MTOD(SingleAnswerOnly) ou _MTOD(Q01; SingleAnswerOnly) **Nom ** **Type ** Description Remarque SingleAnswerOnly Bool\u00e9en Par d\u00e9faut, consid\u00e8re toutes les r\u00e9ponses FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MTOD1/#exemples","text":"S6.MTOD() [ou S6.MTOD(FALSE)] La variable r\u00e9sultante est une mono-r\u00e9ponse dont les r\u00e9ponses sont uniquement les plus petites modalit\u00e9s cit\u00e9es. S6.MTOD(TRUE) La variable r\u00e9sultante est une mono-r\u00e9ponse dont les r\u00e9ponses sont celles de ceux qui n'ont cit\u00e9 qu'une seule r\u00e9ponse. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/MUL1/","text":"MUL Fonction MUL La fonction MUL s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le produit des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9es\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MULNA. Syntaxe : _MUL(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MUL(Q04A; Q04B) Retourne une variable qui est le produit de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"MUL"},{"location":"Fonctions/MUL1/#mul","text":"","title":"MUL"},{"location":"Fonctions/MUL1/#fonction-mul","text":"La fonction MUL s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont le produit des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9es\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez MULNA.","title":"Fonction MUL"},{"location":"Fonctions/MUL1/#syntaxe","text":"_MUL(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MUL1/#exemples","text":"_MUL(Q04A; Q04B) Retourne une variable qui est le produit de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/MULNA1/","text":"MULNA Fonction MULNA La fonction MULNA calcule la multiplication de plusieurs variables num\u00e9riques (NA * 1 = 1). Pour exclure les sans-r\u00e9pons, voir la fonction MUL Syntaxe : _MULNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _MULNA(Q04A; Q04B) Retourne une variable qui est le produit de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"MULNA"},{"location":"Fonctions/MULNA1/#mulna","text":"","title":"MULNA"},{"location":"Fonctions/MULNA1/#fonction-mulna","text":"La fonction MULNA calcule la multiplication de plusieurs variables num\u00e9riques (NA * 1 = 1). Pour exclure les sans-r\u00e9pons, voir la fonction MUL","title":"Fonction MULNA"},{"location":"Fonctions/MULNA1/#syntaxe","text":"_MULNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MULNA1/#exemples","text":"_MULNA(Q04A; Q04B) Retourne une variable qui est le produit de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/MULTI1/","text":"MULTI Fonction MULTI La fonction MULTI cr\u00e9e une variable multi-r\u00e9ponses depuis une liste de variables. Chaque variable en argument correspond \u00e0 une forme de OUI/NON pour une modalit\u00e9 de r\u00e9ponse possible \u00e0 la variable finale. On ne retiendra qu'une valeur de r\u00e9ponse particuli\u00e8re pour chacune de ces variables. Syntaxe : _MULTI(Key; Sources) **Nom ** **Type ** Description Remarque 1 Key Valeur Modalit\u00e9 de r\u00e9ponse \u00e0 retenir dans les variables en argument Obligatoire 2 Sources Liste de variables Liste des variables \u00e0 traiter Obligatoire Exemples : _MULTI(2; Q01_1; Q01_2; Q01_3; Q01_4; Q01_5; Q01_6;) Le r\u00e9sultat est une variable multi-r\u00e9ponses \u00e0 6 modalit\u00e9s en consid\u00e9rant la r\u00e9ponse 2 Voir aussi : Traiter les variables multi-r\u00e9ponses Combiner les variables","title":"MULTI"},{"location":"Fonctions/MULTI1/#multi","text":"","title":"MULTI"},{"location":"Fonctions/MULTI1/#fonction-multi","text":"La fonction MULTI cr\u00e9e une variable multi-r\u00e9ponses depuis une liste de variables. Chaque variable en argument correspond \u00e0 une forme de OUI/NON pour une modalit\u00e9 de r\u00e9ponse possible \u00e0 la variable finale. On ne retiendra qu'une valeur de r\u00e9ponse particuli\u00e8re pour chacune de ces variables.","title":"Fonction MULTI"},{"location":"Fonctions/MULTI1/#syntaxe","text":"_MULTI(Key; Sources) **Nom ** **Type ** Description Remarque 1 Key Valeur Modalit\u00e9 de r\u00e9ponse \u00e0 retenir dans les variables en argument Obligatoire 2 Sources Liste de variables Liste des variables \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/MULTI1/#exemples","text":"_MULTI(2; Q01_1; Q01_2; Q01_3; Q01_4; Q01_5; Q01_6;) Le r\u00e9sultat est une variable multi-r\u00e9ponses \u00e0 6 modalit\u00e9s en consid\u00e9rant la r\u00e9ponse 2 Voir aussi : Traiter les variables multi-r\u00e9ponses Combiner les variables","title":"Exemples :"},{"location":"Fonctions/NA2MEAN1/","text":"NA2MEAN Fonction NA2MEAN La fonction NA2MEAN s'applique aux variables num\u00e9riques. Elle a pour effet de cr\u00e9er une variable dans laquelle les sans-r\u00e9ponses \u00e0 la variable d'origine sont r\u00e9affect\u00e9s \u00e0 la valeur moyenne. C'est une forme particuli\u00e8re de la fonction NA2VAL. Syntaxe : Q01.NA2MEAN() ou _NA2MEAN(Q01) Remarques : Pour une r\u00e9-affection de r\u00e9ponse plus avanc\u00e9e, utilisez la fonction FIX. Exemples : AGE.NA2MEAN() Cr\u00e9e une variable dans laquelle les sans-r\u00e9ponses ont r\u00e9cup\u00e9r\u00e9 la valeur de l'\u00e2ge moyen. Il n'y a plus de sans-r\u00e9ponse. Voir aussi : Manipuler les variables num\u00e9riques","title":"NA2MEAN"},{"location":"Fonctions/NA2MEAN1/#na2mean","text":"","title":"NA2MEAN"},{"location":"Fonctions/NA2MEAN1/#fonction-na2mean","text":"La fonction NA2MEAN s'applique aux variables num\u00e9riques. Elle a pour effet de cr\u00e9er une variable dans laquelle les sans-r\u00e9ponses \u00e0 la variable d'origine sont r\u00e9affect\u00e9s \u00e0 la valeur moyenne. C'est une forme particuli\u00e8re de la fonction NA2VAL.","title":"Fonction NA2MEAN"},{"location":"Fonctions/NA2MEAN1/#syntaxe","text":"Q01.NA2MEAN() ou _NA2MEAN(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NA2MEAN1/#remarques","text":"Pour une r\u00e9-affection de r\u00e9ponse plus avanc\u00e9e, utilisez la fonction FIX.","title":"Remarques :"},{"location":"Fonctions/NA2MEAN1/#exemples","text":"AGE.NA2MEAN() Cr\u00e9e une variable dans laquelle les sans-r\u00e9ponses ont r\u00e9cup\u00e9r\u00e9 la valeur de l'\u00e2ge moyen. Il n'y a plus de sans-r\u00e9ponse. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/NA2VAL1/","text":"NA2VAL Fonction NA2VAL ou NATOVAL La fonction NA2VAL s'applique aux variables num\u00e9riques, litt\u00e9rales et temporelles. Elle a pour effet de cr\u00e9er une variable dans laquelle les sans-r\u00e9ponses \u00e0 la variable d'origine sont r\u00e9affect\u00e9s \u00e0 une valeur particuli\u00e8re. La variable obtenue n'a donc plus de sans-r\u00e9ponse. Syntaxe : Q01.NA2VAL(Value) ou _NA2VAL(Q01; Value) **Nom ** **Type ** Description Remarque Value Nombre Valeur affect\u00e9e aux sans-r\u00e9ponse Obligatoire Remarques : Pour une r\u00e9-affection de r\u00e9ponse plus avanc\u00e9e, utilisez la fonction FIX. Exemples : AGE.NA2VAL(45) Cr\u00e9e une variable dans laquelle les sans-r\u00e9ponses ont r\u00e9cup\u00e9r\u00e9 la valeur 45. Il n'y a plus de sans-r\u00e9ponse. Voir aussi : Manipuler les variables num\u00e9riques","title":"NA2VAL"},{"location":"Fonctions/NA2VAL1/#na2val","text":"","title":"NA2VAL"},{"location":"Fonctions/NA2VAL1/#fonction-na2val-ou-natoval","text":"La fonction NA2VAL s'applique aux variables num\u00e9riques, litt\u00e9rales et temporelles. Elle a pour effet de cr\u00e9er une variable dans laquelle les sans-r\u00e9ponses \u00e0 la variable d'origine sont r\u00e9affect\u00e9s \u00e0 une valeur particuli\u00e8re. La variable obtenue n'a donc plus de sans-r\u00e9ponse.","title":"Fonction NA2VAL ou NATOVAL"},{"location":"Fonctions/NA2VAL1/#syntaxe","text":"Q01.NA2VAL(Value) ou _NA2VAL(Q01; Value) **Nom ** **Type ** Description Remarque Value Nombre Valeur affect\u00e9e aux sans-r\u00e9ponse Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NA2VAL1/#remarques","text":"Pour une r\u00e9-affection de r\u00e9ponse plus avanc\u00e9e, utilisez la fonction FIX.","title":"Remarques :"},{"location":"Fonctions/NA2VAL1/#exemples","text":"AGE.NA2VAL(45) Cr\u00e9e une variable dans laquelle les sans-r\u00e9ponses ont r\u00e9cup\u00e9r\u00e9 la valeur 45. Il n'y a plus de sans-r\u00e9ponse. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/NEWLEV1/","text":"NEWLEV Fonction NEWLEV La fonction NEWLEV cr\u00e9e un nouveau niveau logique sur la base d'une variable existante. Syntaxe : QACHATS.NEWLEV(\"N_ACHATS\") ou _NEWLEV(Q01; \"N_ACHATS\") **Nom ** **Type ** Description Remarque Nom du niveau Nom Le nom du niveau \u00e0 cr\u00e9er mettre \u00e0 jour Obligatoire Titre du niveau Cha\u00eene Le titre du niveau, optionnel Optionnel Exemples : QACHATS.NEWLEV(\"N_ACHATS\") En estimant que la variable QACHATS est dimensionn\u00e9e selon le nombre d'achats, la fonction NEWLEV cr\u00e9e le niveau \"N_ACHATS\" qui comptabilisera (nb d'enregistrements) l'ensemble des achats r\u00e9alis\u00e9s sur l'ensemble des items en colonnes. Voir aussi : Niveaux","title":"NEWLEV"},{"location":"Fonctions/NEWLEV1/#newlev","text":"","title":"NEWLEV"},{"location":"Fonctions/NEWLEV1/#fonction-newlev","text":"La fonction NEWLEV cr\u00e9e un nouveau niveau logique sur la base d'une variable existante.","title":"Fonction NEWLEV"},{"location":"Fonctions/NEWLEV1/#syntaxe","text":"QACHATS.NEWLEV(\"N_ACHATS\") ou _NEWLEV(Q01; \"N_ACHATS\") **Nom ** **Type ** Description Remarque Nom du niveau Nom Le nom du niveau \u00e0 cr\u00e9er mettre \u00e0 jour Obligatoire Titre du niveau Cha\u00eene Le titre du niveau, optionnel Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NEWLEV1/#exemples","text":"QACHATS.NEWLEV(\"N_ACHATS\") En estimant que la variable QACHATS est dimensionn\u00e9e selon le nombre d'achats, la fonction NEWLEV cr\u00e9e le niveau \"N_ACHATS\" qui comptabilisera (nb d'enregistrements) l'ensemble des achats r\u00e9alis\u00e9s sur l'ensemble des items en colonnes. Voir aussi : Niveaux","title":"Exemples :"},{"location":"Fonctions/NEWVAR1/","text":"NEWVAR Fonction NEWVAR La fonction NEWVAR g\u00e9n\u00e8re une variable logique ou num\u00e9rique. Syntaxe : _NEWVAR(NbMod; Level; Dim; Value) **Nom ** **Type ** Description Remarque 1 NbMod Entier positif ou nul Si 0 cr\u00e9ation d'une variable num\u00e9rique sinon nombre de modalit\u00e9s \u00e0 cr\u00e9er Obligatoire 2 Level Cha\u00eene de caract\u00e8res Nom du niveau cible (la variable cr\u00e9\u00e9e sera sur ce niveau) Optionnel : Niveau courant par d\u00e9faut 3 Dim Scalaire ou vecteur Si scalaire, nombre de colonnes. Si vecteur (2 valeurs) nombre de lignes puis nombre de colonnes. Optionnel 4 Value Valeur valeur de la r\u00e9ponse ou de la modalit\u00e9. Peut \u00eatre une valeur \u00e0 d\u00e9cimales si cr\u00e9ation d'une variable continue Optionnel Exemples : _NEWVAR(0) Cr\u00e9e une variable num\u00e9rique o\u00f9 tous les individus sont en sans-r\u00e9ponse. _NEWVAR(5) Cr\u00e9e une variable logique \u00e0 5 modalit\u00e9s o\u00f9 tous les individus sont en sans-r\u00e9ponse. _NEWVAR(5;\"MAIN_US\";NULL;2) Cr\u00e9e une variable logique \u00e0 5 modalit\u00e9s dans le niveau MAIN_US o\u00f9 tous les individus sont en modalit\u00e9 2. _NEWVAR(0;NULL;3 5;100) Cr\u00e9e une variable num\u00e9rique \u00e0 3 lignes et 5 colonnes dans le niveau courant o\u00f9 tous les individus ont la valeur 100. _NEWVAR(1;\"MAIN_US\";NULL;1).TXTMOD(1;\"Ensemble\") Cr\u00e9e une variable logique \u00e0 une seule modalit\u00e9 regroupant tous les individus et ayant le libell\u00e9 \"Ensemble\". C'est donc un filtre qui s\u00e9lectionne l'ensemble des individus du niveau MAIN_US. _NEWVAR(0;NULL;10;1).CUMCOL() Cr\u00e9e une variable num\u00e9rique \u00e0 10 colonnes respectivelment remplies des valeurs 1 \u00e0 10 Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"NEWVAR"},{"location":"Fonctions/NEWVAR1/#newvar","text":"","title":"NEWVAR"},{"location":"Fonctions/NEWVAR1/#fonction-newvar","text":"La fonction NEWVAR g\u00e9n\u00e8re une variable logique ou num\u00e9rique.","title":"Fonction NEWVAR"},{"location":"Fonctions/NEWVAR1/#syntaxe","text":"_NEWVAR(NbMod; Level; Dim; Value) **Nom ** **Type ** Description Remarque 1 NbMod Entier positif ou nul Si 0 cr\u00e9ation d'une variable num\u00e9rique sinon nombre de modalit\u00e9s \u00e0 cr\u00e9er Obligatoire 2 Level Cha\u00eene de caract\u00e8res Nom du niveau cible (la variable cr\u00e9\u00e9e sera sur ce niveau) Optionnel : Niveau courant par d\u00e9faut 3 Dim Scalaire ou vecteur Si scalaire, nombre de colonnes. Si vecteur (2 valeurs) nombre de lignes puis nombre de colonnes. Optionnel 4 Value Valeur valeur de la r\u00e9ponse ou de la modalit\u00e9. Peut \u00eatre une valeur \u00e0 d\u00e9cimales si cr\u00e9ation d'une variable continue Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NEWVAR1/#exemples","text":"_NEWVAR(0) Cr\u00e9e une variable num\u00e9rique o\u00f9 tous les individus sont en sans-r\u00e9ponse. _NEWVAR(5) Cr\u00e9e une variable logique \u00e0 5 modalit\u00e9s o\u00f9 tous les individus sont en sans-r\u00e9ponse. _NEWVAR(5;\"MAIN_US\";NULL;2) Cr\u00e9e une variable logique \u00e0 5 modalit\u00e9s dans le niveau MAIN_US o\u00f9 tous les individus sont en modalit\u00e9 2. _NEWVAR(0;NULL;3 5;100) Cr\u00e9e une variable num\u00e9rique \u00e0 3 lignes et 5 colonnes dans le niveau courant o\u00f9 tous les individus ont la valeur 100. _NEWVAR(1;\"MAIN_US\";NULL;1).TXTMOD(1;\"Ensemble\") Cr\u00e9e une variable logique \u00e0 une seule modalit\u00e9 regroupant tous les individus et ayant le libell\u00e9 \"Ensemble\". C'est donc un filtre qui s\u00e9lectionne l'ensemble des individus du niveau MAIN_US. _NEWVAR(0;NULL;10;1).CUMCOL() Cr\u00e9e une variable num\u00e9rique \u00e0 10 colonnes respectivelment remplies des valeurs 1 \u00e0 10 Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/NONE1/","text":"NONE Fonction NONE ou \\<> La fonction NONE permet de s\u00e9lectionner les individus n'ayant cit\u00e9 aucune des modalit\u00e9s list\u00e9es parmi les r\u00e9pondants de la variable s\u00e9lectionn\u00e9e. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus n'ayant r\u00e9pondu \u00e0 aucune des modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Syntaxe : Q01.NONE(Keys) ou _NONE(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire Remarque : La base \"R\u00e9pondants\" de la variable cr\u00e9\u00e9e est la base \"R\u00e9pondants\" de la variable utilis\u00e9e. Exemples : S1.NONE(1 2 3)ou S1 \\<> 1 2 3 Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus n'ayant r\u00e9pondu \u00e0 aucune des modalit\u00e9s 1, 2 ou 3. S1.GRPMOD(NONE(1 2 3).FLT(S1) est une d\u00e9finition \u00e9quivalente. Voir aussi : ALL EXACTLY ANY","title":"NONE"},{"location":"Fonctions/NONE1/#none","text":"","title":"NONE"},{"location":"Fonctions/NONE1/#fonction-none-ou","text":"La fonction NONE permet de s\u00e9lectionner les individus n'ayant cit\u00e9 aucune des modalit\u00e9s list\u00e9es parmi les r\u00e9pondants de la variable s\u00e9lectionn\u00e9e. L'argument correspond aux diff\u00e9rents modalit\u00e9s s\u00e9lectionn\u00e9es. La variable r\u00e9sultat est un filtre, une variable logique \u00e0 une seule modalit\u00e9, s\u00e9lectionnant les individus n'ayant r\u00e9pondu \u00e0 aucune des modalit\u00e9s s\u00e9lectionn\u00e9es. Pour cr\u00e9er une s\u00e9lection, il suffit d'employer la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails.","title":"Fonction NONE ou \\&lt;>"},{"location":"Fonctions/NONE1/#syntaxe","text":"Q01.NONE(Keys) ou _NONE(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des \u00e9l\u00e9ments \u00e0 traiter Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NONE1/#remarque","text":"La base \"R\u00e9pondants\" de la variable cr\u00e9\u00e9e est la base \"R\u00e9pondants\" de la variable utilis\u00e9e.","title":"Remarque :"},{"location":"Fonctions/NONE1/#exemples","text":"S1.NONE(1 2 3)ou S1 \\<> 1 2 3 Cr\u00e9e une nouvelle variable filtre s\u00e9lectionnant les individus n'ayant r\u00e9pondu \u00e0 aucune des modalit\u00e9s 1, 2 ou 3. S1.GRPMOD(NONE(1 2 3).FLT(S1) est une d\u00e9finition \u00e9quivalente. Voir aussi : ALL EXACTLY ANY","title":"Exemples :"},{"location":"Fonctions/NORESP1/","text":"NORESP Fonction NORESP La fonction NORESP manipule les sans-r\u00e9ponses d'une variable logique en les ajoutant ou en les combinant \u00e0 une modalit\u00e9 existante. Sa syntaxe est \u00e9quivalente \u00e0 celle de la fonction RESP. Syntaxe n\u00b01 : Q01.NORESP() ou _NORESP(Q01) Cette version sans argument retourne simplement les sans-r\u00e9ponses \u00e0 la variable (bonne m\u00e9thode pour cr\u00e9er un filtre / un univers !). Syntaxe n\u00b02 : Q01.NORESP(InsertionPoint; MarginText) ou _NORESP(Q01; InsertionPoint; MarginText) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : S'il vaut 0, le marginal est ajout\u00e9 en t\u00eate de variable. S'il est plus grand que le nombre de modalit\u00e9s, le marginal est ajout\u00e9 en fin. S'il est compris entre 1 et 2 (1.5 par exemple), il est ins\u00e9r\u00e9 entre la modalit\u00e9 1 et la modalit\u00e9 2 (etc.). Obligatoire 2 MarginText Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser avec @code si on souhaite affecter un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !). Ind\u00e9fini par d\u00e9faut Exemples : S2.NORESP() Retourne un filtre qui v\u00e9hicule les sans-r\u00e9ponses \u00e0 la variable S2. S1.NORESP(99;\"@99 SR\") Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 en derni\u00e8re modalit\u00e9 libell\u00e9e \"SR\" (dans la mesure o\u00f9 la variable S1 \u00e0 moins de 99 modalit\u00e9s...) et lui affecte le code 99. S1.NORESP(0) Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 en premi\u00e8re modalit\u00e9. S1.NORESP(2.5) Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 entre la 2\u00e8me et la 3\u00e8me modalit\u00e9s. Voir aussi : Crit\u00e8res","title":"NORESP"},{"location":"Fonctions/NORESP1/#noresp","text":"","title":"NORESP"},{"location":"Fonctions/NORESP1/#fonction-noresp","text":"La fonction NORESP manipule les sans-r\u00e9ponses d'une variable logique en les ajoutant ou en les combinant \u00e0 une modalit\u00e9 existante. Sa syntaxe est \u00e9quivalente \u00e0 celle de la fonction RESP.","title":"Fonction NORESP"},{"location":"Fonctions/NORESP1/#syntaxe-n1","text":"Q01.NORESP() ou _NORESP(Q01) Cette version sans argument retourne simplement les sans-r\u00e9ponses \u00e0 la variable (bonne m\u00e9thode pour cr\u00e9er un filtre / un univers !).","title":"Syntaxe n\u00b01 :&nbsp;"},{"location":"Fonctions/NORESP1/#syntaxe-n2","text":"Q01.NORESP(InsertionPoint; MarginText) ou _NORESP(Q01; InsertionPoint; MarginText) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : S'il vaut 0, le marginal est ajout\u00e9 en t\u00eate de variable. S'il est plus grand que le nombre de modalit\u00e9s, le marginal est ajout\u00e9 en fin. S'il est compris entre 1 et 2 (1.5 par exemple), il est ins\u00e9r\u00e9 entre la modalit\u00e9 1 et la modalit\u00e9 2 (etc.). Obligatoire 2 MarginText Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser avec @code si on souhaite affecter un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !). Ind\u00e9fini par d\u00e9faut","title":"Syntaxe n\u00b02 :&nbsp;"},{"location":"Fonctions/NORESP1/#exemples","text":"S2.NORESP() Retourne un filtre qui v\u00e9hicule les sans-r\u00e9ponses \u00e0 la variable S2. S1.NORESP(99;\"@99 SR\") Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 en derni\u00e8re modalit\u00e9 libell\u00e9e \"SR\" (dans la mesure o\u00f9 la variable S1 \u00e0 moins de 99 modalit\u00e9s...) et lui affecte le code 99. S1.NORESP(0) Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 en premi\u00e8re modalit\u00e9. S1.NORESP(2.5) Ajoute les sans-r\u00e9ponses \u00e0 la variable S1 entre la 2\u00e8me et la 3\u00e8me modalit\u00e9s. Voir aussi : Crit\u00e8res","title":"Exemples :"},{"location":"Fonctions/NOT1/","text":"NOT Fonction NOT (A ne pas confondre avec l'op\u00e9rateur NOT qui calcule les sans-r\u00e9ponses \u00e0 la variable trait\u00e9e) La fonction NOT calcule le compl\u00e9ment logique de la variable trait\u00e9e, pour chaque modalit\u00e9. Le r\u00e9sultat a exactement la m\u00eame structure que la variable trait\u00e9e, mais les r\u00e9ponses aux modalit\u00e9s sont \"invers\u00e9es\". Syntaxe : _NOT(Q01; Variable) **Nom ** **Type ** Description Remarque Variable Variable Variable logique Obligatoire Exemples : S1.NOT() Retourne une variable qui a autant de modalit\u00e9s que la variable S1. Chaque modalit\u00e9 concerne ceux qui n'ont pas cit\u00e9 la dite modalit\u00e9. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"NOT"},{"location":"Fonctions/NOT1/#not","text":"","title":"NOT"},{"location":"Fonctions/NOT1/#fonction-not","text":"(A ne pas confondre avec l'op\u00e9rateur NOT qui calcule les sans-r\u00e9ponses \u00e0 la variable trait\u00e9e) La fonction NOT calcule le compl\u00e9ment logique de la variable trait\u00e9e, pour chaque modalit\u00e9. Le r\u00e9sultat a exactement la m\u00eame structure que la variable trait\u00e9e, mais les r\u00e9ponses aux modalit\u00e9s sont \"invers\u00e9es\".","title":"Fonction NOT"},{"location":"Fonctions/NOT1/#syntaxe","text":"_NOT(Q01; Variable) **Nom ** **Type ** Description Remarque Variable Variable Variable logique Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NOT1/#exemples","text":"S1.NOT() Retourne une variable qui a autant de modalit\u00e9s que la variable S1. Chaque modalit\u00e9 concerne ceux qui n'ont pas cit\u00e9 la dite modalit\u00e9. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/NOTXT1/","text":"NOTXT Fonction NOTXT La fonction NOTXT vide tous les textes (libell\u00e9s de modalit\u00e9s, de lignes, colonnes) de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a plus d'alignement automatique sur les textes et seule la position est prise en compte. Syntaxe : Q01.NOTXT() ou _NOTXT(Q01) Exemples : Q2.NOTXT() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Q1 \u00b0 Q2 est \u00e9quivalent \u00e0 Q1 | Q2.NOTXT() Voir aussi : Gestion des libell\u00e9s CLRCOL CLRMOD CLRROW","title":"NOTXT"},{"location":"Fonctions/NOTXT1/#notxt","text":"","title":"NOTXT"},{"location":"Fonctions/NOTXT1/#fonction-notxt","text":"La fonction NOTXT vide tous les textes (libell\u00e9s de modalit\u00e9s, de lignes, colonnes) de la variable plac\u00e9e en argument. Si les textes d'une variable sont vides, alors il n'y a plus d'alignement automatique sur les textes et seule la position est prise en compte.","title":"Fonction NOTXT"},{"location":"Fonctions/NOTXT1/#syntaxe","text":"Q01.NOTXT() ou _NOTXT(Q01)","title":"Syntaxe :"},{"location":"Fonctions/NOTXT1/#exemples","text":"Q2.NOTXT() Tous les libell\u00e9s associ\u00e9s \u00e0 la variable Q2 sont d\u00e9sormais vides. Q1 \u00b0 Q2 est \u00e9quivalent \u00e0 Q1 | Q2.NOTXT() Voir aussi : Gestion des libell\u00e9s CLRCOL CLRMOD CLRROW","title":"Exemples :"},{"location":"Fonctions/NOW1/","text":"NOW Fonction NOW La fonction NOW g\u00e9n\u00e8re une variable temporelle de valeur constante bas\u00e9e sur la date de l'ex\u00e9cution. Elle retourne une variable temporelle \u00e0 valeur constante sur le niveau indiqu\u00e9. Syntaxe : _NOW(LevelName) **Nom ** **Type ** Description Remarque LevelName Cha\u00eene de caract\u00e8res Niveau cible Obligatoire Exemples : _NOW() Retourne la date et l'heure actuelle. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"NOW"},{"location":"Fonctions/NOW1/#now","text":"","title":"NOW"},{"location":"Fonctions/NOW1/#fonction-now","text":"La fonction NOW g\u00e9n\u00e8re une variable temporelle de valeur constante bas\u00e9e sur la date de l'ex\u00e9cution. Elle retourne une variable temporelle \u00e0 valeur constante sur le niveau indiqu\u00e9.","title":"Fonction NOW"},{"location":"Fonctions/NOW1/#syntaxe","text":"_NOW(LevelName) **Nom ** **Type ** Description Remarque LevelName Cha\u00eene de caract\u00e8res Niveau cible Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/NOW1/#exemples","text":"_NOW() Retourne la date et l'heure actuelle. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/OR1/","text":"OR Fonction OR (A ne pas confondre avec l'op\u00e9rateur OR qui calcule une condition bas\u00e9e sur le OU LOGIQUE entre les r\u00e9pondants des arguments) La fonction OR applique un \"OU LOGIQUE\" de modalit\u00e9 \u00e0 modalit\u00e9 en suivant le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions \u00e0 combiner. IMPORTANT : un 'OR' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez UNIV ou ANDFLT ! Syntaxe : _OR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _OR(S1; S3) ou S1 OR S3 ou S1 | S3 Le r\u00e9sultat contient autant de modalit\u00e9s que n\u00e9cessaire pour que les modalit\u00e9s soient harmonis\u00e9es. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans au moins un argument. Attention, \u00e0 ne pas confondre avec l'op\u00e9rateur \u00b0 (OU logique sans harmonisation des modalit\u00e9s) Ainsi, S1 \u00b0 S3 donne une variable avec les m\u00eames modalit\u00e9s que l'argument droit de \u00b0, ici S3. Il est possible d'\u00e9crire : S1.SELMOD(1) \u00b0 S3, dans ce cas la modalit\u00e9 de l'argument gauche est appliqu\u00e9 aux modalit\u00e9s de l'argument droit. Si l'op\u00e9rateur \u00b0 est utilis\u00e9 sur des variables dimensionn\u00e9es, le principe d'harmonisation des modalit\u00e9s est toujours appliqu\u00e9 aux lignes/colonnes. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combiner les variables","title":"OR"},{"location":"Fonctions/OR1/#or","text":"","title":"OR"},{"location":"Fonctions/OR1/#fonction-or","text":"(A ne pas confondre avec l'op\u00e9rateur OR qui calcule une condition bas\u00e9e sur le OU LOGIQUE entre les r\u00e9pondants des arguments) La fonction OR applique un \"OU LOGIQUE\" de modalit\u00e9 \u00e0 modalit\u00e9 en suivant le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions \u00e0 combiner. IMPORTANT : un 'OR' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez UNIV ou ANDFLT !","title":"Fonction OR"},{"location":"Fonctions/OR1/#syntaxe","text":"_OR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :"},{"location":"Fonctions/OR1/#exemples","text":"_OR(S1; S3) ou S1 OR S3 ou S1 | S3 Le r\u00e9sultat contient autant de modalit\u00e9s que n\u00e9cessaire pour que les modalit\u00e9s soient harmonis\u00e9es. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans au moins un argument. Attention, \u00e0 ne pas confondre avec l'op\u00e9rateur \u00b0 (OU logique sans harmonisation des modalit\u00e9s) Ainsi, S1 \u00b0 S3 donne une variable avec les m\u00eames modalit\u00e9s que l'argument droit de \u00b0, ici S3. Il est possible d'\u00e9crire : S1.SELMOD(1) \u00b0 S3, dans ce cas la modalit\u00e9 de l'argument gauche est appliqu\u00e9 aux modalit\u00e9s de l'argument droit. Si l'op\u00e9rateur \u00b0 est utilis\u00e9 sur des variables dimensionn\u00e9es, le principe d'harmonisation des modalit\u00e9s est toujours appliqu\u00e9 aux lignes/colonnes. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combiner les variables","title":"Exemples :"},{"location":"Fonctions/ORDCOL1/","text":"ORDCOL Fonction ORDCOL La fonction ORDCOL modifie l'ordonnateur de la dimension colonne de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les items colonnes de la variable. Syntaxe : Q01.ORDCOL(Values; Selection) ou _ORDCOL(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut Remarques : Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\" Exemples : S1.ORDRCOL(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDCOL(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE colonne de la variable S1. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"ORDCOL"},{"location":"Fonctions/ORDCOL1/#ordcol","text":"","title":"ORDCOL"},{"location":"Fonctions/ORDCOL1/#fonction-ordcol","text":"La fonction ORDCOL modifie l'ordonnateur de la dimension colonne de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les items colonnes de la variable.","title":"Fonction ORDCOL"},{"location":"Fonctions/ORDCOL1/#syntaxe","text":"Q01.ORDCOL(Values; Selection) ou _ORDCOL(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ORDCOL1/#remarques","text":"Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\"","title":"Remarques :"},{"location":"Fonctions/ORDCOL1/#exemples","text":"S1.ORDRCOL(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDCOL(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE colonne de la variable S1. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/ORDMOD1/","text":"ORDMOD Fonction ORDMOD La fonction ORDMOD modifie l'ordonnateur de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les modalit\u00e9s de la variable. Syntaxe : Q01.ORDMOD(Values; Selection) ou _ORDMOD(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) peut \u00eatre vide 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut Remarques : Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\" Si le ORDMOD est utilis\u00e9 sans param\u00e8tre, l'ordonnateur est d\u00e9termin\u00e9 automatiquement en fonction des sous-titres. Exemples : S1.ORDMOD(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDMOD(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE modalit\u00e9 de la variable S1. Q2.ORDMOD() Si Q2 est une variable logique \u00e0 6 modalit\u00e9s sous la forme : Modalit\u00e9 de la variable Q2 Ordonnateur produit par Q2.ORDMOD() Sous-titre 1 Modalit\u00e9 1 1 Modalit\u00e9 2 1 Sous-titre 2 Modalit\u00e9 3 2 Modalit\u00e9 4 2 Voir aussi : Propri\u00e9t\u00e9s des variables","title":"ORDMOD"},{"location":"Fonctions/ORDMOD1/#ordmod","text":"","title":"ORDMOD"},{"location":"Fonctions/ORDMOD1/#fonction-ordmod","text":"La fonction ORDMOD modifie l'ordonnateur de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les modalit\u00e9s de la variable.","title":"Fonction ORDMOD"},{"location":"Fonctions/ORDMOD1/#syntaxe","text":"Q01.ORDMOD(Values; Selection) ou _ORDMOD(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) peut \u00eatre vide 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ORDMOD1/#remarques","text":"Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\" Si le ORDMOD est utilis\u00e9 sans param\u00e8tre, l'ordonnateur est d\u00e9termin\u00e9 automatiquement en fonction des sous-titres.","title":"Remarques :"},{"location":"Fonctions/ORDMOD1/#exemples","text":"S1.ORDMOD(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDMOD(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE modalit\u00e9 de la variable S1. Q2.ORDMOD() Si Q2 est une variable logique \u00e0 6 modalit\u00e9s sous la forme : Modalit\u00e9 de la variable Q2 Ordonnateur produit par Q2.ORDMOD() Sous-titre 1 Modalit\u00e9 1 1 Modalit\u00e9 2 1 Sous-titre 2 Modalit\u00e9 3 2 Modalit\u00e9 4 2 Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/ORDROW1/","text":"ORDROW Fonction ORDROW La fonction ORDROW modifie l'ordonnateur de la dimension ligne de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les items lignes de la variable. Syntaxe : Q01.ORDROW(Values; Selection) ou _ORDROW(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut Remarques : Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\" Exemples : S1.ORDROW(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDROW(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE ligne de la variable S1. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"ORDROW"},{"location":"Fonctions/ORDROW1/#ordrow","text":"","title":"ORDROW"},{"location":"Fonctions/ORDROW1/#fonction-ordrow","text":"La fonction ORDROW modifie l'ordonnateur de la dimension ligne de la variable trait\u00e9e. L'argument est le vecteur des valeurs (exemple : 1 1 1 2 2 2) \u00e0 inscrire dans les items lignes de la variable.","title":"Fonction ORDROW"},{"location":"Fonctions/ORDROW1/#syntaxe","text":"Q01.ORDROW(Values; Selection) ou _ORDROW(Q01; Values; Selection) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Vecteur des valeurs \u00e0 \u00e9crire (exemple : 1 1 1 2 2 2) Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es (tout si ind\u00e9fini) Ind\u00e9fini par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/ORDROW1/#remarques","text":"Il n'est pas n\u00e9cessaire d'indiquer autant de valeurs qu'il y a d'\u00e9l\u00e9ments affect\u00e9s : la fonction r\u00e9p\u00e8te automatiquement la liste des valeurs fournies. Ainsi, une liste de valeurs \"1 1 2\" sera automatiquement r\u00e9p\u00e9t\u00e9e s'il y a 8 \u00e9l\u00e9ments \u00e0 affecter : \"1 1 2 1 1 2 1\"","title":"Remarques :"},{"location":"Fonctions/ORDROW1/#exemples","text":"S1.ORDROW(1 1 1 2 2) Modifie compl\u00e8tement l'ordonnateur de la variable S1 - ind\u00e9pendamment de sa taille. S1.ORDROW(1; -1) Modifie la valeur de l'ordonnateur de la DERNIERE ligne de la variable S1. Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/ORFLT1/","text":"ORFLT Fonction ORFLT La fonction ORFLT cr\u00e9er un filtre \u00e0 l'aide d'un \"OU LOGIQUE\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions). Syntaxe : _ORFLT(Q01; Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : 'ORFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments. Exemples : _ORFLT(S1.SELMOD(1 2); S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 au moins l'un des arguments. Voir aussi : Univers de variables Combiner les variables","title":"ORFLT"},{"location":"Fonctions/ORFLT1/#orflt","text":"","title":"ORFLT"},{"location":"Fonctions/ORFLT1/#fonction-orflt","text":"La fonction ORFLT cr\u00e9er un filtre \u00e0 l'aide d'un \"OU LOGIQUE\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions).","title":"Fonction ORFLT"},{"location":"Fonctions/ORFLT1/#syntaxe","text":"_ORFLT(Q01; Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe&nbsp; :&nbsp;"},{"location":"Fonctions/ORFLT1/#remarques","text":"'ORFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments.","title":"Remarques :"},{"location":"Fonctions/ORFLT1/#exemples","text":"_ORFLT(S1.SELMOD(1 2); S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 au moins l'un des arguments. Voir aussi : Univers de variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/PINCOL/","text":"PINCOL Fonction PINCOL La fonction PINCOL modifie le comportement de certains items de la dimension colonne d'une variable lors des hi\u00e9rarchisations. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des items \"autres\", \"aucun\", etc. Syntaxe : Q01.PINCOL(Keys; PinMe) ou _PINCOL(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut Exemples : S6.PINCOL(-1) \u00c9pingle le dernier item de la dimension colonne de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"PINCOL"},{"location":"Fonctions/PINCOL/#pincol","text":"","title":"PINCOL"},{"location":"Fonctions/PINCOL/#fonction-pincol","text":"La fonction PINCOL modifie le comportement de certains items de la dimension colonne d'une variable lors des hi\u00e9rarchisations. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des items \"autres\", \"aucun\", etc.","title":"Fonction PINCOL"},{"location":"Fonctions/PINCOL/#syntaxe","text":"Q01.PINCOL(Keys; PinMe) ou _PINCOL(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/PINCOL/#exemples","text":"S6.PINCOL(-1) \u00c9pingle le dernier item de la dimension colonne de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/PINMOD/","text":"PINMOD Fonction PINMOD La fonction PINMOD \u00e9pingle (ou lib\u00e8re) des modalit\u00e9s d'une variable. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des modalit\u00e9s \"autres\", \"aucuns\", etc. Syntaxe : Q01.PINMOD(Keys; PinMe) ou _PINMOD(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut Exemples : S6.PINMOD(-1) \u00c9pingle la derni\u00e8re modalit\u00e9 de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"PINMOD"},{"location":"Fonctions/PINMOD/#pinmod","text":"","title":"PINMOD"},{"location":"Fonctions/PINMOD/#fonction-pinmod","text":"La fonction PINMOD \u00e9pingle (ou lib\u00e8re) des modalit\u00e9s d'une variable. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des modalit\u00e9s \"autres\", \"aucuns\", etc.","title":"Fonction PINMOD"},{"location":"Fonctions/PINMOD/#syntaxe","text":"Q01.PINMOD(Keys; PinMe) ou _PINMOD(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/PINMOD/#exemples","text":"S6.PINMOD(-1) \u00c9pingle la derni\u00e8re modalit\u00e9 de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/PINROW1/","text":"PINROW Fonction PINROW La fonction PINROW modifie le comportement de certains items de la dimension ligne d'une variable lors des hi\u00e9rarchisations. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des items \"autres\", \"aucun\", etc. Syntaxe : Q01.PINROW(Keys; PinMe) ou _PINROW(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut Exemples : S6.PINROW(-1) \u00c9pingle le dernier item de la dimension ligne de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"PINROW"},{"location":"Fonctions/PINROW1/#pinrow","text":"","title":"PINROW"},{"location":"Fonctions/PINROW1/#fonction-pinrow","text":"La fonction PINROW modifie le comportement de certains items de la dimension ligne d'une variable lors des hi\u00e9rarchisations. Une modalit\u00e9 \u00e9pingl\u00e9e n'est pas concern\u00e9e par les tris/hi\u00e9rarchies : elle reste fix\u00e9e \u00e0 sa place. C'est tr\u00e8s souvent le cas par exemple des items \"autres\", \"aucun\", etc.","title":"Fonction PINROW"},{"location":"Fonctions/PINROW1/#syntaxe","text":"Q01.PINROW(Keys; PinMe) ou _PINROW(Q01; Keys; PinMe) **Nom ** **Type ** Description Remarque 1 Keys Valeur Liste des positions affect\u00e9es Obligatoire 2 PinMe Bool\u00e9en TRUE : \u00e9pingle FALSE : lib\u00e8re TRUE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/PINROW1/#exemples","text":"S6.PINROW(-1) \u00c9pingle le dernier item de la dimension ligne de la variable S6. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/POSCOL1/","text":"POSCOL Fonction POSCOL La fonction POSCOL s'applique \u00e0 une variable dimensionn\u00e9e pour forcer la position de sa dimension Colonnes dans les tableaux. Il s'agit donc d'une consigne de mise en forme des tableaux. Syntaxe : Q01.POSCOL(Position) ou _POSCOL(Q01; Position) **Nom ** **Type ** Description Remarque Position Cha\u00eene de caract\u00e8res \"ROWS\" : la dimension sera affich\u00e9e sur les lignes du tableaux \"COLUMNS\" : la dimension sera affich\u00e9e sur les colonnes du tableaux Obligatoire Remarques : Cette fonction s'applique souvent au niveau de la requ\u00eate, pour construire un tableau particulier. Exemples : Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"POSCOL"},{"location":"Fonctions/POSCOL1/#poscol","text":"","title":"POSCOL"},{"location":"Fonctions/POSCOL1/#fonction-poscol","text":"La fonction POSCOL s'applique \u00e0 une variable dimensionn\u00e9e pour forcer la position de sa dimension Colonnes dans les tableaux. Il s'agit donc d'une consigne de mise en forme des tableaux.","title":"Fonction POSCOL"},{"location":"Fonctions/POSCOL1/#syntaxe","text":"Q01.POSCOL(Position) ou _POSCOL(Q01; Position) **Nom ** **Type ** Description Remarque Position Cha\u00eene de caract\u00e8res \"ROWS\" : la dimension sera affich\u00e9e sur les lignes du tableaux \"COLUMNS\" : la dimension sera affich\u00e9e sur les colonnes du tableaux Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/POSCOL1/#remarques","text":"Cette fonction s'applique souvent au niveau de la requ\u00eate, pour construire un tableau particulier.","title":"Remarques :"},{"location":"Fonctions/POSCOL1/#exemples","text":"Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/POSROW1/","text":"POSROW Fonction POSROW La fonction POSROW s'applique \u00e0 une variable dimensionn\u00e9e pour forcer la position de sa dimension ligne dans les tableaux. Il s'agit donc d'une consigne de mise en forme des tableaux. Syntaxe : Q01.POSROW(Position) ou _POSROW(Q01; Position) **Nom ** **Type ** Description Remarque Position Cha\u00eene de caract\u00e8res \"ROWS\" : la dimension sera affich\u00e9e sur les lignes du tableaux \"COLUMNS\" : la dimension sera affich\u00e9e sur les colonnes du tableaux Obligatoire Remarques : Cette fonction s'applique souvent au niveau de la requ\u00eate, pour construire un tableau particulier. Exemples : Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"POSROW"},{"location":"Fonctions/POSROW1/#posrow","text":"","title":"POSROW"},{"location":"Fonctions/POSROW1/#fonction-posrow","text":"La fonction POSROW s'applique \u00e0 une variable dimensionn\u00e9e pour forcer la position de sa dimension ligne dans les tableaux. Il s'agit donc d'une consigne de mise en forme des tableaux.","title":"Fonction POSROW"},{"location":"Fonctions/POSROW1/#syntaxe","text":"Q01.POSROW(Position) ou _POSROW(Q01; Position) **Nom ** **Type ** Description Remarque Position Cha\u00eene de caract\u00e8res \"ROWS\" : la dimension sera affich\u00e9e sur les lignes du tableaux \"COLUMNS\" : la dimension sera affich\u00e9e sur les colonnes du tableaux Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/POSROW1/#remarques","text":"Cette fonction s'applique souvent au niveau de la requ\u00eate, pour construire un tableau particulier.","title":"Remarques :"},{"location":"Fonctions/POSROW1/#exemples","text":"Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/QSRT3/","text":"QSRT Fonction QSRT La fonction QSRT modifie la consigne de hi\u00e9rarchie automatique de la variable dans les tableaux (dans les propri\u00e9t\u00e9s de la variable g\u00e9n\u00e9r\u00e9e). Il s'agit donc d'une consigne de mise en forme des tableaux. Syntaxe : Q01.QSRT(Ascendant; Calculation; Criteria) ou _QSRT(Q01; Ascendant; Calculation; Criteria) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en Sens du tri : ascendant si TRUE, descendant si FALSE et NONE pour annuler le tri FALSE par d\u00e9faut 2 Calculation Cha\u00eene de caract\u00e8res Optionnel : Calcul \u00e0 utiliser pour le tri dans le tableau NUL par d\u00e9faut 3 Criteria Cha\u00eene de caract\u00e8res Optionnel : Libell\u00e9 de la colonne de r\u00e9f\u00e9rence \u00e0 utiliser lors du tri NUL par d\u00e9faut Remarques : D'une fa\u00e7on g\u00e9n\u00e9rale, lorsqu'une variable est automatiquement hi\u00e9rarchis\u00e9e dans un tableau, il est possible de sp\u00e9cifier une modalit\u00e9 de r\u00e9f\u00e9rence dans un crit\u00e8re de tri en d\u00e9butant le texte de la modalit\u00e9s par une accolade fermante '}'. Exemples : S6.QSRT(NONE) Et les modalit\u00e9s de la nouvelle variable ne seront plus tri\u00e9es. Attention : La fonction QSRT() ne change pas l'ordre des modalit\u00e9s de la variable mais provoque le tri de celles-ci dans un tableau. Voir aussi : Propri\u00e9t\u00e9s des variables PINMOD() pour fixer une modalit\u00e9.","title":"QSRT"},{"location":"Fonctions/QSRT3/#qsrt","text":"","title":"QSRT"},{"location":"Fonctions/QSRT3/#fonction-qsrt","text":"La fonction QSRT modifie la consigne de hi\u00e9rarchie automatique de la variable dans les tableaux (dans les propri\u00e9t\u00e9s de la variable g\u00e9n\u00e9r\u00e9e). Il s'agit donc d'une consigne de mise en forme des tableaux.","title":"Fonction QSRT"},{"location":"Fonctions/QSRT3/#syntaxe","text":"Q01.QSRT(Ascendant; Calculation; Criteria) ou _QSRT(Q01; Ascendant; Calculation; Criteria) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en Sens du tri : ascendant si TRUE, descendant si FALSE et NONE pour annuler le tri FALSE par d\u00e9faut 2 Calculation Cha\u00eene de caract\u00e8res Optionnel : Calcul \u00e0 utiliser pour le tri dans le tableau NUL par d\u00e9faut 3 Criteria Cha\u00eene de caract\u00e8res Optionnel : Libell\u00e9 de la colonne de r\u00e9f\u00e9rence \u00e0 utiliser lors du tri NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/QSRT3/#remarques","text":"D'une fa\u00e7on g\u00e9n\u00e9rale, lorsqu'une variable est automatiquement hi\u00e9rarchis\u00e9e dans un tableau, il est possible de sp\u00e9cifier une modalit\u00e9 de r\u00e9f\u00e9rence dans un crit\u00e8re de tri en d\u00e9butant le texte de la modalit\u00e9s par une accolade fermante '}'.","title":"Remarques :"},{"location":"Fonctions/QSRT3/#exemples","text":"S6.QSRT(NONE) Et les modalit\u00e9s de la nouvelle variable ne seront plus tri\u00e9es.","title":"Exemples :"},{"location":"Fonctions/QSRT3/#attention","text":"La fonction QSRT() ne change pas l'ordre des modalit\u00e9s de la variable mais provoque le tri de celles-ci dans un tableau. Voir aussi : Propri\u00e9t\u00e9s des variables PINMOD() pour fixer une modalit\u00e9.","title":"Attention :"},{"location":"Fonctions/QSRTCOL/","text":"QSRTCOL Fonction QSRTCOL La fonction QSRTCOL modifie la consigne de hi\u00e9rarchie automatique des colonnes de la variable dans les tableaux (dans les propri\u00e9t\u00e9s de la variable g\u00e9n\u00e9r\u00e9e). Il s'agit donc d'une consigne de mise en forme des tableaux. Syntaxe : Q01.QSRTCOL(Ascendant; Anchor; Calculation; Criteria) ou _QSRTCOL(Q01; Ascendant; Anchor; Calculation; Criteria) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en Sens du tri : ascendant si TRUE, descendant si FALSE et NONE pour annuler le tri FALSE par d\u00e9faut 2 Anchor Num\u00e9rique ou expression Num\u00e9ro ou libell\u00e9 de la modalit\u00e9 de ref\u00e9rence 3 Calculation Cha\u00eene de caract\u00e8res Optionnel : Calcul \u00e0 utiliser pour le tri dans le tableau NUL par d\u00e9faut 4 Criteria Cha\u00eene de caract\u00e8res Optionnel : Libell\u00e9 de la colonne de r\u00e9f\u00e9rence \u00e0 utiliser lors du tri NUL par d\u00e9faut Remarques : D'une fa\u00e7on g\u00e9n\u00e9rale, lorsqu'une variable est automatiquement hi\u00e9rarchis\u00e9e dans un tableau, il est possible de sp\u00e9cifier une modalit\u00e9 de r\u00e9f\u00e9rence dans un crit\u00e8re de tri en d\u00e9butant le texte de la modalit\u00e9s par une accolade fermante '}'. Dans la cas d'une variable logique, le param\u00e8tre \"Anchor\" permet de choisir la modalit\u00e9 de r\u00e9f\u00e9rence pour appliquer le tri des items colonnes. Exemples : Q02C.QSRTCOL(False;1;PV;2) Les items sont tri\u00e9s sur la base des pourcentages verticaux de la colonne n\u00b0 2 du tableau et sur la modalit\u00e9 1 de la variable Q02C. Attention : La fonction QSRTCOL() ne change pas l'ordre des colonnes de la variable mais provoque le tri de celles-ci dans un tableau. Voir aussi : Propri\u00e9t\u00e9s des variables PINCOL() pour fixer une colonnes.","title":"QSRTCOL"},{"location":"Fonctions/QSRTCOL/#qsrtcol","text":"","title":"QSRTCOL"},{"location":"Fonctions/QSRTCOL/#fonction-qsrtcol","text":"La fonction QSRTCOL modifie la consigne de hi\u00e9rarchie automatique des colonnes de la variable dans les tableaux (dans les propri\u00e9t\u00e9s de la variable g\u00e9n\u00e9r\u00e9e). Il s'agit donc d'une consigne de mise en forme des tableaux.","title":"Fonction QSRTCOL"},{"location":"Fonctions/QSRTCOL/#syntaxe","text":"Q01.QSRTCOL(Ascendant; Anchor; Calculation; Criteria) ou _QSRTCOL(Q01; Ascendant; Anchor; Calculation; Criteria) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en Sens du tri : ascendant si TRUE, descendant si FALSE et NONE pour annuler le tri FALSE par d\u00e9faut 2 Anchor Num\u00e9rique ou expression Num\u00e9ro ou libell\u00e9 de la modalit\u00e9 de ref\u00e9rence 3 Calculation Cha\u00eene de caract\u00e8res Optionnel : Calcul \u00e0 utiliser pour le tri dans le tableau NUL par d\u00e9faut 4 Criteria Cha\u00eene de caract\u00e8res Optionnel : Libell\u00e9 de la colonne de r\u00e9f\u00e9rence \u00e0 utiliser lors du tri NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/QSRTCOL/#remarques","text":"D'une fa\u00e7on g\u00e9n\u00e9rale, lorsqu'une variable est automatiquement hi\u00e9rarchis\u00e9e dans un tableau, il est possible de sp\u00e9cifier une modalit\u00e9 de r\u00e9f\u00e9rence dans un crit\u00e8re de tri en d\u00e9butant le texte de la modalit\u00e9s par une accolade fermante '}'. Dans la cas d'une variable logique, le param\u00e8tre \"Anchor\" permet de choisir la modalit\u00e9 de r\u00e9f\u00e9rence pour appliquer le tri des items colonnes.","title":"Remarques :"},{"location":"Fonctions/QSRTCOL/#exemples","text":"Q02C.QSRTCOL(False;1;PV;2) Les items sont tri\u00e9s sur la base des pourcentages verticaux de la colonne n\u00b0 2 du tableau et sur la modalit\u00e9 1 de la variable Q02C.","title":"Exemples :"},{"location":"Fonctions/QSRTCOL/#attention","text":"La fonction QSRTCOL() ne change pas l'ordre des colonnes de la variable mais provoque le tri de celles-ci dans un tableau. Voir aussi : Propri\u00e9t\u00e9s des variables PINCOL() pour fixer une colonnes.","title":"Attention :"},{"location":"Fonctions/RADICAL1/","text":"RADICAL Fonction RADICAL La fonction RADICAL appliqu\u00e9e \u00e0 une variable num\u00e9rique permet de lui associer un radical qui sera utilis\u00e9 comme \"unit\u00e9\" lors de la cr\u00e9ations de modalit\u00e9s automatiques par la fonction CTOD. Syntaxe : Q1.RADICAL(Label) ou _RADICAL(Q1;Label) **Nom ** **Type ** Description Remarque Label cha\u00eene de caract\u00e8res texte du radical Obligatoire Remarques : Le radical n'est utilis\u00e9 que par la fonction CTOD. Exemples : _RADICAL(S2;\" y/o\").CTOD(4) ou S2.RADICAL(\" y/o\").CTOD(4) Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"RADICAL"},{"location":"Fonctions/RADICAL1/#radical","text":"","title":"RADICAL"},{"location":"Fonctions/RADICAL1/#fonction-radical","text":"La fonction RADICAL appliqu\u00e9e \u00e0 une variable num\u00e9rique permet de lui associer un radical qui sera utilis\u00e9 comme \"unit\u00e9\" lors de la cr\u00e9ations de modalit\u00e9s automatiques par la fonction CTOD.","title":"Fonction RADICAL"},{"location":"Fonctions/RADICAL1/#syntaxe","text":"Q1.RADICAL(Label) ou _RADICAL(Q1;Label) **Nom ** **Type ** Description Remarque Label cha\u00eene de caract\u00e8res texte du radical Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/RADICAL1/#remarques","text":"Le radical n'est utilis\u00e9 que par la fonction CTOD.","title":"Remarques :"},{"location":"Fonctions/RADICAL1/#exemples","text":"_RADICAL(S2;\" y/o\").CTOD(4) ou S2.RADICAL(\" y/o\").CTOD(4) Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/RANDOM1/","text":"RANDOM Fonction RANDOM La fonction RANDOM g\u00e9n\u00e8re une variable num\u00e9rique al\u00e9atoire dont les valeurs sont comprises entre un minimum et un maximum. La racine (Seed) permet de contr\u00f4ler l'al\u00e9atoire de fa\u00e7on \u00e0 ce qu'il soit reproductible. Il est possible d'int\u00e9grer un pourcentage de sans-r\u00e9ponses. Syntaxe : _RANDOM(Level; MinValue; MaxValue; Seed; PercentNa; Dim) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau cible (la variable cr\u00e9\u00e9e sera sur ce niveau) 1 MinValue Entier Valeur mini 1 par d\u00e9faut 2 MaxValue Entier Valeur maxi 100 par d\u00e9faut 3 Seed Entier Germe al\u00e9atoire (-1 par d\u00e9faut) -1 par d\u00e9faut 4 PercentNa Entier Valeur entre 0 et 100 : pourcentage de sans-r\u00e9ponses \u00e0 int\u00e9grer 0 par d\u00e9faut 5 Dim Scalaire ou vecteur Si scalaire, nombre de colonnes. Si vecteur (2 valeurs) nombre de colonnes puis nombre de lignes. Optionnel Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"RANDOM"},{"location":"Fonctions/RANDOM1/#random","text":"","title":"RANDOM"},{"location":"Fonctions/RANDOM1/#fonction-random","text":"La fonction RANDOM g\u00e9n\u00e8re une variable num\u00e9rique al\u00e9atoire dont les valeurs sont comprises entre un minimum et un maximum. La racine (Seed) permet de contr\u00f4ler l'al\u00e9atoire de fa\u00e7on \u00e0 ce qu'il soit reproductible. Il est possible d'int\u00e9grer un pourcentage de sans-r\u00e9ponses.","title":"Fonction RANDOM"},{"location":"Fonctions/RANDOM1/#syntaxe","text":"_RANDOM(Level; MinValue; MaxValue; Seed; PercentNa; Dim) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau cible (la variable cr\u00e9\u00e9e sera sur ce niveau) 1 MinValue Entier Valeur mini 1 par d\u00e9faut 2 MaxValue Entier Valeur maxi 100 par d\u00e9faut 3 Seed Entier Germe al\u00e9atoire (-1 par d\u00e9faut) -1 par d\u00e9faut 4 PercentNa Entier Valeur entre 0 et 100 : pourcentage de sans-r\u00e9ponses \u00e0 int\u00e9grer 0 par d\u00e9faut 5 Dim Scalaire ou vecteur Si scalaire, nombre de colonnes. Si vecteur (2 valeurs) nombre de colonnes puis nombre de lignes. Optionnel Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/RANKCOL/","text":"RANKCOL Fonction RANKCOL La fonction RANKCOL d\u00e9termine, pour chaque indivdu, le rang de chaque d\u00e9tail (colonne) de ses r\u00e9ponses \u00e0 une variable cotinue dimensionn\u00e9e. Syntaxe : Q01.RANKCOL(Descendant; RankingMode) ou _RANKCOL(Q01; Descendant; RankingMode) **Nom ** **Type ** Description Remarque 1 Descendant Bool\u00e9en FALSE (par d\u00e9faut) pour un tri ascendant, FALSE pour un tri descendant. Obligatoire 2 RankingMode Cha\u00eene de caract\u00e8res Gestion des ex aequo STANDARD (d\u00e9faut) : Les ex eaquo re\u00e7oivent le rang minimal possible parmi leurs rangs possibles. Pour [10, 10, 5, 7, 15, 15], on obtient [3, 3, 1, 2, 5, 5] DENSE : Les ex eaquo re\u00e7oivent le m\u00eame rang, mai il y a des \"trous\" dans la s\u00e9aquence des rangs. Pour [10, 10, 5, 7, 15, 15], on obtient [3, 3, 1, 2, 4, 4] MAXIMAL : Les ex eaquo re\u00e7oivent le rang maximal possible. C'est l'inverse du mode STANDARD. Pour [10, 10, 5, 7, 15, 15], on obtient [4, 4, 1, 2, 6, 6] Exemples : Q01.RANKCOL() Retourne une variable continue dimensionn\u00e9e contenant les rangs des r\u00e9ponses dans l'ordre descendant de Q01 pour chaque individus. Remarques : Equivalent \u00e0 la fonction IDXCOL de DAISIE.","title":"RANKCOL"},{"location":"Fonctions/RANKCOL/#rankcol","text":"","title":"RANKCOL"},{"location":"Fonctions/RANKCOL/#fonction-rankcol","text":"La fonction RANKCOL d\u00e9termine, pour chaque indivdu, le rang de chaque d\u00e9tail (colonne) de ses r\u00e9ponses \u00e0 une variable cotinue dimensionn\u00e9e.","title":"Fonction RANKCOL"},{"location":"Fonctions/RANKCOL/#syntaxe","text":"Q01.RANKCOL(Descendant; RankingMode) ou _RANKCOL(Q01; Descendant; RankingMode) **Nom ** **Type ** Description Remarque 1 Descendant Bool\u00e9en FALSE (par d\u00e9faut) pour un tri ascendant, FALSE pour un tri descendant. Obligatoire 2 RankingMode Cha\u00eene de caract\u00e8res Gestion des ex aequo STANDARD (d\u00e9faut) : Les ex eaquo re\u00e7oivent le rang minimal possible parmi leurs rangs possibles. Pour [10, 10, 5, 7, 15, 15], on obtient [3, 3, 1, 2, 5, 5] DENSE : Les ex eaquo re\u00e7oivent le m\u00eame rang, mai il y a des \"trous\" dans la s\u00e9aquence des rangs. Pour [10, 10, 5, 7, 15, 15], on obtient [3, 3, 1, 2, 4, 4] MAXIMAL : Les ex eaquo re\u00e7oivent le rang maximal possible. C'est l'inverse du mode STANDARD. Pour [10, 10, 5, 7, 15, 15], on obtient [4, 4, 1, 2, 6, 6]","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/RANKCOL/#exemples","text":"Q01.RANKCOL() Retourne une variable continue dimensionn\u00e9e contenant les rangs des r\u00e9ponses dans l'ordre descendant de Q01 pour chaque individus.","title":"Exemples :"},{"location":"Fonctions/RANKCOL/#remarques","text":"Equivalent \u00e0 la fonction IDXCOL de DAISIE.","title":"Remarques :"},{"location":"Fonctions/RECAP1/","text":"RECAP Fonction RECAP La consigne RECAP permet de cr\u00e9er facilement un tableau r\u00e9capitulatif bas\u00e9 sur une batterie d'items (ou grille d'items). A la diff\u00e9rence de SUMUP, cette fonction ne modifie pas la variable, mais se contente d'indiquer au moteur de ventilation quelles sont les modalit\u00e9s \u00e0 cacher. Inconv\u00e9nient : il n'est pas possible d'exploiter la variable r\u00e9sultat dans une autre recodification Avantage : la m\u00e9thode marche aussi lorsque les bases des d\u00e9tails varient Syntaxe : Q01.RECAP(s\u00e9lection) ou _RECAP(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Modalit\u00e9s s\u00e9lectionn\u00e9es Obligatoire Remarques : La fonction RECAP conserve l'univers de la variable source. La fonction RECAP ne modifie pas la base de la variable utilis\u00e9e. Exemples : Q14 est une \u00e9chelle d'accord pos\u00e9e sur 23 items. Q14.RECAP(1) n'affichera que les scores de la premi\u00e8re modalit\u00e9 pour chacun des d\u00e9tails de la Q14. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux","title":"RECAP"},{"location":"Fonctions/RECAP1/#recap","text":"","title":"RECAP"},{"location":"Fonctions/RECAP1/#fonction-recap","text":"La consigne RECAP permet de cr\u00e9er facilement un tableau r\u00e9capitulatif bas\u00e9 sur une batterie d'items (ou grille d'items). A la diff\u00e9rence de SUMUP, cette fonction ne modifie pas la variable, mais se contente d'indiquer au moteur de ventilation quelles sont les modalit\u00e9s \u00e0 cacher. Inconv\u00e9nient : il n'est pas possible d'exploiter la variable r\u00e9sultat dans une autre recodification Avantage : la m\u00e9thode marche aussi lorsque les bases des d\u00e9tails varient","title":"Fonction RECAP"},{"location":"Fonctions/RECAP1/#syntaxe","text":"Q01.RECAP(s\u00e9lection) ou _RECAP(Q01; s\u00e9lection) **Nom ** **Type ** Description Remarque s\u00e9lection Liste de valeurs Modalit\u00e9s s\u00e9lectionn\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/RECAP1/#remarques","text":"La fonction RECAP conserve l'univers de la variable source. La fonction RECAP ne modifie pas la base de la variable utilis\u00e9e.","title":"Remarques :"},{"location":"Fonctions/RECAP1/#exemples","text":"Q14 est une \u00e9chelle d'accord pos\u00e9e sur 23 items. Q14.RECAP(1) n'affichera que les scores de la premi\u00e8re modalit\u00e9 pour chacun des d\u00e9tails de la Q14. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/REDCOL1/","text":"REDCOL Fonction REDCOL La fonction REDCOL modifie le r\u00e9ducteur de la dimension 'colonnes' de la variable. Syntaxe : Q01.REDCOL(Values; s\u00e9lection) ou _REDCOL(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Voir aussi : REDMOD Propri\u00e9t\u00e9s des variables","title":"REDCOL"},{"location":"Fonctions/REDCOL1/#redcol","text":"","title":"REDCOL"},{"location":"Fonctions/REDCOL1/#fonction-redcol","text":"La fonction REDCOL modifie le r\u00e9ducteur de la dimension 'colonnes' de la variable.","title":"Fonction REDCOL"},{"location":"Fonctions/REDCOL1/#syntaxe","text":"Q01.REDCOL(Values; s\u00e9lection) ou _REDCOL(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Voir aussi : REDMOD Propri\u00e9t\u00e9s des variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REDELETE/","text":"REDELETE Fonction REDELETE La fonction REDELETE supprime une partie d'une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. C'est un peu le pendant de REGET Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut supprimer Syntaxe : Q01.REDELETE(Expression) ou _REDELETE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9lection des modalit\u00e9s Obligatoire Remarques : Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm Exemples : DATES.REDELETE(\"\\\\d\\\\d/\\\\d\\\\d/\\\\d\\\\d\\\\d\\\\d\") Retourne une variable litt\u00e9rale dans laquelle les dates au format JJ/MM/AAAA sont supprim\u00e9es. Voir aussi : Traiter les variables litt\u00e9rales Expressions r\u00e9guli\u00e8res","title":"REDELETE"},{"location":"Fonctions/REDELETE/#redelete","text":"","title":"REDELETE"},{"location":"Fonctions/REDELETE/#fonction-redelete","text":"La fonction REDELETE supprime une partie d'une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. C'est un peu le pendant de REGET Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut supprimer","title":"Fonction REDELETE"},{"location":"Fonctions/REDELETE/#syntaxe","text":"Q01.REDELETE(Expression) ou _REDELETE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9lection des modalit\u00e9s Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REDELETE/#remarques","text":"Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm","title":"Remarques :"},{"location":"Fonctions/REDELETE/#exemples","text":"DATES.REDELETE(\"\\\\d\\\\d/\\\\d\\\\d/\\\\d\\\\d\\\\d\\\\d\") Retourne une variable litt\u00e9rale dans laquelle les dates au format JJ/MM/AAAA sont supprim\u00e9es. Voir aussi : Traiter les variables litt\u00e9rales Expressions r\u00e9guli\u00e8res","title":"Exemples :"},{"location":"Fonctions/REDMOD1/","text":"REDMOD Fonction REDMOD La fonction REDMOD permet \u00e0 l'appelant de modifier le r\u00e9ducteur (valeur num\u00e9rique utilis\u00e9e pour quantifier une modalit\u00e9) de la variable. L'argument est le vecteur des valeurs (exemple : 4.5 5.2 7.5) \u00e0 inscrire dans les modalit\u00e9s de la variable. Syntaxe : Q01.REDMOD(Values; s\u00e9lection) ou _REDMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Remarques : La fonction REDMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Exemples : S1.REDMOD(1 2 3 4 5) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"REDMOD"},{"location":"Fonctions/REDMOD1/#redmod","text":"","title":"REDMOD"},{"location":"Fonctions/REDMOD1/#fonction-redmod","text":"La fonction REDMOD permet \u00e0 l'appelant de modifier le r\u00e9ducteur (valeur num\u00e9rique utilis\u00e9e pour quantifier une modalit\u00e9) de la variable. L'argument est le vecteur des valeurs (exemple : 4.5 5.2 7.5) \u00e0 inscrire dans les modalit\u00e9s de la variable.","title":"Fonction REDMOD"},{"location":"Fonctions/REDMOD1/#syntaxe","text":"Q01.REDMOD(Values; s\u00e9lection) ou _REDMOD(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REDMOD1/#remarques","text":"La fonction REDMOD conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine","title":"Remarques :"},{"location":"Fonctions/REDMOD1/#exemples","text":"S1.REDMOD(1 2 3 4 5) Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/REDROW1/","text":"REDROW Fonction REDROW La fonction REDROW modifie le r\u00e9ducteur de la dimension 'lignes' (valeur num\u00e9rique utilis\u00e9e pour quantifier une modalit\u00e9) de la variable. Syntaxe : Q01.REDROW(Values; s\u00e9lection) ou _REDROW(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Voir aussi : REDMOD Propri\u00e9t\u00e9s des variables","title":"REDROW"},{"location":"Fonctions/REDROW1/#redrow","text":"","title":"REDROW"},{"location":"Fonctions/REDROW1/#fonction-redrow","text":"La fonction REDROW modifie le r\u00e9ducteur de la dimension 'lignes' (valeur num\u00e9rique utilis\u00e9e pour quantifier une modalit\u00e9) de la variable.","title":"Fonction REDROW"},{"location":"Fonctions/REDROW1/#syntaxe","text":"Q01.REDROW(Values; s\u00e9lection) ou _REDROW(Q01; Values;s\u00e9lection ) **Nom ** **Type ** Description Remarque 1 Values Liste de nombres Valeurs du r\u00e9ducteur Obligatoire 2 s\u00e9lection Liste de valeurs Liste des positions affect\u00e9es NUL par d\u00e9faut Voir aussi : REDMOD Propri\u00e9t\u00e9s des variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REFORMAT1/","text":"REFORMAT Fonction REFORMAT La fonction REFORMAT r\u00e9\u00e9crit une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut traiter - format : le format de r\u00e9\u00e9criture (utiliser $1, $2 etc. pour utiliser des sous-groupes de regex) Syntaxe : Q01.REFORMAT(Expression; Format) ou _REFORMAT(Q01; Expression; Format) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9lection Obligatoire 2 Format Cha\u00eene de caract\u00e8res Format NUL par d\u00e9faut Remarques : Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm Exemples : DATES.REFORMAT(\"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d\\\\d\\\\d)\") Retourne une variable litt\u00e9rale qui ne contient plus que la date au format JJ/MM/AAAA. Voir aussi : Traiter les variables litt\u00e9rales","title":"REFORMAT"},{"location":"Fonctions/REFORMAT1/#reformat","text":"","title":"REFORMAT"},{"location":"Fonctions/REFORMAT1/#fonction-reformat","text":"La fonction REFORMAT r\u00e9\u00e9crit une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut traiter - format : le format de r\u00e9\u00e9criture (utiliser $1, $2 etc. pour utiliser des sous-groupes de regex)","title":"Fonction REFORMAT"},{"location":"Fonctions/REFORMAT1/#syntaxe","text":"Q01.REFORMAT(Expression; Format) ou _REFORMAT(Q01; Expression; Format) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9lection Obligatoire 2 Format Cha\u00eene de caract\u00e8res Format NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REFORMAT1/#remarques","text":"Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm","title":"Remarques :"},{"location":"Fonctions/REFORMAT1/#exemples","text":"DATES.REFORMAT(\"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d\\\\d\\\\d)\") Retourne une variable litt\u00e9rale qui ne contient plus que la date au format JJ/MM/AAAA. Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/REGET1/","text":"REGET Fonction REGET La fonction REGET extrait une partie d'une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. Tr\u00e8s pratique pour extraire le mois d'une date, la premi\u00e8re partie d'une phrase, etc. Arguments : - regex : l'expression r\u00e9guli\u00e8re d'extraction. Chaque groupe entre parenth\u00e8ses sera extrait. - delimiter : le d\u00e9limiteur \u00e0 utiliser pour 'coller' les diff\u00e9rentes parties extraites (optionnel) Syntaxe : Q01.REGET(Expression; Delimiter) ou _REGET(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Remarques : Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm Exemples : DATES.REGET(\"\\\\d\\\\d/(\\\\d\\\\d)/\\\\d\\\\d\\\\d\\\\d\") Retourne une variable litt\u00e9rale qui contient le mois (la partie entre parenth\u00e8ses) depuis une variable qui contient des dates au format JJ/MM/AAAA. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"REGET"},{"location":"Fonctions/REGET1/#reget","text":"","title":"REGET"},{"location":"Fonctions/REGET1/#fonction-reget","text":"La fonction REGET extrait une partie d'une variable litt\u00e9rale \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. Tr\u00e8s pratique pour extraire le mois d'une date, la premi\u00e8re partie d'une phrase, etc. Arguments : - regex : l'expression r\u00e9guli\u00e8re d'extraction. Chaque groupe entre parenth\u00e8ses sera extrait. - delimiter : le d\u00e9limiteur \u00e0 utiliser pour 'coller' les diff\u00e9rentes parties extraites (optionnel)","title":"Fonction REGET"},{"location":"Fonctions/REGET1/#syntaxe","text":"Q01.REGET(Expression; Delimiter) ou _REGET(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REGET1/#remarques","text":"Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm","title":"Remarques :"},{"location":"Fonctions/REGET1/#exemples","text":"DATES.REGET(\"\\\\d\\\\d/(\\\\d\\\\d)/\\\\d\\\\d\\\\d\\\\d\") Retourne une variable litt\u00e9rale qui contient le mois (la partie entre parenth\u00e8ses) depuis une variable qui contient des dates au format JJ/MM/AAAA. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"Exemples :"},{"location":"Fonctions/REGETCOL1/","text":"REGETCOL Fonction REGETCOL La fonction REGETCOL transforme les textes des colonnes d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re. Syntaxe : Q01.REGETCOL(Expression; Delimiter) ou _REGETCOL(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"REGETCOL"},{"location":"Fonctions/REGETCOL1/#regetcol","text":"","title":"REGETCOL"},{"location":"Fonctions/REGETCOL1/#fonction-regetcol","text":"La fonction REGETCOL transforme les textes des colonnes d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re.","title":"Fonction REGETCOL"},{"location":"Fonctions/REGETCOL1/#syntaxe","text":"Q01.REGETCOL(Expression; Delimiter) ou _REGETCOL(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REGETMOD1/","text":"REGETMOD Fonction REGETMOD La fonction REGETMOD transforme les modalit\u00e9s d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re. Syntaxe : Q01.REGETMOD(Expression; Delimiter) ou _REGETMOD(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"REGETMOD"},{"location":"Fonctions/REGETMOD1/#regetmod","text":"","title":"REGETMOD"},{"location":"Fonctions/REGETMOD1/#fonction-regetmod","text":"La fonction REGETMOD transforme les modalit\u00e9s d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re.","title":"Fonction REGETMOD"},{"location":"Fonctions/REGETMOD1/#syntaxe","text":"Q01.REGETMOD(Expression; Delimiter) ou _REGETMOD(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REGETROW1/","text":"REGETROW Fonction REGETROW La fonction REGETROW transforme les textes des lignes d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re. Syntaxe : Q01.REGETROW(Expression; Delimiter) ou _REGETROW(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"REGETROW"},{"location":"Fonctions/REGETROW1/#regetrow","text":"","title":"REGETROW"},{"location":"Fonctions/REGETROW1/#fonction-regetrow","text":"La fonction REGETROW transforme les textes des lignes d'une variable \u00e0 l'aide d'une extraction bas\u00e9e sur expression r\u00e9guli\u00e8re.","title":"Fonction REGETROW"},{"location":"Fonctions/REGETROW1/#syntaxe","text":"Q01.REGETROW(Expression; Delimiter) ou _REGETROW(Q01; Expression; Delimiter) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur \"\" par d\u00e9faut Voir aussi : REGET","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REMATCH1/","text":"REMATCH Fonction REMATCH La fonction REMATCH retourne un filtre qui indique si la variable litt\u00e9rale test\u00e9e v\u00e9rifie l'expression r\u00e9guli\u00e8re en argument. Cette fonction est tr\u00e8s pratique pour v\u00e9rifier la bonne \u00e9criture des codes complexes, emails, adresses, etc. Arguments : - regex : l'expression r\u00e9guli\u00e8re test\u00e9e Syntaxe : Q01.REMATCH(Expression) ou _REMATCH(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire Remarques : Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm Exemples : CODES.REMATCH(\"\\^\\\\w+$\") Retourne un filtre qui donne 'vrai' pour les individus qui ont donn\u00e9 un code alpha-num\u00e9rique et 'faux' pour les autres. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"REMATCH"},{"location":"Fonctions/REMATCH1/#rematch","text":"","title":"REMATCH"},{"location":"Fonctions/REMATCH1/#fonction-rematch","text":"La fonction REMATCH retourne un filtre qui indique si la variable litt\u00e9rale test\u00e9e v\u00e9rifie l'expression r\u00e9guli\u00e8re en argument. Cette fonction est tr\u00e8s pratique pour v\u00e9rifier la bonne \u00e9criture des codes complexes, emails, adresses, etc. Arguments : - regex : l'expression r\u00e9guli\u00e8re test\u00e9e","title":"Fonction REMATCH"},{"location":"Fonctions/REMATCH1/#syntaxe","text":"Q01.REMATCH(Expression) ou _REMATCH(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REMATCH1/#remarques","text":"Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm","title":"Remarques :"},{"location":"Fonctions/REMATCH1/#exemples","text":"CODES.REMATCH(\"\\^\\\\w+$\") Retourne un filtre qui donne 'vrai' pour les individus qui ont donn\u00e9 un code alpha-num\u00e9rique et 'faux' pour les autres. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"Exemples :"},{"location":"Fonctions/REMCOL1/","text":"REMCOL Fonction REMCOL La fonction REMCOL supprime des colonnes de la variable trait\u00e9e. Contrairement \u00e0 HIDECOL, la variable obtenue \u00e0 moins de colonnes que la variable d'origine. Syntaxe : Q01.REMCOL(Keys) **Nom ** **Type ** Description Remarque Keys Selection Liste des positions \u00e0 supprimer Obligatoire Voir aussi : Gestion des dimensions","title":"REMCOL"},{"location":"Fonctions/REMCOL1/#remcol","text":"","title":"REMCOL"},{"location":"Fonctions/REMCOL1/#fonction-remcol","text":"La fonction REMCOL supprime des colonnes de la variable trait\u00e9e. Contrairement \u00e0 HIDECOL, la variable obtenue \u00e0 moins de colonnes que la variable d'origine.","title":"Fonction REMCOL"},{"location":"Fonctions/REMCOL1/#syntaxe","text":"Q01.REMCOL(Keys) **Nom ** **Type ** Description Remarque Keys Selection Liste des positions \u00e0 supprimer Obligatoire Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REMMOD1/","text":"REMMOD Fonction REMMOD La fonction REMMOD supprime les modalit\u00e9s d'une variable. La base de la variable obtenue est celle des r\u00e9pondants aux modalit\u00e9s restantes. Les arguments correspondent aux listes des modalit\u00e9s \u00e0 retenir. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items. Syntaxe : Q01.REMMOD(Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des positions affect\u00e9es Obligatoire Remarques : Cette fonction modifie donc la base de travail. Pour ne pas modifier la base de la variable, il faut utiliser la fonction HIDEMOD qui se contente de 'cacher' les modalit\u00e9s dans les tris r\u00e9sultants. Exemples : S1.REMMOD(1 -1) Cr\u00e9e une nouvelle variable dans laquelle ne figurent plus ni la premi\u00e8re ni la derni\u00e8re modalit\u00e9 de la variable d'origine (S1). Les fonctions REMCOL et REMROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. S1.REMMOD(\"ST *\") Supprime toutes les modalit\u00e9s dont le libell\u00e9 commence par \"ST \". Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"REMMOD"},{"location":"Fonctions/REMMOD1/#remmod","text":"","title":"REMMOD"},{"location":"Fonctions/REMMOD1/#fonction-remmod","text":"La fonction REMMOD supprime les modalit\u00e9s d'une variable. La base de la variable obtenue est celle des r\u00e9pondants aux modalit\u00e9s restantes. Les arguments correspondent aux listes des modalit\u00e9s \u00e0 retenir. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items.","title":"Fonction REMMOD"},{"location":"Fonctions/REMMOD1/#syntaxe","text":"Q01.REMMOD(Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des positions affect\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REMMOD1/#remarques","text":"Cette fonction modifie donc la base de travail. Pour ne pas modifier la base de la variable, il faut utiliser la fonction HIDEMOD qui se contente de 'cacher' les modalit\u00e9s dans les tris r\u00e9sultants.","title":"Remarques :"},{"location":"Fonctions/REMMOD1/#exemples","text":"S1.REMMOD(1 -1) Cr\u00e9e une nouvelle variable dans laquelle ne figurent plus ni la premi\u00e8re ni la derni\u00e8re modalit\u00e9 de la variable d'origine (S1). Les fonctions REMCOL et REMROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. S1.REMMOD(\"ST *\") Supprime toutes les modalit\u00e9s dont le libell\u00e9 commence par \"ST \". Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/REMMRG/","text":"REMMRG Fonction REMMRG La fonction REMMRG supprime toutes les modalit\u00e9s de type 'marginal' (r\u00e9pondants, interrog\u00e9s, sans-r\u00e9ponses, etc.). En option, la fonction supprime \u00e9galement toutes les modalit\u00e9s dont le r\u00e9ducteur est ind\u00e9fini (NA). Utile pour par exemple supprimer des sous-totaux ! Syntaxe : Q01.REMMRG(RemoveUndefinedReducer) ou _REMMRG(Q01; RemoveUndefinedReducer) **Nom ** **Type ** Description Remarque RemoveUndefinedReducer Bool\u00e9en TRUE : supprime les modalit\u00e9s dont le r\u00e9ducteur est ind\u00e9fini FALSE par d\u00e9faut Voir aussi : Utilitaires \\& divers","title":"REMMRG"},{"location":"Fonctions/REMMRG/#remmrg","text":"","title":"REMMRG"},{"location":"Fonctions/REMMRG/#fonction-remmrg","text":"La fonction REMMRG supprime toutes les modalit\u00e9s de type 'marginal' (r\u00e9pondants, interrog\u00e9s, sans-r\u00e9ponses, etc.). En option, la fonction supprime \u00e9galement toutes les modalit\u00e9s dont le r\u00e9ducteur est ind\u00e9fini (NA). Utile pour par exemple supprimer des sous-totaux !","title":"Fonction REMMRG"},{"location":"Fonctions/REMMRG/#syntaxe","text":"Q01.REMMRG(RemoveUndefinedReducer) ou _REMMRG(Q01; RemoveUndefinedReducer) **Nom ** **Type ** Description Remarque RemoveUndefinedReducer Bool\u00e9en TRUE : supprime les modalit\u00e9s dont le r\u00e9ducteur est ind\u00e9fini FALSE par d\u00e9faut Voir aussi : Utilitaires \\& divers","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REMROW/","text":"REMROW Fonction REMROW La fonction REMROW supprime des lignes de la variable trait\u00e9e. Contrairement \u00e0 HIDEROW, la variable obtenue \u00e0 moins de lignes que la variable d'origine. Syntaxe : Q01.REMROW(Keys) **Nom ** **Type ** Description Remarque Keys Selection Liste des positions \u00e0 supprimer Obligatoire Voir aussi : Gestion des dimensions","title":"REMROW"},{"location":"Fonctions/REMROW/#remrow","text":"","title":"REMROW"},{"location":"Fonctions/REMROW/#fonction-remrow","text":"La fonction REMROW supprime des lignes de la variable trait\u00e9e. Contrairement \u00e0 HIDEROW, la variable obtenue \u00e0 moins de lignes que la variable d'origine.","title":"Fonction REMROW"},{"location":"Fonctions/REMROW/#syntaxe","text":"Q01.REMROW(Keys) **Nom ** **Type ** Description Remarque Keys Selection Liste des positions \u00e0 supprimer Obligatoire Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REPLACE1/","text":"REPLACE Fonction REPLACE La fonction REPLACE remplace une partie de texte d'une variable litt\u00e9rale par un autre. Syntaxe : Q01.REPLACE(OldValue; NewValue; IgnoreCase) ou _REPLACE(Q01; OldValue; NewValue; IgnoreCase) **Nom ** **Type ** Description Remarque 1 OldValue Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 remplacer Obligatoire 2 NewValue Cha\u00eene de caract\u00e8res Nouvelle cha\u00eene Obligatoire 3 IgnoreCase Bool\u00e9en Par d\u00e9faut, non sensible \u00e0 la casse FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables litt\u00e9rales","title":"REPLACE"},{"location":"Fonctions/REPLACE1/#replace","text":"","title":"REPLACE"},{"location":"Fonctions/REPLACE1/#fonction-replace","text":"La fonction REPLACE remplace une partie de texte d'une variable litt\u00e9rale par un autre.","title":"Fonction REPLACE"},{"location":"Fonctions/REPLACE1/#syntaxe","text":"Q01.REPLACE(OldValue; NewValue; IgnoreCase) ou _REPLACE(Q01; OldValue; NewValue; IgnoreCase) **Nom ** **Type ** Description Remarque 1 OldValue Cha\u00eene de caract\u00e8res Cha\u00eene \u00e0 remplacer Obligatoire 2 NewValue Cha\u00eene de caract\u00e8res Nouvelle cha\u00eene Obligatoire 3 IgnoreCase Bool\u00e9en Par d\u00e9faut, non sensible \u00e0 la casse FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REREPLACE1/","text":"REREPLACE Fonction REREPLACE La fonction REREPLACE remplace des parties d'une variable litt\u00e9rale par une autre. Cette fonction tr\u00e8s puissante permet de reformuler un texte. Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut remplacer - replacement : ce par quoi il faut remplacer ($1, $2 etc. pour utiliser des groupes de regex) Syntaxe : Q01.REREPLACE(Expression; Replacement) ou _REREPLACE(Q01; Expression; Replacement) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Replacement Cha\u00eene de caract\u00e8res Nouvelle cha\u00eene Obligatoire Remarques : Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm Exemples : DATES.REREPLACE(\"\\\\d\\\\d/(\\\\d\\\\d)/\\\\d\\\\d\\\\d\\\\d\"; \"!$1\") Retourne une variable litt\u00e9rale dans laquelle les dates au format JJ/MM/AAAA sont remplac\u00e9es par le num\u00e9ro de mois pr\u00e9fix\u00e9 par un point d'exclamation. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"REREPLACE"},{"location":"Fonctions/REREPLACE1/#rereplace","text":"","title":"REREPLACE"},{"location":"Fonctions/REREPLACE1/#fonction-rereplace","text":"La fonction REREPLACE remplace des parties d'une variable litt\u00e9rale par une autre. Cette fonction tr\u00e8s puissante permet de reformuler un texte. Arguments : - regex : l'expression r\u00e9guli\u00e8re qui identifie ce qu'il faut remplacer - replacement : ce par quoi il faut remplacer ($1, $2 etc. pour utiliser des groupes de regex)","title":"Fonction REREPLACE"},{"location":"Fonctions/REREPLACE1/#syntaxe","text":"Q01.REREPLACE(Expression; Replacement) ou _REREPLACE(Q01; Expression; Replacement) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Expression r\u00e9guli\u00e8re de s\u00e9l\u00e9ction Obligatoire 2 Replacement Cha\u00eene de caract\u00e8res Nouvelle cha\u00eene Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REREPLACE1/#remarques","text":"Pour plus d'information sur les expressions r\u00e9guli\u00e8res : http://lgmorand.developpez.com/dotnet/regex/ Pour tester et construire les expressions r\u00e9guli\u00e8res : http://regexstorm.net/tester http://www.ultrapico.com/expresso.htm","title":"Remarques :"},{"location":"Fonctions/REREPLACE1/#exemples","text":"DATES.REREPLACE(\"\\\\d\\\\d/(\\\\d\\\\d)/\\\\d\\\\d\\\\d\\\\d\"; \"!$1\") Retourne une variable litt\u00e9rale dans laquelle les dates au format JJ/MM/AAAA sont remplac\u00e9es par le num\u00e9ro de mois pr\u00e9fix\u00e9 par un point d'exclamation. Voir aussi : Expressions r\u00e9guli\u00e8res","title":"Exemples :"},{"location":"Fonctions/RESP1/","text":"RESP Fonction RESP La fonction RESP manipule les r\u00e9pondants d'une variable en les ajoutant ou en les combinant \u00e0 une modalit\u00e9 existante. Sa syntaxe est \u00e9quivalente \u00e0 celle de la fonction NORESP. Syntaxe n\u00b01 : Q01.RESP() ou _RESP(Q01) Cette version sans argument retourne simplement les r\u00e9pondants \u00e0 la variable (bonne m\u00e9thode pour cr\u00e9er un filtre / un univers !). Syntaxe n\u00b02 : Q01.RESP(InsertionPoint; MarginText) ou _RESP(Q01; InsertionPoint; MarginText) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : S'il vaut 0, le marginal est ajout\u00e9 en t\u00eate de variable. S'il est plus grand que le nombre de modalit\u00e9s, le marginal est ajout\u00e9 en fin. S'il est compris entre 1 et 2 (1.5 par exemple), il est ins\u00e9r\u00e9 entre la modalit\u00e9 1 et la modalit\u00e9 2 (etc.). Obligatoire 2 MarginText Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser avec @code si on souhaite affecter un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !). Ind\u00e9fini par d\u00e9faut Exemples : S2.RESP() Retourne un filtre qui v\u00e9hicule les r\u00e9pondants \u00e0 la variable S2. S1.RESP(99; \"@99 Total\") Ajoute les r\u00e9pondants de la variable S1 en derni\u00e8re modalit\u00e9 libell\u00e9e \"Total\" (dans la mesure o\u00f9 la variable S1 \u00e0 moins de 99 modalit\u00e9s...) et lui affecte le code 99. S1.RESP(0) Ajoute les r\u00e9pondants de la variable S1 en premi\u00e8re modalit\u00e9. S1.RESP(2.5) Ajoute les r\u00e9pondants de la variable S1 entre la 2\u00e8me et la 3\u00e8me modalit\u00e9s. Voir aussi : Univers de variables","title":"RESP"},{"location":"Fonctions/RESP1/#resp","text":"","title":"RESP"},{"location":"Fonctions/RESP1/#fonction-resp","text":"La fonction RESP manipule les r\u00e9pondants d'une variable en les ajoutant ou en les combinant \u00e0 une modalit\u00e9 existante. Sa syntaxe est \u00e9quivalente \u00e0 celle de la fonction NORESP.","title":"Fonction RESP"},{"location":"Fonctions/RESP1/#syntaxe-n1","text":"Q01.RESP() ou _RESP(Q01) Cette version sans argument retourne simplement les r\u00e9pondants \u00e0 la variable (bonne m\u00e9thode pour cr\u00e9er un filtre / un univers !).","title":"Syntaxe n\u00b01 :&nbsp;"},{"location":"Fonctions/RESP1/#syntaxe-n2","text":"Q01.RESP(InsertionPoint; MarginText) ou _RESP(Q01; InsertionPoint; MarginText) **Nom ** **Type ** Description Remarque 1 InsertionPoint Nombre Position d'insertion : S'il vaut 0, le marginal est ajout\u00e9 en t\u00eate de variable. S'il est plus grand que le nombre de modalit\u00e9s, le marginal est ajout\u00e9 en fin. S'il est compris entre 1 et 2 (1.5 par exemple), il est ins\u00e9r\u00e9 entre la modalit\u00e9 1 et la modalit\u00e9 2 (etc.). Obligatoire 2 MarginText Cha\u00eene de caract\u00e8res Optionnel : libell\u00e9 \u00e0 utiliser avec @code si on souhaite affecter un code \u00e0 la nouvelle modalit\u00e9 (\u00e0 \u00e9viter lors des traitements multilingues !). Ind\u00e9fini par d\u00e9faut","title":"Syntaxe n\u00b02 :&nbsp;"},{"location":"Fonctions/RESP1/#exemples","text":"S2.RESP() Retourne un filtre qui v\u00e9hicule les r\u00e9pondants \u00e0 la variable S2. S1.RESP(99; \"@99 Total\") Ajoute les r\u00e9pondants de la variable S1 en derni\u00e8re modalit\u00e9 libell\u00e9e \"Total\" (dans la mesure o\u00f9 la variable S1 \u00e0 moins de 99 modalit\u00e9s...) et lui affecte le code 99. S1.RESP(0) Ajoute les r\u00e9pondants de la variable S1 en premi\u00e8re modalit\u00e9. S1.RESP(2.5) Ajoute les r\u00e9pondants de la variable S1 entre la 2\u00e8me et la 3\u00e8me modalit\u00e9s. Voir aussi : Univers de variables","title":"Exemples :"},{"location":"Fonctions/REVCOL1/","text":"REVCOL Fonction REVCOL La fonction REVCOL inverse l'ordre des colonnes d'une variable : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc. Syntaxe : Q01.REVCOL() ou _REVCOL(Q01) Voir aussi : Gestion des dimensions","title":"REVCOL"},{"location":"Fonctions/REVCOL1/#revcol","text":"","title":"REVCOL"},{"location":"Fonctions/REVCOL1/#fonction-revcol","text":"La fonction REVCOL inverse l'ordre des colonnes d'une variable : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc.","title":"Fonction REVCOL"},{"location":"Fonctions/REVCOL1/#syntaxe","text":"Q01.REVCOL() ou _REVCOL(Q01) Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REVMOD1/","text":"REVMOD Fonction REVMOD La fonction REVMOD inverse l'ordre des modalit\u00e9s d'une variable : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc. Syntaxe : Q01.REVMOD() ou _REVMOD(Q01) Exemples : S1.REVMOD() Inverse les modalit\u00e9s de S1. Q03.REVMOD().REVCOL() Inverse les modalit\u00e9s et les colonnes de Q03. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"REVMOD"},{"location":"Fonctions/REVMOD1/#revmod","text":"","title":"REVMOD"},{"location":"Fonctions/REVMOD1/#fonction-revmod","text":"La fonction REVMOD inverse l'ordre des modalit\u00e9s d'une variable : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc.","title":"Fonction REVMOD"},{"location":"Fonctions/REVMOD1/#syntaxe","text":"Q01.REVMOD() ou _REVMOD(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/REVMOD1/#exemples","text":"S1.REVMOD() Inverse les modalit\u00e9s de S1. Q03.REVMOD().REVCOL() Inverse les modalit\u00e9s et les colonnes de Q03. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/REVROW1/","text":"REVROW Fonction REVROW La fonction REVROW inverse les lignes de la variable trait\u00e9e : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc. Syntaxe : Q01.REVROW() ou _REVROW(Q01) Voir aussi : Gestion des dimensions","title":"REVROW"},{"location":"Fonctions/REVROW1/#revrow","text":"","title":"REVROW"},{"location":"Fonctions/REVROW1/#fonction-revrow","text":"La fonction REVROW inverse les lignes de la variable trait\u00e9e : Le 1er \u00e9l\u00e9ment devient le dernier, le 2\u00e8me l'avant-dernier, etc.","title":"Fonction REVROW"},{"location":"Fonctions/REVROW1/#syntaxe","text":"Q01.REVROW() ou _REVROW(Q01) Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SECOND1/","text":"SECOND Fonction SECOND La fonction SECOND construit une variable num\u00e9rique retournant la composante \"secondes\" de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.SECOND(NaValue) ou _SECOND(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut Exemples : DATES.SECOND() D\u00e9code la variable temporelle DATES et retourne les secondes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"SECOND"},{"location":"Fonctions/SECOND1/#second","text":"","title":"SECOND"},{"location":"Fonctions/SECOND1/#fonction-second","text":"La fonction SECOND construit une variable num\u00e9rique retournant la composante \"secondes\" de la variable temporelle plac\u00e9e en argument.","title":"Fonction SECOND"},{"location":"Fonctions/SECOND1/#syntaxe","text":"Q01.SECOND(NaValue) ou _SECOND(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SECOND1/#exemples","text":"DATES.SECOND() D\u00e9code la variable temporelle DATES et retourne les secondes de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/SECONDS1/","text":"SECONDS Fonction SECONDS La fonction SECONDS traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de secondes Si FALSE, retourne simplement le composant \"secondes\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s Syntaxe : Q01.SECONDS(TotalCount; NaValue) ou _SECONDS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"SECONDES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : DURATION.SECONDS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"secondes\" de la variable DURATION. DURATION.SECONDS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de secondes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"SECONDS"},{"location":"Fonctions/SECONDS1/#seconds","text":"","title":"SECONDS"},{"location":"Fonctions/SECONDS1/#fonction-seconds","text":"La fonction SECONDS traduit une variable de dur\u00e9e en variable num\u00e9rique. Arguments La variable \u00e0 traduire Le type de conversion : Si TRUE, retourne la dur\u00e9e totale exprim\u00e9e en nombre de secondes Si FALSE, retourne simplement le composant \"secondes\" de la dur\u00e9e exprim\u00e9e Valeur de retour Une variable num\u00e9rique similaire \u00e0 la variable temporelle \u00e0 convertir, dont les valeurs num\u00e9riques d\u00e9pendent des arguments sp\u00e9cifi\u00e9s","title":"Fonction SECONDS"},{"location":"Fonctions/SECONDS1/#syntaxe","text":"Q01.SECONDS(TotalCount; NaValue) ou _SECONDS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimal possible) Si FALSE, extrait simplement la composante \"SECONDES\" TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SECONDS1/#exemples","text":"DURATION.SECONDS(FALSE) Retourne une variable num\u00e9rique qui repr\u00e9sente le composant \"secondes\" de la variable DURATION. DURATION.SECONDS(TRUE) Retourne une variable num\u00e9rique qui repr\u00e9sente la dur\u00e9e totale exprim\u00e9e en nombre de secondes. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/SELCOL1/","text":"SELCOL Fonction SELCOL ou COL La fonction SELCOL s\u00e9lectionne (ou regroupe) des colonnes de la variable trait\u00e9e. Voir SELMOD . Syntaxe : Q01.SELCOL(Part1; Part2; Part3; ...;Reducer) ou Q01.COL(Part1; Part2; Part3; ...) **Nom ** **Type ** Description Remarque Parts Liste d'expressions Expressions de s\u00e9lection/regroupement s\u00e9par\u00e9s par des ';' Obligatoire Reducer Operateur Op\u00e9rateur de r\u00e9duction Optionnel Exemples : Q1.COL(1 2 3;SUMNA(1 2 3)) Retourne une variable dimensionn\u00e9e \u00e0 3 colonnes plus une derni\u00e8re \u00e9tant la somme des 3 autres sans tenir compte des sans-r\u00e9ponse (SUMNA). Il est possible d'utiliser les accolades pour extraire un item : Q1{2} est \u00e9quivalent \u00e0 Q1.COL(1).TRIMDIM() Voir aussi : Gestion des dimensions,","title":"SELCOL"},{"location":"Fonctions/SELCOL1/#selcol","text":"","title":"SELCOL"},{"location":"Fonctions/SELCOL1/#fonction-selcol-ou-col","text":"La fonction SELCOL s\u00e9lectionne (ou regroupe) des colonnes de la variable trait\u00e9e. Voir SELMOD .","title":"Fonction SELCOL ou COL"},{"location":"Fonctions/SELCOL1/#syntaxe","text":"Q01.SELCOL(Part1; Part2; Part3; ...;Reducer) ou Q01.COL(Part1; Part2; Part3; ...) **Nom ** **Type ** Description Remarque Parts Liste d'expressions Expressions de s\u00e9lection/regroupement s\u00e9par\u00e9s par des ';' Obligatoire Reducer Operateur Op\u00e9rateur de r\u00e9duction Optionnel","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SELCOL1/#exemples","text":"Q1.COL(1 2 3;SUMNA(1 2 3)) Retourne une variable dimensionn\u00e9e \u00e0 3 colonnes plus une derni\u00e8re \u00e9tant la somme des 3 autres sans tenir compte des sans-r\u00e9ponse (SUMNA). Il est possible d'utiliser les accolades pour extraire un item : Q1{2} est \u00e9quivalent \u00e0 Q1.COL(1).TRIMDIM() Voir aussi : Gestion des dimensions,","title":"Exemples :"},{"location":"Fonctions/SELMOD/","text":"SELMOD Fonction SELMOD ou MOD La fonction SELMOD permet de s\u00e9lectionner les modalit\u00e9s d'une variable. La base de la variable obtenue est celle des r\u00e9pondants aux modalit\u00e9s restantes. Il est aussi possible d'utiliser SELMOD sur une variable continue, on proc\u00e8de par s\u00e9lection des r\u00e9ponses (codes). Les arguments correspondent aux listes de modalit\u00e9s \u00e0 supprimer. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Les fonctions SELCOL et SELROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Syntaxe : Q01.SELMOD(Keys) Q01.MOD(Keys) ou _SELMOD(Q01; Keys) _MOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des positions s\u00e9lectionn\u00e9es Obligatoire Remarques : GRPMOD et SELMOD sont tr\u00e8s proches ! En r\u00e9alit\u00e9, la seule diff\u00e9rence vient du comportement par d\u00e9faut lorsqu'un argument correspond \u00e0 une liste d'items : GRPMOD cr\u00e9e un sous-total et SELMOD en liste le d\u00e9tail. Dans le cas d\"une variable logique, 0 cr\u00e9e une modalit\u00e9 vide alors que dans le cas d'une variable continue, 0 s\u00e9lectionne bien le code 0. Il est possible d'utiliser les crochets pour extraire une modalit\u00e9 : Q1[1] est \u00e9quivalent \u00e0 Q1.MOD(1) Exemples : S1.SELMOD(1 TO 3 -1) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - la troisi\u00e8me modalit\u00e9 de S1 - la derni\u00e8re de S1. S2.SELMOD(20 TO 25) cr\u00e9e une variable logique \u00e0 6 modalit\u00e9s constitu\u00e9es \u00e0 partir des r\u00e9ponses 20 \u00e0 25. S2.SELMOD(20 TO 25).RESP() cr\u00e9e un filtre consid\u00e9rant les individus ayant entre 20 et 25 ans. Utilisations habituelles : - Cr\u00e9er un filtre : S6.SELMOD(1) les possesseurs de r\u00e9frig\u00e9rateurs - Extraire des modalit\u00e9s : S6.SELMOD(2 3 4 5 6 12) les \u00e9quipements multim\u00e9dia - que l'on peut aussi \u00e9crire S6.SELMOD(2 TO 6 12) - Extraire et r\u00e9ordonner : S6.SELMOD( 6 5 4 3 2 12) que l'on peut aussi \u00e9crire S6.SELMOD(6 TO 2 12) Autres utilisations : - Extraire en partant de la fin : S6.SELMOD(-1) : extrait la derni\u00e8re modalit\u00e9, VTT S6.SELMOD(-2 -1) : extrait les deux derni\u00e8res modalit\u00e9s - Extraire des modalit\u00e9s en se basant sur le libell\u00e9, les moyens de d\u00e9placement : S6.SELMOD(\"VOITURE\";\"vtt\")ou S6.SELMOD(\"VOITURE,vtt\") insensible \u00e0 la casse On peut mixer les deux modes de s\u00e9lection : S6.SELMOD(10;\"vtt\") Pour s\u00e9lectionner un libell\u00e9 comprenant une virgule comme par exemple \"Aucun, rien\" : Q1.SELMOD(\"Aucun? rien\") S6.SELMOD(\"ST *\") s\u00e9lectionne toutes les modalit\u00e9s dont le libell\u00e9 commence par \"ST \" - Les utilisations moins fr\u00e9quentes mais tr\u00e8s pratiques : Cr\u00e9er une nouvelle modalit\u00e9 vide : S6.SELMOD(1 2 0) Dupliquer des modalit\u00e9s : S6.SELMOD(1 1 2 2) La modalit\u00e9 \"Aucun\" est conserv\u00e9e si l'option de suppression des modalit\u00e9s vides est activ\u00e9e : S1.SELMOD(\"Aucun\".FILTER(FALSE)) - Et les autres : S6.SELMOD(1 $O) : 2 modalit\u00e9s, les Frigo et les autres S6.SELMOD(1 $R) : 2 modalit\u00e9s, les Frigo et les r\u00e9pondants S6.SELMOD(1 $N) : 2 modalit\u00e9s, les Frigo et les SR S6.SELMOD(1 $I) : 2 modalit\u00e9s, les Frigo et les interrog\u00e9s S6.SELMOD(1;!1) : 2 modalit\u00e9s, les Frigo et les Pas Frigo S6.SELMOD($R $M) : 14 modalit\u00e9s, les r\u00e9pondants et toutes les modalit\u00e9s S2.SELMOD($L;\"Autres\") d\u00e9place la modalit\u00e9 \"Autres\" en derni\u00e8re position. S2.SELMOD(1; ~1) extrait la modalit\u00e9 1 et son compl\u00e9ment.. Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions Pour des combinaisons plus complexes de modalit\u00e9s : S\u00e9lection \"\u00e9tendue\" de modalit\u00e9s/d\u00e9tails","title":"SELMOD"},{"location":"Fonctions/SELMOD/#selmod","text":"","title":"SELMOD"},{"location":"Fonctions/SELMOD/#fonction-selmod-ou-mod","text":"La fonction SELMOD permet de s\u00e9lectionner les modalit\u00e9s d'une variable. La base de la variable obtenue est celle des r\u00e9pondants aux modalit\u00e9s restantes. Il est aussi possible d'utiliser SELMOD sur une variable continue, on proc\u00e8de par s\u00e9lection des r\u00e9ponses (codes). Les arguments correspondent aux listes de modalit\u00e9s \u00e0 supprimer. Chaque liste suit la syntaxe relative aux s\u00e9lections d'items et/ou \u00e0 la s\u00e9lection \u00e9tendue de modalit\u00e9s/d\u00e9tails. Les fonctions SELCOL et SELROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source.","title":"Fonction SELMOD ou MOD"},{"location":"Fonctions/SELMOD/#syntaxe","text":"Q01.SELMOD(Keys) Q01.MOD(Keys) ou _SELMOD(Q01; Keys) _MOD(Q01; Keys) **Nom ** **Type ** Description Remarque Keys Liste de valeurs Liste des positions s\u00e9lectionn\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SELMOD/#remarques","text":"GRPMOD et SELMOD sont tr\u00e8s proches ! En r\u00e9alit\u00e9, la seule diff\u00e9rence vient du comportement par d\u00e9faut lorsqu'un argument correspond \u00e0 une liste d'items : GRPMOD cr\u00e9e un sous-total et SELMOD en liste le d\u00e9tail. Dans le cas d\"une variable logique, 0 cr\u00e9e une modalit\u00e9 vide alors que dans le cas d'une variable continue, 0 s\u00e9lectionne bien le code 0. Il est possible d'utiliser les crochets pour extraire une modalit\u00e9 : Q1[1] est \u00e9quivalent \u00e0 Q1.MOD(1)","title":"Remarques :"},{"location":"Fonctions/SELMOD/#exemples","text":"S1.SELMOD(1 TO 3 -1) Cr\u00e9e une nouvelle variable dont les modalit\u00e9s sont : - la premi\u00e8re modalit\u00e9 de S1 - la deuxi\u00e8me modalit\u00e9 de S1 - la troisi\u00e8me modalit\u00e9 de S1 - la derni\u00e8re de S1. S2.SELMOD(20 TO 25) cr\u00e9e une variable logique \u00e0 6 modalit\u00e9s constitu\u00e9es \u00e0 partir des r\u00e9ponses 20 \u00e0 25. S2.SELMOD(20 TO 25).RESP() cr\u00e9e un filtre consid\u00e9rant les individus ayant entre 20 et 25 ans. Utilisations habituelles : - Cr\u00e9er un filtre : S6.SELMOD(1) les possesseurs de r\u00e9frig\u00e9rateurs - Extraire des modalit\u00e9s : S6.SELMOD(2 3 4 5 6 12) les \u00e9quipements multim\u00e9dia - que l'on peut aussi \u00e9crire S6.SELMOD(2 TO 6 12) - Extraire et r\u00e9ordonner : S6.SELMOD( 6 5 4 3 2 12) que l'on peut aussi \u00e9crire S6.SELMOD(6 TO 2 12) Autres utilisations : - Extraire en partant de la fin : S6.SELMOD(-1) : extrait la derni\u00e8re modalit\u00e9, VTT S6.SELMOD(-2 -1) : extrait les deux derni\u00e8res modalit\u00e9s - Extraire des modalit\u00e9s en se basant sur le libell\u00e9, les moyens de d\u00e9placement : S6.SELMOD(\"VOITURE\";\"vtt\")ou S6.SELMOD(\"VOITURE,vtt\") insensible \u00e0 la casse On peut mixer les deux modes de s\u00e9lection : S6.SELMOD(10;\"vtt\") Pour s\u00e9lectionner un libell\u00e9 comprenant une virgule comme par exemple \"Aucun, rien\" : Q1.SELMOD(\"Aucun? rien\") S6.SELMOD(\"ST *\") s\u00e9lectionne toutes les modalit\u00e9s dont le libell\u00e9 commence par \"ST \" - Les utilisations moins fr\u00e9quentes mais tr\u00e8s pratiques : Cr\u00e9er une nouvelle modalit\u00e9 vide : S6.SELMOD(1 2 0) Dupliquer des modalit\u00e9s : S6.SELMOD(1 1 2 2) La modalit\u00e9 \"Aucun\" est conserv\u00e9e si l'option de suppression des modalit\u00e9s vides est activ\u00e9e : S1.SELMOD(\"Aucun\".FILTER(FALSE)) - Et les autres : S6.SELMOD(1 $O) : 2 modalit\u00e9s, les Frigo et les autres S6.SELMOD(1 $R) : 2 modalit\u00e9s, les Frigo et les r\u00e9pondants S6.SELMOD(1 $N) : 2 modalit\u00e9s, les Frigo et les SR S6.SELMOD(1 $I) : 2 modalit\u00e9s, les Frigo et les interrog\u00e9s S6.SELMOD(1;!1) : 2 modalit\u00e9s, les Frigo et les Pas Frigo S6.SELMOD($R $M) : 14 modalit\u00e9s, les r\u00e9pondants et toutes les modalit\u00e9s S2.SELMOD($L;\"Autres\") d\u00e9place la modalit\u00e9 \"Autres\" en derni\u00e8re position.","title":"Exemples :"},{"location":"Fonctions/SELMOD/#s2selmod1-1-extrait-la-modalite-1-et-son-complement","text":"Voir aussi : Traiter les variables logiques (modalit\u00e9s) Combinaisons Gestion des dimensions Pour des combinaisons plus complexes de modalit\u00e9s : S\u00e9lection \"\u00e9tendue\" de modalit\u00e9s/d\u00e9tails","title":"S2.SELMOD(1; ~1) extrait la modalit\u00e9 1 et son compl\u00e9ment..&nbsp;"},{"location":"Fonctions/SELROW1/","text":"SELROW Fonction SELROW ou ROW La fonction SELROW s\u00e9lectionne (ou regroupe) des lignes de la variable trait\u00e9e. Voir SELMOD . Syntaxe : Q01.SELROW(Part1; Part2; Part3; ...) ou Q01.ROW(Part1; Part2; Part3; ...) **Nom ** **Type ** Description Remarque Parts Liste d'expressions Expressions de s\u00e9lection/regroupement s\u00e9par\u00e9s par des ';' Obligatoire Il est possible d'utiliser les accolades pour extraire un item : Q1{2} est \u00e9quivalent \u00e0 Q1.COL(1).TRIMDIM() Voir aussi : Gestion des dimensions","title":"SELROW"},{"location":"Fonctions/SELROW1/#selrow","text":"","title":"SELROW"},{"location":"Fonctions/SELROW1/#fonction-selrow-ou-row","text":"La fonction SELROW s\u00e9lectionne (ou regroupe) des lignes de la variable trait\u00e9e. Voir SELMOD .","title":"Fonction SELROW ou ROW"},{"location":"Fonctions/SELROW1/#syntaxe","text":"Q01.SELROW(Part1; Part2; Part3; ...) ou Q01.ROW(Part1; Part2; Part3; ...) **Nom ** **Type ** Description Remarque Parts Liste d'expressions Expressions de s\u00e9lection/regroupement s\u00e9par\u00e9s par des ';' Obligatoire Il est possible d'utiliser les accolades pour extraire un item : Q1{2} est \u00e9quivalent \u00e0 Q1.COL(1).TRIMDIM() Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SETCOL/","text":"SETCOL Fonction SETCOL La fonction SETCOL permet de modifier partiellement une variable dimensionn\u00e9e. Syntaxe : Q01.SETCOL(Item; Value) ou _SETCOL(Variable; Item; Value) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 3 Item Keys liste des items \u00e0 modifier Obligatoire 4 Value Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire Exemples : S1.SETCOL(1 2; 10) Les deux premiers items de S1 r\u00e9cup\u00e8rent le valeur 10 S1.SETCOL(-1; Q1) Le dernier item de S1 r\u00e9cup\u00e8re les valeurs de Q1 S1.SETCOL(\"France\"; Q1) L'item \"France\" de S1 r\u00e9cup\u00e8re les valeurs de Q1 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"SETCOL"},{"location":"Fonctions/SETCOL/#setcol","text":"","title":"SETCOL"},{"location":"Fonctions/SETCOL/#fonction-setcol","text":"La fonction SETCOL permet de modifier partiellement une variable dimensionn\u00e9e.","title":"Fonction SETCOL"},{"location":"Fonctions/SETCOL/#syntaxe","text":"Q01.SETCOL(Item; Value) ou _SETCOL(Variable; Item; Value) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 3 Item Keys liste des items \u00e0 modifier Obligatoire 4 Value Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SETCOL/#exemples","text":"S1.SETCOL(1 2; 10) Les deux premiers items de S1 r\u00e9cup\u00e8rent le valeur 10 S1.SETCOL(-1; Q1) Le dernier item de S1 r\u00e9cup\u00e8re les valeurs de Q1 S1.SETCOL(\"France\"; Q1) L'item \"France\" de S1 r\u00e9cup\u00e8re les valeurs de Q1 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"Exemples :"},{"location":"Fonctions/SETROW/","text":"SETROW Fonction SETROW La fonction SETROW permet de modifier partiellement une variable dimensionn\u00e9e. Syntaxe : Q01.SETROW(Item; Value) ou _SETROW(Variable; Item; Value) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 3 Item Keys liste des items \u00e0 modifier Obligatoire 4 Value Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire Exemples : S1.SETROW(1 2; 10) Les deux premiers items lignes de S1 r\u00e9cup\u00e8rent le valeur 10 S1.SETROW(-1; Q1) Le dernier item lignes de S1 r\u00e9cup\u00e8re les valeurs de Q1 S1.SETROW(\"France\"; Q1) L'item ligne \"France\" de S1 r\u00e9cup\u00e8re les valeurs de Q1 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"SETROW"},{"location":"Fonctions/SETROW/#setrow","text":"","title":"SETROW"},{"location":"Fonctions/SETROW/#fonction-setrow","text":"La fonction SETROW permet de modifier partiellement une variable dimensionn\u00e9e.","title":"Fonction SETROW"},{"location":"Fonctions/SETROW/#syntaxe","text":"Q01.SETROW(Item; Value) ou _SETROW(Variable; Item; Value) **Nom ** **Type ** Description Remarque 1 Variable Variable Tous types Obligatoire 3 Item Keys liste des items \u00e0 modifier Obligatoire 4 Value Valeur ou variable R\u00e9ponse \u00e0 affecter (num\u00e9ro de modalit\u00e9 ou valeur num\u00e9rique en fonction de la nature de la variable d'origine ou une variable) Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SETROW/#exemples","text":"S1.SETROW(1 2; 10) Les deux premiers items lignes de S1 r\u00e9cup\u00e8rent le valeur 10 S1.SETROW(-1; Q1) Le dernier item lignes de S1 r\u00e9cup\u00e8re les valeurs de Q1 S1.SETROW(\"France\"; Q1) L'item ligne \"France\" de S1 r\u00e9cup\u00e8re les valeurs de Q1 Voir aussi : Combiner les variables Variables temporaires R\u00e9parer une variable","title":"Exemples :"},{"location":"Fonctions/SHORTTITLE1/","text":"SHORTTITLE Fonction SHORTTITLE La fonction SHORTTITLE modifie le titre court de la variable pass\u00e9e en argument. Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au titre de la variable en entr\u00e9e. Pour plus d'informations, voir la section sur les \"Traitements textuels\" Syntaxe : Q01.SHORTTITLE(Expression) ou _SHORTTITLE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression \u00e0 utiliser pour fixe le nouveau titre court Obligatoire Remarques : La fonction SHORTTITLE conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine. Si le titre court est pr\u00e9sent et pour facilit\u00e9 la lecture, il est affich\u00e9 dans la vue \"Variables\" \u00e0 la place du titre long. Exemples : S2.SHORTTITLE(\"Age\") S2.SHORTTITLE(\"=TRIM, UPPER\") S2.SHORTTITLE(\"=UPPER(@VALUE)\") Voir aussi : Propri\u00e9t\u00e9s des variables","title":"SHORTTITLE"},{"location":"Fonctions/SHORTTITLE1/#shorttitle","text":"","title":"SHORTTITLE"},{"location":"Fonctions/SHORTTITLE1/#fonction-shorttitle","text":"La fonction SHORTTITLE modifie le titre court de la variable pass\u00e9e en argument. Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au titre de la variable en entr\u00e9e. Pour plus d'informations, voir la section sur les \"Traitements textuels\"","title":"Fonction SHORTTITLE"},{"location":"Fonctions/SHORTTITLE1/#syntaxe","text":"Q01.SHORTTITLE(Expression) ou _SHORTTITLE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Expression \u00e0 utiliser pour fixe le nouveau titre court Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SHORTTITLE1/#remarques","text":"La fonction SHORTTITLE conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine. Si le titre court est pr\u00e9sent et pour facilit\u00e9 la lecture, il est affich\u00e9 dans la vue \"Variables\" \u00e0 la place du titre long.","title":"Remarques :"},{"location":"Fonctions/SHORTTITLE1/#exemples","text":"S2.SHORTTITLE(\"Age\") S2.SHORTTITLE(\"=TRIM, UPPER\") S2.SHORTTITLE(\"=UPPER(@VALUE)\") Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/SHOWCOL1/","text":"SHOWCOL Fonction SHOWCOL La fonction SHOWCOL affiche ou cache une colonne de la variable trait\u00e9e (dans les tableaux uniquement). Syntaxe : Q01.SHOWCOL(Value; Selection) ou _SHOWCOL(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire Remarques : La fonction HIDECOL est une version simplifi\u00e9e de SHOWCOL. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"SHOWCOL"},{"location":"Fonctions/SHOWCOL1/#showcol","text":"","title":"SHOWCOL"},{"location":"Fonctions/SHOWCOL1/#fonction-showcol","text":"La fonction SHOWCOL affiche ou cache une colonne de la variable trait\u00e9e (dans les tableaux uniquement).","title":"Fonction SHOWCOL"},{"location":"Fonctions/SHOWCOL1/#syntaxe","text":"Q01.SHOWCOL(Value; Selection) ou _SHOWCOL(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SHOWCOL1/#remarques","text":"La fonction HIDECOL est une version simplifi\u00e9e de SHOWCOL. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Remarques :"},{"location":"Fonctions/SHOWMOD1/","text":"SHOWMOD Fonction SHOWMOD La fonction SHOWMOD affiche ou cache une modalit\u00e9 de la variable trait\u00e9e (dans les tableaux uniquement). Syntaxe : Q01.SHOWMOD(Value; Selection) ou _SHOWMOD(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire Remarques : La fonction HIDEMOD est une version simplifi\u00e9e de SHOWMOD. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"SHOWMOD"},{"location":"Fonctions/SHOWMOD1/#showmod","text":"","title":"SHOWMOD"},{"location":"Fonctions/SHOWMOD1/#fonction-showmod","text":"La fonction SHOWMOD affiche ou cache une modalit\u00e9 de la variable trait\u00e9e (dans les tableaux uniquement).","title":"Fonction SHOWMOD"},{"location":"Fonctions/SHOWMOD1/#syntaxe","text":"Q01.SHOWMOD(Value; Selection) ou _SHOWMOD(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SHOWMOD1/#remarques","text":"La fonction HIDEMOD est une version simplifi\u00e9e de SHOWMOD. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Remarques :"},{"location":"Fonctions/SHOWROW1/","text":"SHOWROW Fonction SHOWROW La fonction SHOWROW affiche ou cache une ligne de la variable trait\u00e9e (dans les tableaux uniquement). Syntaxe : Q01.SHOWROW(Value; Selection) ou _SHOWROW(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire Remarques : La fonction HIDEROW est une version simplifi\u00e9e de SHOWROW. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"SHOWROW"},{"location":"Fonctions/SHOWROW1/#showrow","text":"","title":"SHOWROW"},{"location":"Fonctions/SHOWROW1/#fonction-showrow","text":"La fonction SHOWROW affiche ou cache une ligne de la variable trait\u00e9e (dans les tableaux uniquement).","title":"Fonction SHOWROW"},{"location":"Fonctions/SHOWROW1/#syntaxe","text":"Q01.SHOWROW(Value; Selection) ou _SHOWROW(Q01; Value; Selection) **Nom ** **Type ** Description Remarque 1 Value Bool\u00e9en FALSE : cache et TRUE affiche Obligatoire 2 Selection Liste de valeurs Liste des positions affect\u00e9es Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SHOWROW1/#remarques","text":"La fonction HIDEROW est une version simplifi\u00e9e de SHOWROW. Voir aussi : Gestion des dimensions Pr\u00e9senter les variables dans les tableaux","title":"Remarques :"},{"location":"Fonctions/SPLIT1/","text":"SPLIT Fonction SPLIT La fonction SPLIT appliqu\u00e9e \u00e0 une variable litt\u00e9rale d\u00e9coupe les textes cit\u00e9s en autant de 'd\u00e9tails' qu'il y a des parties d\u00e9limit\u00e9es rencontr\u00e9es dans les r\u00e9ponses. Quelle que soit la variable trait\u00e9e, elle est automatiquement convertie en variable litt\u00e9rale, et le r\u00e9sultat est toujours une variable litt\u00e9rale. Syntaxe : Q01.SPLIT(Delimiters; ExpectedPartCount) ou _SPLIT(Q01; Delimiters; ExpectedPartCount) **Nom ** **Type ** Description Remarque 1 Delimiters Cha\u00eene de caract\u00e8res D\u00e9limiteurs \u00e0 employer pour d\u00e9couper la cha\u00eene en entr\u00e9e Obligatoire 2 ExpectedPartCount Entier Nombre optionnel de parties attendues : permet de forcer le nombre de d\u00e9tails dans la variable r\u00e9sultat. -1 par d\u00e9faut Exemples : Q01A.SPLIT(\" \"; 5) Retourne une variable litt\u00e9rale dimensionn\u00e9e \u00e0 5 d\u00e9tails et dont les modalit\u00e9s correspondent aux diff\u00e9rents 'mots' (s\u00e9par\u00e9s par des blancs) rencontr\u00e9es dans les donn\u00e9es d'origine. Q01A.SPLIT(\" \") Pareil que pr\u00e9c\u00e9demment, mais le nombre de d\u00e9tails d\u00e9pend directement du nombre maximum de mots rencontr\u00e9s dans les donn\u00e9es. Voir aussi : Traiter les variables litt\u00e9rales","title":"SPLIT"},{"location":"Fonctions/SPLIT1/#split","text":"","title":"SPLIT"},{"location":"Fonctions/SPLIT1/#fonction-split","text":"La fonction SPLIT appliqu\u00e9e \u00e0 une variable litt\u00e9rale d\u00e9coupe les textes cit\u00e9s en autant de 'd\u00e9tails' qu'il y a des parties d\u00e9limit\u00e9es rencontr\u00e9es dans les r\u00e9ponses. Quelle que soit la variable trait\u00e9e, elle est automatiquement convertie en variable litt\u00e9rale, et le r\u00e9sultat est toujours une variable litt\u00e9rale.","title":"Fonction SPLIT"},{"location":"Fonctions/SPLIT1/#syntaxe","text":"Q01.SPLIT(Delimiters; ExpectedPartCount) ou _SPLIT(Q01; Delimiters; ExpectedPartCount) **Nom ** **Type ** Description Remarque 1 Delimiters Cha\u00eene de caract\u00e8res D\u00e9limiteurs \u00e0 employer pour d\u00e9couper la cha\u00eene en entr\u00e9e Obligatoire 2 ExpectedPartCount Entier Nombre optionnel de parties attendues : permet de forcer le nombre de d\u00e9tails dans la variable r\u00e9sultat. -1 par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SPLIT1/#exemples","text":"Q01A.SPLIT(\" \"; 5) Retourne une variable litt\u00e9rale dimensionn\u00e9e \u00e0 5 d\u00e9tails et dont les modalit\u00e9s correspondent aux diff\u00e9rents 'mots' (s\u00e9par\u00e9s par des blancs) rencontr\u00e9es dans les donn\u00e9es d'origine. Q01A.SPLIT(\" \") Pareil que pr\u00e9c\u00e9demment, mais le nombre de d\u00e9tails d\u00e9pend directement du nombre maximum de mots rencontr\u00e9s dans les donn\u00e9es. Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/SRTCOL1/","text":"SRTCOL Fonction SRTCOL La fonction SRTCOL hi\u00e9rarchise les colonnes d'une variable logique sur la base des effectifs d'une modalit\u00e9 de r\u00e9f\u00e9rence. L'ordre des colonnes de la variable obtenue d\u00e9pend donc des donn\u00e9es. Syntaxe : Q01.SRTCOL(Criteria; Ascendant; Universe; Weight) ou _SRTCOL(Q01; Criteria; Ascendant; Universe; Weight) **Nom ** **Type ** Description Remarque 1 Criteria Valeur Num\u00e9ro de la modalit\u00e9 de r\u00e9f\u00e9rence ou op\u00e9rateur sur continue 1 par d\u00e9faut 2 Ascendant Bool\u00e9en TRUE pour un tri ascendant, FALSE (par d\u00e9faut) pour un tri descendant. FALSE par d\u00e9faut 3 Universe Variable Univers optionnel \u00e0 utiliser NUL par d\u00e9faut 4 Weight Variable Pond\u00e9ration optionnelle \u00e0 utiliser NUL par d\u00e9faut Exemples : S1.SRTCOL(1; TRUE; S3 1; POIDS) Retourne une variable dont les colonnes sont hi\u00e9rarchis\u00e9es dans l'ordre croissant selon les effectifs pond\u00e9r\u00e9s ('POIDS') sur la population 'S3 1' de la 1\u00e8re modalit\u00e9. Remarques : La fonction SRTCOL supporte les variables continues, dans ce cas le crit\u00e8re est l'op\u00e9rateur de r\u00e9duction associ\u00e9 : Q1.SRTCOL(\"MEAN\"; TRUE) R\u00e9ductions Voir aussi : Gestion des dimensions","title":"SRTCOL"},{"location":"Fonctions/SRTCOL1/#srtcol","text":"","title":"SRTCOL"},{"location":"Fonctions/SRTCOL1/#fonction-srtcol","text":"La fonction SRTCOL hi\u00e9rarchise les colonnes d'une variable logique sur la base des effectifs d'une modalit\u00e9 de r\u00e9f\u00e9rence. L'ordre des colonnes de la variable obtenue d\u00e9pend donc des donn\u00e9es.","title":"Fonction SRTCOL"},{"location":"Fonctions/SRTCOL1/#syntaxe","text":"Q01.SRTCOL(Criteria; Ascendant; Universe; Weight) ou _SRTCOL(Q01; Criteria; Ascendant; Universe; Weight) **Nom ** **Type ** Description Remarque 1 Criteria Valeur Num\u00e9ro de la modalit\u00e9 de r\u00e9f\u00e9rence ou op\u00e9rateur sur continue 1 par d\u00e9faut 2 Ascendant Bool\u00e9en TRUE pour un tri ascendant, FALSE (par d\u00e9faut) pour un tri descendant. FALSE par d\u00e9faut 3 Universe Variable Univers optionnel \u00e0 utiliser NUL par d\u00e9faut 4 Weight Variable Pond\u00e9ration optionnelle \u00e0 utiliser NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SRTCOL1/#exemples","text":"S1.SRTCOL(1; TRUE; S3 1; POIDS) Retourne une variable dont les colonnes sont hi\u00e9rarchis\u00e9es dans l'ordre croissant selon les effectifs pond\u00e9r\u00e9s ('POIDS') sur la population 'S3 1' de la 1\u00e8re modalit\u00e9.","title":"Exemples :"},{"location":"Fonctions/SRTCOL1/#remarques","text":"La fonction SRTCOL supporte les variables continues, dans ce cas le crit\u00e8re est l'op\u00e9rateur de r\u00e9duction associ\u00e9 : Q1.SRTCOL(\"MEAN\"; TRUE) R\u00e9ductions Voir aussi : Gestion des dimensions","title":"Remarques :"},{"location":"Fonctions/SRTCOLALPHA1/","text":"SRTCOLALPHA Fonction SRTCOLALPHA La fonction SRTROWALPHA hi\u00e9rarchise les colonnes de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des libell\u00e9s des dites colonnes. Syntaxe : Q01.SRTCOLALPHA(Ascendant) ou _SRTCOLALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut Voir aussi : Gestion des dimensions","title":"SRTCOLALPHA"},{"location":"Fonctions/SRTCOLALPHA1/#srtcolalpha","text":"","title":"SRTCOLALPHA"},{"location":"Fonctions/SRTCOLALPHA1/#fonction-srtcolalpha","text":"La fonction SRTROWALPHA hi\u00e9rarchise les colonnes de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des libell\u00e9s des dites colonnes.","title":"Fonction SRTCOLALPHA"},{"location":"Fonctions/SRTCOLALPHA1/#syntaxe","text":"Q01.SRTCOLALPHA(Ascendant) ou _SRTCOLALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SRTMOD1/","text":"SRTMOD Fonction SRTMOD La fonction SRTMOD hi\u00e9rarchise les modalit\u00e9s d'une variable sur la base de leur effectif. L'ordre des modalit\u00e9s de la variable obtenue d\u00e9pend donc des donn\u00e9es. Syntaxe : Q01.SRTMOD(Ascendant; SortGroups; Universe; Weight) ou _SRTMOD(Q01; Ascendant; SortGroups; Universe; Weight) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en TRUE pour un tri ascendant, FALSE (par d\u00e9faut) pour un tri descendant. FALSE par d\u00e9faut 2 SortGroups Bool\u00e9en TRUE pour un tri hi\u00e9rarchique (par sous-titres \\& sous-totaux), FALSE pour un tri global. FALSE par d\u00e9faut 3 Universe Variable Univers optionnel \u00e0 utiliser NUL par d\u00e9faut 4 Weight Variable Pond\u00e9ration optionnelle \u00e0 utiliser NUL par d\u00e9faut Exemples : S1.SRTMOD() Retourne une variable dont les modalit\u00e9s sont hi\u00e9rarchis\u00e9es dans l'ordre d\u00e9croissant, par groupe et selon les effectifs bruts. S1.SRTMOD(TRUE; FALSE; S3 1; POIDS) Retourne une variable dont les modalit\u00e9s sont hi\u00e9rarchis\u00e9es dans l'ordre croissant, globalement, et selon les effectifs pond\u00e9r\u00e9s ('POIDS'), sur la population 'S3 1' Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Gestion des dimensions","title":"SRTMOD"},{"location":"Fonctions/SRTMOD1/#srtmod","text":"","title":"SRTMOD"},{"location":"Fonctions/SRTMOD1/#fonction-srtmod","text":"La fonction SRTMOD hi\u00e9rarchise les modalit\u00e9s d'une variable sur la base de leur effectif. L'ordre des modalit\u00e9s de la variable obtenue d\u00e9pend donc des donn\u00e9es.","title":"Fonction SRTMOD"},{"location":"Fonctions/SRTMOD1/#syntaxe","text":"Q01.SRTMOD(Ascendant; SortGroups; Universe; Weight) ou _SRTMOD(Q01; Ascendant; SortGroups; Universe; Weight) **Nom ** **Type ** Description Remarque 1 Ascendant Bool\u00e9en TRUE pour un tri ascendant, FALSE (par d\u00e9faut) pour un tri descendant. FALSE par d\u00e9faut 2 SortGroups Bool\u00e9en TRUE pour un tri hi\u00e9rarchique (par sous-titres \\& sous-totaux), FALSE pour un tri global. FALSE par d\u00e9faut 3 Universe Variable Univers optionnel \u00e0 utiliser NUL par d\u00e9faut 4 Weight Variable Pond\u00e9ration optionnelle \u00e0 utiliser NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SRTMOD1/#exemples","text":"S1.SRTMOD() Retourne une variable dont les modalit\u00e9s sont hi\u00e9rarchis\u00e9es dans l'ordre d\u00e9croissant, par groupe et selon les effectifs bruts. S1.SRTMOD(TRUE; FALSE; S3 1; POIDS) Retourne une variable dont les modalit\u00e9s sont hi\u00e9rarchis\u00e9es dans l'ordre croissant, globalement, et selon les effectifs pond\u00e9r\u00e9s ('POIDS'), sur la population 'S3 1' Voir aussi : Traiter les variables logiques (modalit\u00e9s) Pr\u00e9senter les variables dans les tableaux Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/SRTMODALPHA1/","text":"SRTMODALPHA Fonction SRTMODALPHA La fonction SRTMODALPHA hi\u00e9rarchise les modalit\u00e9s de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des libell\u00e9s. Syntaxe : Q01.SRTMODALPHA(Ascendant) ou _SRTMODALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"SRTMODALPHA"},{"location":"Fonctions/SRTMODALPHA1/#srtmodalpha","text":"","title":"SRTMODALPHA"},{"location":"Fonctions/SRTMODALPHA1/#fonction-srtmodalpha","text":"La fonction SRTMODALPHA hi\u00e9rarchise les modalit\u00e9s de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des libell\u00e9s.","title":"Fonction SRTMODALPHA"},{"location":"Fonctions/SRTMODALPHA1/#syntaxe","text":"Q01.SRTMODALPHA(Ascendant) ou _SRTMODALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SRTROWALPHA1/","text":"SRTROWALPHA Fonction SRTROWALPHA La fonction SRTROWALPHA hi\u00e9rarchise les lignes de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des intitul\u00e9s. Syntaxe : Q01.SRTROWALPHA(Ascendant) ou _SRTROWALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"SRTROWALPHA"},{"location":"Fonctions/SRTROWALPHA1/#srtrowalpha","text":"","title":"SRTROWALPHA"},{"location":"Fonctions/SRTROWALPHA1/#fonction-srtrowalpha","text":"La fonction SRTROWALPHA hi\u00e9rarchise les lignes de la variable trait\u00e9e dans l'ordre alphab\u00e9tique des intitul\u00e9s.","title":"Fonction SRTROWALPHA"},{"location":"Fonctions/SRTROWALPHA1/#syntaxe","text":"Q01.SRTROWALPHA(Ascendant) ou _SRTROWALPHA(Q01; Ascendant) **Nom ** **Type ** Description Remarque Ascendant Bool\u00e9en TRUE : ascendant FALSE : descendant FALSE par d\u00e9faut \\ Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STANDARDIZE1/","text":"STANDARDIZE Fonction STANDARDIZE La fonction STANDARDIZE calcule la version centr\u00e9e, r\u00e9duite de la variable num\u00e9rique trait\u00e9e. Syntaxe : Q01.STANDARDIZE(Weight) ou _STANDARDIZE(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer (optionnel) NUL par d\u00e9faut Exemples : S2.STANDARDIZE() La fonction STANDARDIZE conserve les dimensions et l'univers de la variable source. Voir aussi : Manipuler les variables num\u00e9riques","title":"STANDARDIZE"},{"location":"Fonctions/STANDARDIZE1/#standardize","text":"","title":"STANDARDIZE"},{"location":"Fonctions/STANDARDIZE1/#fonction-standardize","text":"La fonction STANDARDIZE calcule la version centr\u00e9e, r\u00e9duite de la variable num\u00e9rique trait\u00e9e.","title":"Fonction STANDARDIZE"},{"location":"Fonctions/STANDARDIZE1/#syntaxe","text":"Q01.STANDARDIZE(Weight) ou _STANDARDIZE(Q01; Weight) **Nom ** **Type ** Description Remarque Weight Variable Pond\u00e9ration \u00e0 appliquer (optionnel) NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STANDARDIZE1/#exemples","text":"S2.STANDARDIZE() La fonction STANDARDIZE conserve les dimensions et l'univers de la variable source. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/STAT1/","text":"STAT Fonction STAT La fonction STAT retourne une variable num\u00e9rique, chaque individus re\u00e7oit le % de ses citations. Syntaxe : Q01.STAT(Universe;Weight;Base;Factor) ou _STAT(Q01;Universe;Weight;Base;Factor) **Nom ** **Type ** Description Remarque Universe Variable Univers appliqu\u00e9 Vide par d\u00e9faut Weight Variable Pond\u00e9ration \u00e0 appliquer (optionnel) Vide par d\u00e9faut Base Caract\u00e8re Base du % R : R\u00e9pndants et I : Interrog\u00e9s Effectif si vide Factor Entier Coefficient multiplicateur de % 100 par d\u00e9faut Exemples : SEXE.STAT() retourne une continue avec le % (ex: 40) d'homme pour les hommes et le % (ex: 60) de femme pour les femmes SEXE.STAT(UNIV;POIDS) retourne le % filtr\u00e9 par UNIV et pond\u00e9r\u00e9 par POIDS SEXE.STAT(NONE;NONE;NONE) retourne les effectifs bruts. Remarques : Les variables dimensionn\u00e9es sont support\u00e9es.","title":"STAT"},{"location":"Fonctions/STAT1/#stat","text":"","title":"STAT"},{"location":"Fonctions/STAT1/#fonction-stat","text":"La fonction STAT retourne une variable num\u00e9rique, chaque individus re\u00e7oit le % de ses citations.","title":"Fonction STAT"},{"location":"Fonctions/STAT1/#syntaxe","text":"Q01.STAT(Universe;Weight;Base;Factor) ou _STAT(Q01;Universe;Weight;Base;Factor) **Nom ** **Type ** Description Remarque Universe Variable Univers appliqu\u00e9 Vide par d\u00e9faut Weight Variable Pond\u00e9ration \u00e0 appliquer (optionnel) Vide par d\u00e9faut Base Caract\u00e8re Base du % R : R\u00e9pndants et I : Interrog\u00e9s Effectif si vide Factor Entier Coefficient multiplicateur de % 100 par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STAT1/#exemples","text":"SEXE.STAT() retourne une continue avec le % (ex: 40) d'homme pour les hommes et le % (ex: 60) de femme pour les femmes SEXE.STAT(UNIV;POIDS) retourne le % filtr\u00e9 par UNIV et pond\u00e9r\u00e9 par POIDS SEXE.STAT(NONE;NONE;NONE) retourne les effectifs bruts.","title":"Exemples :"},{"location":"Fonctions/STAT1/#remarques","text":"Les variables dimensionn\u00e9es sont support\u00e9es.","title":"Remarques :"},{"location":"Fonctions/STDEV1/","text":"STDEV Fonction STDEV La fonction STDEV s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont l'\u00e9cart-type des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez STDEVNA. Syntaxe : _STDEV(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _STDEV(Q04A; Q04B) Retourne une variable qui repr\u00e9sente l'\u00e9cart-type de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"STDEV"},{"location":"Fonctions/STDEV1/#stdev","text":"","title":"STDEV"},{"location":"Fonctions/STDEV1/#fonction-stdev","text":"La fonction STDEV s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont l'\u00e9cart-type des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez STDEVNA.","title":"Fonction STDEV"},{"location":"Fonctions/STDEV1/#syntaxe","text":"_STDEV(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STDEV1/#exemples","text":"_STDEV(Q04A; Q04B) Retourne une variable qui repr\u00e9sente l'\u00e9cart-type de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/STDEVNA1/","text":"STDEVNA Fonction STDEVNA La fonction STDEVNA calcule l'\u00e9cart-type entre plusieurs variables num\u00e9riques (\u00e9cart-type de X et NA = X quelque soit X). Syntaxe : _STDEVNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _STDEVNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente l'\u00e9cart-type Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"STDEVNA"},{"location":"Fonctions/STDEVNA1/#stdevna","text":"","title":"STDEVNA"},{"location":"Fonctions/STDEVNA1/#fonction-stdevna","text":"La fonction STDEVNA calcule l'\u00e9cart-type entre plusieurs variables num\u00e9riques (\u00e9cart-type de X et NA = X quelque soit X).","title":"Fonction STDEVNA"},{"location":"Fonctions/STDEVNA1/#syntaxe","text":"_STDEVNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STDEVNA1/#exemples","text":"_STDEVNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente l'\u00e9cart-type Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques","title":"Exemples :"},{"location":"Fonctions/STR1/","text":"STR Fonction STR La fonction STR cr\u00e9e une variable litt\u00e9rale constante qui poss\u00e8de une seule valeur de r\u00e9ponse : celle sp\u00e9cifi\u00e9e en argument. Naturellement, il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable. Syntaxe : _STR(Level; Value) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene de carat\u00e8re Obligatoire Exemples : _STR(\"UNITS\"; \"Hello\") Cr\u00e9e une nouvelle variable bas\u00e9e sur le niveau \"UNITS\" et dont la valeur de r\u00e9ponse est \"Hello\". Voir aussi : Traiter les variables litt\u00e9rales Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"STR"},{"location":"Fonctions/STR1/#str","text":"","title":"STR"},{"location":"Fonctions/STR1/#fonction-str","text":"La fonction STR cr\u00e9e une variable litt\u00e9rale constante qui poss\u00e8de une seule valeur de r\u00e9ponse : celle sp\u00e9cifi\u00e9e en argument. Naturellement, il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable.","title":"Fonction STR"},{"location":"Fonctions/STR1/#syntaxe","text":"_STR(Level; Value) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene de carat\u00e8re Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/STR1/#exemples","text":"_STR(\"UNITS\"; \"Hello\") Cr\u00e9e une nouvelle variable bas\u00e9e sur le niveau \"UNITS\" et dont la valeur de r\u00e9ponse est \"Hello\". Voir aussi : Traiter les variables litt\u00e9rales Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/SUB1/","text":"SUB Fonction SUB La fonction SUB s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont la diff\u00e9rence des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez SUBNA. Syntaxe : _SUB(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _SUB(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la diff\u00e9rence de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"SUB"},{"location":"Fonctions/SUB1/#sub","text":"","title":"SUB"},{"location":"Fonctions/SUB1/#fonction-sub","text":"La fonction SUB s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont la diff\u00e9rence des valeurs rencontr\u00e9es dans les arguments. La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez SUBNA.","title":"Fonction SUB"},{"location":"Fonctions/SUB1/#syntaxe","text":"_SUB(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUB1/#exemples","text":"_SUB(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la diff\u00e9rence de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/SUBNA1/","text":"SUBNA Fonction SUBNA La fonction SUBNA calcule la soustraction de plusieurs variables num\u00e9riques (1 - NA = 1 et NA - 1 = -1). Syntaxe : _SUBNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _SUBNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la diff\u00e9rence de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"SUBNA"},{"location":"Fonctions/SUBNA1/#subna","text":"","title":"SUBNA"},{"location":"Fonctions/SUBNA1/#fonction-subna","text":"La fonction SUBNA calcule la soustraction de plusieurs variables num\u00e9riques (1 - NA = 1 et NA - 1 = -1).","title":"Fonction SUBNA"},{"location":"Fonctions/SUBNA1/#syntaxe","text":"_SUBNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe&nbsp; :&nbsp;"},{"location":"Fonctions/SUBNA1/#exemples","text":"_SUBNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la diff\u00e9rence de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/SUBSTRING1/","text":"SUBSTRING Fonction SUBSTRING La fonction SUBTRING extrait une partie de texte d'une variable litt\u00e9rale \u00e0 l'aide d'un d\u00e9limiteur et d'une position. Syntaxe : Q01.SUBSTRING(Index; LengthOrDelimiter) ou _SUBSTRING(Q01; Index; LengthOrDelimiter) **Nom ** **Type ** Description Remarque 1 Index Entier indice de la partie \u00e0 extraire (1 : 1er caract\u00e8re, 2: 2e caract\u00e8re, -1: dernier caract\u00e8re) Obligatoire 2 LengthOrDelimiter Valeur D\u00e9limiteur \u00e0 utiliser. Le d\u00e9limiteur peut \u00eatre un nombre ou un caract\u00e8re. Si c'est un nombre, on consid\u00e8re que chaque partie est compos\u00e9e d'autant de caract\u00e8res Obligatoire Exemples : EMAIL.SUBSTRING(1; \"@\") Retourne la partie 'gauche' d'une adresse \u00e9lectronique (celle qui pr\u00e9c\u00e8de le '@'). Voir aussi : Traiter les variables litt\u00e9rales","title":"SUBSTRING"},{"location":"Fonctions/SUBSTRING1/#substring","text":"","title":"SUBSTRING"},{"location":"Fonctions/SUBSTRING1/#fonction-substring","text":"La fonction SUBTRING extrait une partie de texte d'une variable litt\u00e9rale \u00e0 l'aide d'un d\u00e9limiteur et d'une position.","title":"Fonction SUBSTRING"},{"location":"Fonctions/SUBSTRING1/#syntaxe","text":"Q01.SUBSTRING(Index; LengthOrDelimiter) ou _SUBSTRING(Q01; Index; LengthOrDelimiter) **Nom ** **Type ** Description Remarque 1 Index Entier indice de la partie \u00e0 extraire (1 : 1er caract\u00e8re, 2: 2e caract\u00e8re, -1: dernier caract\u00e8re) Obligatoire 2 LengthOrDelimiter Valeur D\u00e9limiteur \u00e0 utiliser. Le d\u00e9limiteur peut \u00eatre un nombre ou un caract\u00e8re. Si c'est un nombre, on consid\u00e8re que chaque partie est compos\u00e9e d'autant de caract\u00e8res Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUBSTRING1/#exemples","text":"EMAIL.SUBSTRING(1; \"@\") Retourne la partie 'gauche' d'une adresse \u00e9lectronique (celle qui pr\u00e9c\u00e8de le '@'). Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/SUBTITLE1/","text":"SUBTITLE Fonction SUBTITLE La fonction SUBTITLE cr\u00e9e ou modifie le 1er sous-titre des modalit\u00e9s de la variable trait\u00e9e. Syntaxe : Q01.SUBTITLE(Subtitle) ou _SUBTITLE(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire Voir aussi : Propri\u00e9t\u00e9s des variables","title":"SUBTITLE"},{"location":"Fonctions/SUBTITLE1/#subtitle","text":"","title":"SUBTITLE"},{"location":"Fonctions/SUBTITLE1/#fonction-subtitle","text":"La fonction SUBTITLE cr\u00e9e ou modifie le 1er sous-titre des modalit\u00e9s de la variable trait\u00e9e.","title":"Fonction SUBTITLE"},{"location":"Fonctions/SUBTITLE1/#syntaxe","text":"Q01.SUBTITLE(Subtitle) ou _SUBTITLE(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUBTITLECOL1/","text":"SUBTITLECOL Fonction SUBTITLECOL La fonction SUBTITLECOL cr\u00e9e ou modifie le 1er sous-titre de la dimension colonnes de la variable trait\u00e9e. Syntaxe : Q01.SUBTITLECOL(Subtitle) ou _SUBTITLECOL(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire Voir aussi : Propri\u00e9t\u00e9s des variables","title":"SUBTITLECOL"},{"location":"Fonctions/SUBTITLECOL1/#subtitlecol","text":"","title":"SUBTITLECOL"},{"location":"Fonctions/SUBTITLECOL1/#fonction-subtitlecol","text":"La fonction SUBTITLECOL cr\u00e9e ou modifie le 1er sous-titre de la dimension colonnes de la variable trait\u00e9e.","title":"Fonction SUBTITLECOL"},{"location":"Fonctions/SUBTITLECOL1/#syntaxe","text":"Q01.SUBTITLECOL(Subtitle) ou _SUBTITLECOL(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUBTITLEROW1/","text":"SUBTITLEROW Fonction SUBTITLEROW La fonction SUBTITLEROW cr\u00e9e ou modifie le 1er sous-titre de la dimension lignes de la variable trait\u00e9e. Syntaxe : Q01.SUBTITLEROW(Subtitle) ou _SUBTITLEROW(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire Remarques : La fonction SUBTITLEROW cr\u00e9e ou modifie le 1er sous-titre de la dimension ligne de la variable trait\u00e9e. Exemples : Voir aussi : Propri\u00e9t\u00e9s des variables","title":"SUBTITLEROW"},{"location":"Fonctions/SUBTITLEROW1/#subtitlerow","text":"","title":"SUBTITLEROW"},{"location":"Fonctions/SUBTITLEROW1/#fonction-subtitlerow","text":"La fonction SUBTITLEROW cr\u00e9e ou modifie le 1er sous-titre de la dimension lignes de la variable trait\u00e9e.","title":"Fonction SUBTITLEROW"},{"location":"Fonctions/SUBTITLEROW1/#syntaxe","text":"Q01.SUBTITLEROW(Subtitle) ou _SUBTITLEROW(Q01; Subtitle) **Nom ** **Type ** Description Remarque Subtitle Cha\u00eene de caract\u00e8res Intitul\u00e9 du sous-titre \u00e0 \u00e9crire. Supprime le sous-titre si la valeur est vide Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUBTITLEROW1/#remarques","text":"La fonction SUBTITLEROW cr\u00e9e ou modifie le 1er sous-titre de la dimension ligne de la variable trait\u00e9e.","title":"Remarques :"},{"location":"Fonctions/SUBTITLEROW1/#exemples","text":"Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/SUM1/","text":"SUM Fonction SUM La fonction SUM s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont la somme des valeurs rencontr\u00e9es dans les arguments (NA + 1 = NA). La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez SUMNA. Syntaxe : _SUM(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _SUM(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la somme de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"SUM"},{"location":"Fonctions/SUM1/#sum","text":"","title":"SUM"},{"location":"Fonctions/SUM1/#fonction-sum","text":"La fonction SUM s'applique \u00e0 une liste de variables/constructions num\u00e9riques et retourne une variable dont les valeurs sont la somme des valeurs rencontr\u00e9es dans les arguments (NA + 1 = NA). La base du r\u00e9sultat est celle des r\u00e9pondants aux 2 variables. Pour que les sans-r\u00e9ponses soient \"neutralis\u00e9s\", et que la base englobe les r\u00e9pondants \u00e0 au moins une des variables, utilisez SUMNA.","title":"Fonction SUM"},{"location":"Fonctions/SUM1/#syntaxe","text":"_SUM(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUM1/#exemples","text":"_SUM(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la somme de Q04A et Q04B, pour ceux qui ont r\u00e9pondu aux deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/SUMNA1/","text":"SUMNA Fonction SUMNA La fonction SUMNA calcule la somme de plusieurs variables num\u00e9riques (NA + 1 = 1). Syntaxe : _SUMNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Exemples : _SUMNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la somme de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"SUMNA"},{"location":"Fonctions/SUMNA1/#sumna","text":"","title":"SUMNA"},{"location":"Fonctions/SUMNA1/#fonction-sumna","text":"La fonction SUMNA calcule la somme de plusieurs variables num\u00e9riques (NA + 1 = 1).","title":"Fonction SUMNA"},{"location":"Fonctions/SUMNA1/#syntaxe","text":"_SUMNA(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUMNA1/#exemples","text":"_SUMNA(Q04A; Q04B) Retourne une variable qui repr\u00e9sente la somme de Q04A et Q04B, pour ceux qui ont r\u00e9pondu \u00e0 au moins une des deux questions. Voir aussi : Manipuler les variables num\u00e9riques Combiner les variables","title":"Exemples :"},{"location":"Fonctions/SUMUP1/","text":"SUMUP Fonction SUMUP La fonction SUMUP permet de cr\u00e9er facilement un tableau r\u00e9capitulatif bas\u00e9 sur une batterie d'items. Syntaxe : Q01.SUMUP(Selection) ou _SUMUP(Q01; Selection) **Nom ** **Type ** Description Remarque Selection Modalit\u00e9 trait\u00e9e Num\u00e9ro de la modalit\u00e9 sur laquelle construire le r\u00e9cap' Obligatoire Remarques : La fonction SUMUP conserve l'univers de la variable source et modifie \u00e0 la fois le titre long et le titre court. ATTENTION, si les bases des d\u00e9tails sont variables, il faut passer par la consigne RECAP. Les portions de texte entre parenth\u00e8ses ou crochets sont d\u00e9tect\u00e9s. Exemples : Q14 est une \u00e9chelle d'accord pos\u00e9e sur 23 items. Q14.SUMUP(1) donne une variable multi-r\u00e9ponses \u00e0 23 modalit\u00e9s constitu\u00e9e de la concat\u00e9nation des 23 modalit\u00e9s code 1 de la variable Q14, compl\u00e9t\u00e9e par une modalit\u00e9 \"Autres\" avec la valeur 1 pour l'ordonnateur asssoci\u00e9. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"SUMUP"},{"location":"Fonctions/SUMUP1/#sumup","text":"","title":"SUMUP"},{"location":"Fonctions/SUMUP1/#fonction-sumup","text":"La fonction SUMUP permet de cr\u00e9er facilement un tableau r\u00e9capitulatif bas\u00e9 sur une batterie d'items.","title":"Fonction SUMUP"},{"location":"Fonctions/SUMUP1/#syntaxe","text":"Q01.SUMUP(Selection) ou _SUMUP(Q01; Selection) **Nom ** **Type ** Description Remarque Selection Modalit\u00e9 trait\u00e9e Num\u00e9ro de la modalit\u00e9 sur laquelle construire le r\u00e9cap' Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SUMUP1/#remarques","text":"La fonction SUMUP conserve l'univers de la variable source et modifie \u00e0 la fois le titre long et le titre court. ATTENTION, si les bases des d\u00e9tails sont variables, il faut passer par la consigne RECAP. Les portions de texte entre parenth\u00e8ses ou crochets sont d\u00e9tect\u00e9s.","title":"Remarques :"},{"location":"Fonctions/SUMUP1/#exemples","text":"Q14 est une \u00e9chelle d'accord pos\u00e9e sur 23 items. Q14.SUMUP(1) donne une variable multi-r\u00e9ponses \u00e0 23 modalit\u00e9s constitu\u00e9e de la concat\u00e9nation des 23 modalit\u00e9s code 1 de la variable Q14, compl\u00e9t\u00e9e par une modalit\u00e9 \"Autres\" avec la valeur 1 pour l'ordonnateur asssoci\u00e9. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/SYS1/","text":"SYS Fonction SYS La fonction SYS construit une nouvelle variable dont la valeur d\u00e9pend de la propri\u00e9t\u00e9 syst\u00e8me demand\u00e9e. La fonction attend : niveau : nom du niveau de cr\u00e9ation (et nb unit\u00e9s statistiques) propertyName : nom de la propri\u00e9t\u00e9 syst\u00e8me STUDY Nom du fichier de l'\u00e9tude (sans extension) STUDY_PATH Nom complet du fichier de l'\u00e9tude STUDY_FILE Nom du fichier de l'\u00e9tude (avec extension) STUDY_FOLDER Nom du dossier de l'\u00e9tude USER Nom de l'utilisateur actuel (licence) USER_EMAIL Email de l'utilisateur actuel (licence) NOW Variable temporelle qui donne l'heure actuelle, lors de l'ex\u00e9cution Syntaxe : _SYS(Level; PropertyName) **Nom ** **Type ** Description Remarque PropertyName Cha\u00eene de caract\u00e8res Nom de la propri\u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9e Obligatoire Exemples : _SYS(\"UNITS\"; \"NOW\") Retourne une variable temporelle qui donne la date et l'heure actuelles, sur le niveau 'UNITS'. Voir aussi : Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"SYS"},{"location":"Fonctions/SYS1/#sys","text":"","title":"SYS"},{"location":"Fonctions/SYS1/#fonction-sys","text":"La fonction SYS construit une nouvelle variable dont la valeur d\u00e9pend de la propri\u00e9t\u00e9 syst\u00e8me demand\u00e9e. La fonction attend : niveau : nom du niveau de cr\u00e9ation (et nb unit\u00e9s statistiques) propertyName : nom de la propri\u00e9t\u00e9 syst\u00e8me STUDY Nom du fichier de l'\u00e9tude (sans extension) STUDY_PATH Nom complet du fichier de l'\u00e9tude STUDY_FILE Nom du fichier de l'\u00e9tude (avec extension) STUDY_FOLDER Nom du dossier de l'\u00e9tude USER Nom de l'utilisateur actuel (licence) USER_EMAIL Email de l'utilisateur actuel (licence) NOW Variable temporelle qui donne l'heure actuelle, lors de l'ex\u00e9cution","title":"Fonction SYS"},{"location":"Fonctions/SYS1/#syntaxe","text":"_SYS(Level; PropertyName) **Nom ** **Type ** Description Remarque PropertyName Cha\u00eene de caract\u00e8res Nom de la propri\u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9e Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/SYS1/#exemples","text":"_SYS(\"UNITS\"; \"NOW\") Retourne une variable temporelle qui donne la date et l'heure actuelles, sur le niveau 'UNITS'. Voir aussi : Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/TABCOL1/","text":"TABCOL Fonction TABCOL La fonction TABCOL applique une table de recodification externe aux colonnes d'une variable. (cf TABMOD ) Syntaxe : Q01.TABCOL(TableExpression; Indentation) ou _TABCOL(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Indentation Caract\u00e8re Caract\u00e8re d'indentation ESPACE par d\u00e9faut Voir aussi : Gestion des dimensions","title":"TABCOL"},{"location":"Fonctions/TABCOL1/#tabcol","text":"","title":"TABCOL"},{"location":"Fonctions/TABCOL1/#fonction-tabcol","text":"La fonction TABCOL applique une table de recodification externe aux colonnes d'une variable. (cf TABMOD )","title":"Fonction TABCOL"},{"location":"Fonctions/TABCOL1/#syntaxe","text":"Q01.TABCOL(TableExpression; Indentation) ou _TABCOL(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes (TAMOD) Obligatoire 2 Indentation Caract\u00e8re Caract\u00e8re d'indentation ESPACE par d\u00e9faut Voir aussi : Gestion des dimensions","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TABIFY1/","text":"TABIFY Fonction TABIFY La fonction TABIFY indente des modalit\u00e9s du libell\u00e9 de la variable trait\u00e9e. Syntaxe : Q01.TABIFY(Values; s\u00e9lection; ReplaceMode) ou _TABIFY(Q01; Values; s\u00e9lection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"TABIFY"},{"location":"Fonctions/TABIFY1/#tabify","text":"","title":"TABIFY"},{"location":"Fonctions/TABIFY1/#fonction-tabify","text":"La fonction TABIFY indente des modalit\u00e9s du libell\u00e9 de la variable trait\u00e9e.","title":"Fonction TABIFY"},{"location":"Fonctions/TABIFY1/#syntaxe","text":"Q01.TABIFY(Values; s\u00e9lection; ReplaceMode) ou _TABIFY(Q01; Values; s\u00e9lection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TABIFYCOL1/","text":"TABIFYCOL Fonction TABIFYCOL La fonction TABIFYCOL indente des items du libell\u00e9 Colonnes de la variable trait\u00e9e. Syntaxe : Q01.TABIFYCOL(Values; s\u00e9lection; ReplaceMode) ou _TABIFYCOL(Q01; Values; s\u00e9lection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"TABIFYCOL"},{"location":"Fonctions/TABIFYCOL1/#tabifycol","text":"","title":"TABIFYCOL"},{"location":"Fonctions/TABIFYCOL1/#fonction-tabifycol","text":"La fonction TABIFYCOL indente des items du libell\u00e9 Colonnes de la variable trait\u00e9e.","title":"Fonction TABIFYCOL"},{"location":"Fonctions/TABIFYCOL1/#syntaxe","text":"Q01.TABIFYCOL(Values; s\u00e9lection; ReplaceMode) ou _TABIFYCOL(Q01; Values; s\u00e9lection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TABIFYROW1/","text":"TABIFYROW Fonction TABIFYROW La fonction TABIFYROW indente des items du libell\u00e9 Lignes de la variable trait\u00e9e. Syntaxe : Q01.TABIFYROW(Values; Selection; ReplaceMode) ou _TABIFYROW(Q01; Values; Selection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"TABIFYROW"},{"location":"Fonctions/TABIFYROW1/#tabifyrow","text":"","title":"TABIFYROW"},{"location":"Fonctions/TABIFYROW1/#fonction-tabifyrow","text":"La fonction TABIFYROW indente des items du libell\u00e9 Lignes de la variable trait\u00e9e.","title":"Fonction TABIFYROW"},{"location":"Fonctions/TABIFYROW1/#syntaxe","text":"Q01.TABIFYROW(Values; Selection; ReplaceMode) ou _TABIFYROW(Q01; Values; Selection; ReplaceMode) **Nom ** **Type ** Description Remarque 1 Values Liste d'entiers Valeur de l'indentation (n\u00e9gatif possible) Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions \u00e0 modifier NUL par d\u00e9faut 3 ReplaceMode Bool\u00e9en Fixe si TRUE Ajoute aux indentations existantes si FALSE FALSE par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TABMOD/","text":"TABMOD Fonction TABMOD La fonction TABMOD applique une table de recodification externe \u00e0 une variable. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. Cette fonction joue un r\u00f4le particulier car elle permet de r\u00e9aliser toutes les op\u00e9rations courantes sur les modalit\u00e9s (extractions, groupements...) par analyse du contenu de fichiers texte, au format CSV. La d\u00e9finition est ainsi ind\u00e9pendante des \u00e9tudes et peut \u00eatre utilis\u00e9e dans des vagues successives, avec des mises \u00e0 jour qui seront prises en compte automatiquement en cas d'absence de stockage de la variable. Le r\u00e9sultat est toujours une variable logique, multi-r\u00e9ponses ou discr\u00e8te. La variable trait\u00e9e peut \u00eatre num\u00e9rique ou logique. Si la variable est num\u00e9rique, les codes indiqu\u00e9s repr\u00e9sentent les valeurs num\u00e9riques \u00e0 utiliser et ne sont pas forc\u00e9ment pr\u00e9sentes dans les donn\u00e9es. Si la variable est logique, les codes indiqu\u00e9s correspondent \u00e0 des modalit\u00e9s et doivent \u00eatre disponibles, donc au plus \u00e9gaux au nombre de modalit\u00e9s. La valeur z\u00e9ro (0), est autoris\u00e9e pour g\u00e9n\u00e9rer des modalit\u00e9s vides. Les colonnes de la table lue suivent la structure d\u00e9crite ci-apr\u00e8s. La colonne CODE contient les n \u00b0 de modalit\u00e9s \u00e0 regrouper sur une m\u00eame ligne. Il s'agit d'une simple liste. . 17 La modalit\u00e9 correspond aux occurrences du code 17 . 17 19 La modalit\u00e9 correspond aux occurrences des codes 17 ou 19 . 17 TO 21 La modalit\u00e9 correspond aux occurrences des codes 17, 18, 19, 20 ou 21 La colonne des libell\u00e9s indique les textes (forc\u00e9s) ou non (reprise du libell\u00e9 initial). Pour r\u00e9cup\u00e9rer un libell\u00e9 initial, mettre un \"#\". Si l'\u00e9tude comporte plusieurs langues, l\u2019intitul\u00e9 de la colonne est compl\u00e9t\u00e9 par le code international de la langue, entre parenth\u00e8ses. Exemple : LONG(FR), SHORT(GB). L'insertion de sous-titres est autoris\u00e9e. Dans ce cas, seule les colonnes de libell\u00e9s sont remplies. Le nombre de \"\\&\" qui hi\u00e9rarchise les sous-titres doit \u00eatre respect\u00e9. Les fonctions TABCOL et TABROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Syntaxe : Q01.TABMOD(TableExpression; Indentation) ou _TABMOD(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Indentation Caract\u00e8re ESPACE par d\u00e9faut Exemples : _TABMOD(Q02A; \"COUNTRIES\") Retourne une variable qui est le r\u00e9sultat de l'application de la table de recodification \u00e0 la variable Q02A. Remarques : La fonction TABMOD supprime les espaces en fin de libell\u00e9s. Voir aussi : Utilitaires \\& divers","title":"TABMOD"},{"location":"Fonctions/TABMOD/#tabmod","text":"","title":"TABMOD"},{"location":"Fonctions/TABMOD/#fonction-tabmod","text":"La fonction TABMOD applique une table de recodification externe \u00e0 une variable. Le nom de la table est indiqu\u00e9e par une cha\u00eene de caract\u00e8re, selon le principe de rep\u00e9rage des tables externes. Cette fonction joue un r\u00f4le particulier car elle permet de r\u00e9aliser toutes les op\u00e9rations courantes sur les modalit\u00e9s (extractions, groupements...) par analyse du contenu de fichiers texte, au format CSV. La d\u00e9finition est ainsi ind\u00e9pendante des \u00e9tudes et peut \u00eatre utilis\u00e9e dans des vagues successives, avec des mises \u00e0 jour qui seront prises en compte automatiquement en cas d'absence de stockage de la variable. Le r\u00e9sultat est toujours une variable logique, multi-r\u00e9ponses ou discr\u00e8te. La variable trait\u00e9e peut \u00eatre num\u00e9rique ou logique. Si la variable est num\u00e9rique, les codes indiqu\u00e9s repr\u00e9sentent les valeurs num\u00e9riques \u00e0 utiliser et ne sont pas forc\u00e9ment pr\u00e9sentes dans les donn\u00e9es. Si la variable est logique, les codes indiqu\u00e9s correspondent \u00e0 des modalit\u00e9s et doivent \u00eatre disponibles, donc au plus \u00e9gaux au nombre de modalit\u00e9s. La valeur z\u00e9ro (0), est autoris\u00e9e pour g\u00e9n\u00e9rer des modalit\u00e9s vides. Les colonnes de la table lue suivent la structure d\u00e9crite ci-apr\u00e8s. La colonne CODE contient les n \u00b0 de modalit\u00e9s \u00e0 regrouper sur une m\u00eame ligne. Il s'agit d'une simple liste. . 17 La modalit\u00e9 correspond aux occurrences du code 17 . 17 19 La modalit\u00e9 correspond aux occurrences des codes 17 ou 19 . 17 TO 21 La modalit\u00e9 correspond aux occurrences des codes 17, 18, 19, 20 ou 21 La colonne des libell\u00e9s indique les textes (forc\u00e9s) ou non (reprise du libell\u00e9 initial). Pour r\u00e9cup\u00e9rer un libell\u00e9 initial, mettre un \"#\". Si l'\u00e9tude comporte plusieurs langues, l\u2019intitul\u00e9 de la colonne est compl\u00e9t\u00e9 par le code international de la langue, entre parenth\u00e8ses. Exemple : LONG(FR), SHORT(GB). L'insertion de sous-titres est autoris\u00e9e. Dans ce cas, seule les colonnes de libell\u00e9s sont remplies. Le nombre de \"\\&\" qui hi\u00e9rarchise les sous-titres doit \u00eatre respect\u00e9. Les fonctions TABCOL et TABROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source.","title":"Fonction TABMOD"},{"location":"Fonctions/TABMOD/#syntaxe","text":"Q01.TABMOD(TableExpression; Indentation) ou _TABMOD(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Indentation Caract\u00e8re ESPACE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TABMOD/#exemples","text":"_TABMOD(Q02A; \"COUNTRIES\") Retourne une variable qui est le r\u00e9sultat de l'application de la table de recodification \u00e0 la variable Q02A.","title":"Exemples :"},{"location":"Fonctions/TABMOD/#remarques","text":"La fonction TABMOD supprime les espaces en fin de libell\u00e9s. Voir aussi : Utilitaires \\& divers","title":"Remarques :"},{"location":"Fonctions/TABROW1/","text":"TABROW Fonction TABROW La fonction TABROW applique une table de recodification externe aux lignes d'une variable. (cf TABMOD ) Syntaxe : Q01.TABROW(TableExpression; Indentation) ou _TABROW(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Indentation Caract\u00e8re Caract\u00e8re d'indentation ESPACE par d\u00e9faut Voir aussi : Utilitaires \\& divers","title":"TABROW"},{"location":"Fonctions/TABROW1/#tabrow","text":"","title":"TABROW"},{"location":"Fonctions/TABROW1/#fonction-tabrow","text":"La fonction TABROW applique une table de recodification externe aux lignes d'une variable. (cf TABMOD )","title":"Fonction TABROW"},{"location":"Fonctions/TABROW1/#syntaxe","text":"Q01.TABROW(TableExpression; Indentation) ou _TABROW(Q01; TableExpression; Indentation) **Nom ** **Type ** Description Remarque 1 TableExpression Cha\u00eene de caract\u00e8res Table descriptive des codes Obligatoire 2 Indentation Caract\u00e8re Caract\u00e8re d'indentation ESPACE par d\u00e9faut Voir aussi : Utilitaires \\& divers","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TICK1/","text":"TICK Fonction TICK La fonction TICK construit une variable num\u00e9rique retournant le nombre de TICKS \u00e9coul\u00e9s depuis le 1er janvier 1 \u00e0 00:00:00 (calendrier gr\u00e9gorien) et la date de la variable temporelle plac\u00e9e en argument. 1 tick = 100 nanosecondes Syntaxe : Q01.TICK(NaValue) ou _TICK(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut Exemples : DATES.TICK() D\u00e9code la variable temporelle DATES et retourne le nombre de ticks \u00e9coul\u00e9s. Il s'est \u00e9coul\u00e9 600077939360170000 ticks entre le 1er janvier 1 et le 29 juillet 1902 \u00e0 15:38:56 Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"TICK"},{"location":"Fonctions/TICK1/#tick","text":"","title":"TICK"},{"location":"Fonctions/TICK1/#fonction-tick","text":"La fonction TICK construit une variable num\u00e9rique retournant le nombre de TICKS \u00e9coul\u00e9s depuis le 1er janvier 1 \u00e0 00:00:00 (calendrier gr\u00e9gorien) et la date de la variable temporelle plac\u00e9e en argument. 1 tick = 100 nanosecondes","title":"Fonction TICK"},{"location":"Fonctions/TICK1/#syntaxe","text":"Q01.TICK(NaValue) ou _TICK(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Nombre invalide par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TICK1/#exemples","text":"DATES.TICK() D\u00e9code la variable temporelle DATES et retourne le nombre de ticks \u00e9coul\u00e9s. Il s'est \u00e9coul\u00e9 600077939360170000 ticks entre le 1er janvier 1 et le 29 juillet 1902 \u00e0 15:38:56 Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/TICKS1/","text":"TICKS Fonction TICKS La fonction TICKS convertit une variable de dur\u00e9e en nombre de ticks. 1 tick = 100 nanosecondes Syntaxe : Q01.TICKS(TotalCount; NaValue) ou _TICKS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimale possible) Si FALSE, extrait simplement la composante TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut Exemples : Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"TICKS"},{"location":"Fonctions/TICKS1/#ticks","text":"","title":"TICKS"},{"location":"Fonctions/TICKS1/#fonction-ticks","text":"La fonction TICKS convertit une variable de dur\u00e9e en nombre de ticks. 1 tick = 100 nanosecondes","title":"Fonction TICKS"},{"location":"Fonctions/TICKS1/#syntaxe","text":"Q01.TICKS(TotalCount; NaValue) ou _TICKS(Q01; TotalCount; NaValue) **Nom ** **Type ** Description Remarque 1 TotalCount Bool\u00e9en Si TRUE, comptabilise la dur\u00e9e compl\u00e8te (nombre d\u00e9cimale possible) Si FALSE, extrait simplement la composante TRUE par d\u00e9faut 2 NaValue Nombre Valeur \u00e0 utiliser pour les sans r\u00e9ponses Sans r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TICKS1/#exemples","text":"Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/TIME1/","text":"TIME Fonction TIME La fonction TIME cr\u00e9e une variable temporelle bas\u00e9e sur une heure constante et sur un niveau statistique donn\u00e9. Syntaxe : Q01.TIME(LevelName; Hour; Minute; Second; Millisecond) ou _TIME(Q01; LevelName; Hour; Minute; Second; Millisecond) **Nom ** **Type ** Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau statistique \u00e0 utiliser Obligatoire 2 Hour Entier Heure 0 par d\u00e9faut 3 Minute Entier Minute 0 par d\u00e9faut 4 Second Entier Seconde 0 par d\u00e9faut 5 Millisecond Entier Millisecondes 0 par d\u00e9faut Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"TIME"},{"location":"Fonctions/TIME1/#time","text":"","title":"TIME"},{"location":"Fonctions/TIME1/#fonction-time","text":"La fonction TIME cr\u00e9e une variable temporelle bas\u00e9e sur une heure constante et sur un niveau statistique donn\u00e9.","title":"Fonction TIME"},{"location":"Fonctions/TIME1/#syntaxe","text":"Q01.TIME(LevelName; Hour; Minute; Second; Millisecond) ou _TIME(Q01; LevelName; Hour; Minute; Second; Millisecond) **Nom ** **Type ** Description Remarque 1 LevelName Cha\u00eene de caract\u00e8res Nom du niveau statistique \u00e0 utiliser Obligatoire 2 Hour Entier Heure 0 par d\u00e9faut 3 Minute Entier Minute 0 par d\u00e9faut 4 Second Entier Seconde 0 par d\u00e9faut 5 Millisecond Entier Millisecondes 0 par d\u00e9faut Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TIMESPAN1/","text":"TIMESPAN Fonction TIMESPAN La fonction TIMESPAN cr\u00e9e une variable de dur\u00e9e constante sur un niveau statistique donn\u00e9. Syntaxe : Q01.TIMESPAN(Level; Days; Hours; Minutes; Seconds; Milliseconds) ou _TIMESPAN(Q01; Level; Days; Hours; Minutes; Seconds; Milliseconds) Nom Type Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau statistiques \u00e0 utiliser Obligatoire 2 Days Entier Nombre de jours 0 par d\u00e9faut 3 Hours Entier Nombre d'heures 0 par d\u00e9faut 4 Minutes Entier Nombre de minutes 0 par d\u00e9faut 5 Seconds Entier Nombre de secondes 0 par d\u00e9faut 6 Milliseconds Entier Nombre de millisecondes 0 par d\u00e9faut Remarques : Le r\u00e9sultat est une dur\u00e9e qui repr\u00e9sente la somme de ces composantes. Cette dur\u00e9e pourra par exemple \u00eatre ajout\u00e9e ou soustraite \u00e0 une date (pour cr\u00e9er un intervalle de temps) ou \u00e0 une autre dur\u00e9e. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"TIMESPAN"},{"location":"Fonctions/TIMESPAN1/#timespan","text":"","title":"TIMESPAN"},{"location":"Fonctions/TIMESPAN1/#fonction-timespan","text":"La fonction TIMESPAN cr\u00e9e une variable de dur\u00e9e constante sur un niveau statistique donn\u00e9.","title":"Fonction TIMESPAN"},{"location":"Fonctions/TIMESPAN1/#syntaxe","text":"Q01.TIMESPAN(Level; Days; Hours; Minutes; Seconds; Milliseconds) ou _TIMESPAN(Q01; Level; Days; Hours; Minutes; Seconds; Milliseconds) Nom Type Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau statistiques \u00e0 utiliser Obligatoire 2 Days Entier Nombre de jours 0 par d\u00e9faut 3 Hours Entier Nombre d'heures 0 par d\u00e9faut 4 Minutes Entier Nombre de minutes 0 par d\u00e9faut 5 Seconds Entier Nombre de secondes 0 par d\u00e9faut 6 Milliseconds Entier Nombre de millisecondes 0 par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TIMESPAN1/#remarques","text":"Le r\u00e9sultat est une dur\u00e9e qui repr\u00e9sente la somme de ces composantes. Cette dur\u00e9e pourra par exemple \u00eatre ajout\u00e9e ou soustraite \u00e0 une date (pour cr\u00e9er un intervalle de temps) ou \u00e0 une autre dur\u00e9e. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Remarques :"},{"location":"Fonctions/TIT2NET1/","text":"TIT2NET Fonction TIT2NET La fonction TIT2NET convertit automatiquement les sous-titres en sous-totaux. Les sous-titres agissent comme des \"t\u00eates de chapitres\" dans les dimensions des variables (modalit\u00e9s, d\u00e9tails, etc.). Apr\u00e8s application, chaque sous-titre devient un regroupement de modalit\u00e9s, mais conserve le m\u00eame niveau hi\u00e9rarchique en termes de pr\u00e9sentation. Syntaxe : Q01.TIT2NET(True;1;1) ou _TIT2NET(Q01;True;1;1) **Nom ** **Type ** Description Remarque Divisor Bool\u00e9en Si TRUE, modifie le diviseur pour que les bases soient les sous-totaux cr\u00e9\u00e9s. par d\u00e9faut False, pas de diviseur LevelUsed Num\u00e9rique Niveau de sous-titre \u00e0 partir duquel commencer \u00e0 cr\u00e9er les sous-totaux StandardBase Num\u00e9rique Si 0, alos la base standard est lla base de la variable. Si 1, les sous-totaux de niveau 1 sont des bases \u00e0 part enti\u00e8re, etc. Exemples : S1.TIT2NET() Dans la variable r\u00e9sultante, les sous-titres sont \"remplac\u00e9s\" par des sous-totaux. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"TIT2NET"},{"location":"Fonctions/TIT2NET1/#tit2net","text":"","title":"TIT2NET"},{"location":"Fonctions/TIT2NET1/#fonction-tit2net","text":"La fonction TIT2NET convertit automatiquement les sous-titres en sous-totaux. Les sous-titres agissent comme des \"t\u00eates de chapitres\" dans les dimensions des variables (modalit\u00e9s, d\u00e9tails, etc.). Apr\u00e8s application, chaque sous-titre devient un regroupement de modalit\u00e9s, mais conserve le m\u00eame niveau hi\u00e9rarchique en termes de pr\u00e9sentation.","title":"Fonction TIT2NET"},{"location":"Fonctions/TIT2NET1/#syntaxe","text":"Q01.TIT2NET(True;1;1) ou _TIT2NET(Q01;True;1;1) **Nom ** **Type ** Description Remarque Divisor Bool\u00e9en Si TRUE, modifie le diviseur pour que les bases soient les sous-totaux cr\u00e9\u00e9s. par d\u00e9faut False, pas de diviseur LevelUsed Num\u00e9rique Niveau de sous-titre \u00e0 partir duquel commencer \u00e0 cr\u00e9er les sous-totaux StandardBase Num\u00e9rique Si 0, alos la base standard est lla base de la variable. Si 1, les sous-totaux de niveau 1 sont des bases \u00e0 part enti\u00e8re, etc.","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TIT2NET1/#exemples","text":"S1.TIT2NET() Dans la variable r\u00e9sultante, les sous-titres sont \"remplac\u00e9s\" par des sous-totaux. Voir aussi : Traiter les variables logiques (modalit\u00e9s)","title":"Exemples :"},{"location":"Fonctions/TITLE1/","text":"TITLE Fonction TITLE La fonction TITLE modifie le titre de la variable pass\u00e9e en argument. Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au titre de la variable en entr\u00e9e. Pour plus d'informations, aller voir la section sur les \"Traitements textuels\" Syntaxe : Q01.TITLE(Expression) ou _TITLE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res Obligatoire Remarques : La fonction TITLE conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine Exemples : S2.TITLE(\"Age\") S2.TITLE(\"=TRIM, UPPER\") S2.TITLE(\"=UPPER(@VALUE)\") Voir aussi : Propri\u00e9t\u00e9s des variables","title":"TITLE"},{"location":"Fonctions/TITLE1/#title","text":"","title":"TITLE"},{"location":"Fonctions/TITLE1/#fonction-title","text":"La fonction TITLE modifie le titre de la variable pass\u00e9e en argument. Il est possible de pr\u00e9fixer la valeur par le signe \"=\" pour utiliser une fonction de traitement appliqu\u00e9e au titre de la variable en entr\u00e9e. Pour plus d'informations, aller voir la section sur les \"Traitements textuels\"","title":"Fonction TITLE"},{"location":"Fonctions/TITLE1/#syntaxe","text":"Q01.TITLE(Expression) ou _TITLE(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Cha\u00eene de caract\u00e8res Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TITLE1/#remarques","text":"La fonction TITLE conserve toutes les autres propri\u00e9t\u00e9s de la variable d'origine","title":"Remarques :"},{"location":"Fonctions/TITLE1/#exemples","text":"S2.TITLE(\"Age\") S2.TITLE(\"=TRIM, UPPER\") S2.TITLE(\"=UPPER(@VALUE)\") Voir aussi : Propri\u00e9t\u00e9s des variables","title":"Exemples :"},{"location":"Fonctions/TITLEIZE1/","text":"TITLEIZE Fonction TITLEIZE La fonction TITLEIZE passe tous les caract\u00e8res d'une variable litt\u00e9rale en minuscules \u00e0 l'exception du premier caract\u00e8re qui passe en majuscule. Syntaxe : Q01.TITLEIZE() ou _TITLEIZE(Q01) S'applique \u00e0 une variable litt\u00e9rale. Voir aussi : Gestion des libell\u00e9s","title":"TITLEIZE"},{"location":"Fonctions/TITLEIZE1/#titleize","text":"","title":"TITLEIZE"},{"location":"Fonctions/TITLEIZE1/#fonction-titleize","text":"La fonction TITLEIZE passe tous les caract\u00e8res d'une variable litt\u00e9rale en minuscules \u00e0 l'exception du premier caract\u00e8re qui passe en majuscule.","title":"Fonction TITLEIZE"},{"location":"Fonctions/TITLEIZE1/#syntaxe","text":"Q01.TITLEIZE() ou _TITLEIZE(Q01) S'applique \u00e0 une variable litt\u00e9rale. Voir aussi : Gestion des libell\u00e9s","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TITMOD1/","text":"TITMOD Fonction TITMOD La fonction TITMOD s'applique \u00e0 un filtre (une variable \u00e0 une modalit\u00e9) et inverse son titre et l'intitul\u00e9 de la modalit\u00e9. Syntaxe : Q01.TITMOD() ou _TITMOD(Q01) Voir aussi : Univers de variables Propri\u00e9t\u00e9s des variables","title":"TITMOD"},{"location":"Fonctions/TITMOD1/#titmod","text":"","title":"TITMOD"},{"location":"Fonctions/TITMOD1/#fonction-titmod","text":"La fonction TITMOD s'applique \u00e0 un filtre (une variable \u00e0 une modalit\u00e9) et inverse son titre et l'intitul\u00e9 de la modalit\u00e9.","title":"Fonction TITMOD"},{"location":"Fonctions/TITMOD1/#syntaxe","text":"Q01.TITMOD() ou _TITMOD(Q01) Voir aussi : Univers de variables Propri\u00e9t\u00e9s des variables","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TODATE1/","text":"TODATE Fonction TODATE La fonction TODATE construit une variable temporelle (date/heure) depuis une variable textuelle ou continue (nombre de jours depuis le 1/1/1900). Si la variable est textuelle, il faut indiquer une liste de masques de lecture. ATTENTION, une variable temporelle DATE ne doit pas \u00eatre utilis\u00e9e directement dans un tableau, il faut la convertir au pr\u00e9alabe en lui appliquant par exemple la fonction DTOT(). Arguments La liste d'arguments correspond aux diff\u00e9rents masques de lectures possibles. Un masque d\u00e9crit la date/heure \u00e0 lire sous la forme d'une cha\u00eene de caract\u00e8res compos\u00e9e des caract\u00e8res suivants : y Ann\u00e9e M Mois d Jours H Heures m Minutes s Secondes f Fractions de seconde Attention ! dans l'expression du format, la casse est importante : respectez bien les majuscules et les minuscules ! Valeur de retour Une variable temporelle dont les dates correspondent au d\u00e9codage de la variable litt\u00e9rale selon les diff\u00e9rents formats list\u00e9s. Les valeurs qui ne correspondent pas \u00e0 un format iront en sans-r\u00e9ponses. Syntaxe : Q01.TODATE(Formats; FormatDelimiter; DefaultValue) ou _TODATE(Q01; Formats; FormatDelimiter; DefaultValue) **Nom ** **Type ** Description Remarque 1 Formats Cha\u00eene de caract\u00e8res Format de lecture NUL par d\u00e9faut 2 FormatDelimiter Cha\u00eene de caract\u00e8res S\u00e9parateur NUL par d\u00e9faut 3 DefaultValue Cha\u00eene de caract\u00e8res Valeur des sans-r\u00e9ponse NUL par d\u00e9faut Exemples : DATES.TODATE(\"d/M/yyyy\") D\u00e9code la variable litt\u00e9rale DATES et lit les jours, les mois et les ann\u00e9es pour des saisies telles que 12/1/2016 et 12/11/2016. DATEC.TODATE() D\u00e9code la variable continue DATEC TIMES.TODATE(\"yyyy-MM-dd HH:mm:ss,fff\") D\u00e9code la variable litt\u00e9rale TIMES et lit les ann\u00e9es, les mois, les jours, les heures, les minutes, les secondes et les fraction de secondes telles que rencontr\u00e9es dans \"2016-11-29 16:49:52,531\". Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"TODATE"},{"location":"Fonctions/TODATE1/#todate","text":"","title":"TODATE"},{"location":"Fonctions/TODATE1/#fonction-todate","text":"La fonction TODATE construit une variable temporelle (date/heure) depuis une variable textuelle ou continue (nombre de jours depuis le 1/1/1900). Si la variable est textuelle, il faut indiquer une liste de masques de lecture. ATTENTION, une variable temporelle DATE ne doit pas \u00eatre utilis\u00e9e directement dans un tableau, il faut la convertir au pr\u00e9alabe en lui appliquant par exemple la fonction DTOT(). Arguments La liste d'arguments correspond aux diff\u00e9rents masques de lectures possibles. Un masque d\u00e9crit la date/heure \u00e0 lire sous la forme d'une cha\u00eene de caract\u00e8res compos\u00e9e des caract\u00e8res suivants : y Ann\u00e9e M Mois d Jours H Heures m Minutes s Secondes f Fractions de seconde Attention ! dans l'expression du format, la casse est importante : respectez bien les majuscules et les minuscules ! Valeur de retour Une variable temporelle dont les dates correspondent au d\u00e9codage de la variable litt\u00e9rale selon les diff\u00e9rents formats list\u00e9s. Les valeurs qui ne correspondent pas \u00e0 un format iront en sans-r\u00e9ponses.","title":"Fonction TODATE"},{"location":"Fonctions/TODATE1/#syntaxe","text":"Q01.TODATE(Formats; FormatDelimiter; DefaultValue) ou _TODATE(Q01; Formats; FormatDelimiter; DefaultValue) **Nom ** **Type ** Description Remarque 1 Formats Cha\u00eene de caract\u00e8res Format de lecture NUL par d\u00e9faut 2 FormatDelimiter Cha\u00eene de caract\u00e8res S\u00e9parateur NUL par d\u00e9faut 3 DefaultValue Cha\u00eene de caract\u00e8res Valeur des sans-r\u00e9ponse NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TODATE1/#exemples","text":"DATES.TODATE(\"d/M/yyyy\") D\u00e9code la variable litt\u00e9rale DATES et lit les jours, les mois et les ann\u00e9es pour des saisies telles que 12/1/2016 et 12/11/2016. DATEC.TODATE() D\u00e9code la variable continue DATEC TIMES.TODATE(\"yyyy-MM-dd HH:mm:ss,fff\") D\u00e9code la variable litt\u00e9rale TIMES et lit les ann\u00e9es, les mois, les jours, les heures, les minutes, les secondes et les fraction de secondes telles que rencontr\u00e9es dans \"2016-11-29 16:49:52,531\". Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"},{"location":"Fonctions/TODO1/","text":"TODO Fonction TODO La fonction TODO cr\u00e9e une variable \"erreur\" qui affiche le message sp\u00e9cifi\u00e9 en argument. Pratique pour laisser des m\u00e9mos sur les choses \u00e0 faire ! Syntaxe : _TODO(Message) **Nom ** **Type ** Description Remarque Message Cha\u00eene de caract\u00e8res commentaire Obligatoire Remarques : Le r\u00e9sultat de la fonction TODO est une variable invalide \u00e0 laquelle on ne peut appliquer aucune autre fonction. Exemples : _TODO(\"En attente des objectifs de redressement\") Voir aussi : Fonctions avanc\u00e9es Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...) Utilitaires \\& divers","title":"TODO"},{"location":"Fonctions/TODO1/#todo","text":"","title":"TODO"},{"location":"Fonctions/TODO1/#fonction-todo","text":"La fonction TODO cr\u00e9e une variable \"erreur\" qui affiche le message sp\u00e9cifi\u00e9 en argument. Pratique pour laisser des m\u00e9mos sur les choses \u00e0 faire !","title":"Fonction TODO"},{"location":"Fonctions/TODO1/#syntaxe","text":"_TODO(Message) **Nom ** **Type ** Description Remarque Message Cha\u00eene de caract\u00e8res commentaire Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TODO1/#remarques","text":"Le r\u00e9sultat de la fonction TODO est une variable invalide \u00e0 laquelle on ne peut appliquer aucune autre fonction.","title":"Remarques :"},{"location":"Fonctions/TODO1/#exemples","text":"_TODO(\"En attente des objectifs de redressement\") Voir aussi : Fonctions avanc\u00e9es Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...) Utilitaires \\& divers","title":"Exemples :"},{"location":"Fonctions/TOGGLE1/","text":"TOGGLE Fonction TOGGLE La fonction TOGGLE inverse les modalit\u00e9s et les colonnes d'une variable. D'une certaine fa\u00e7on, chaque modalit\u00e9 devient ainsi une base potentielle pour une construction ou une ventilation ult\u00e9rieure. Syntaxe : Q01.TOGGLE() ou _TOGGLE(Q01) Exemples : S1.TOGGLE() La variable qui en r\u00e9sulte dispose les colonnes de la variable d'origine en modalit\u00e9s et inversement. C'est une fa\u00e7on d'obtenir un filtre dimensionn\u00e9. Voir aussi : Gestion des dimensions","title":"TOGGLE"},{"location":"Fonctions/TOGGLE1/#toggle","text":"","title":"TOGGLE"},{"location":"Fonctions/TOGGLE1/#fonction-toggle","text":"La fonction TOGGLE inverse les modalit\u00e9s et les colonnes d'une variable. D'une certaine fa\u00e7on, chaque modalit\u00e9 devient ainsi une base potentielle pour une construction ou une ventilation ult\u00e9rieure.","title":"Fonction TOGGLE"},{"location":"Fonctions/TOGGLE1/#syntaxe","text":"Q01.TOGGLE() ou _TOGGLE(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TOGGLE1/#exemples","text":"S1.TOGGLE() La variable qui en r\u00e9sulte dispose les colonnes de la variable d'origine en modalit\u00e9s et inversement. C'est une fa\u00e7on d'obtenir un filtre dimensionn\u00e9. Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/TOMOD1/","text":"TOMOD Fonction TOMOD La fonction TOMOD est une consigne qui permet de repr\u00e9senter une variable num\u00e9rique sous forme de modalit\u00e9 et d'en contr\u00f4ler le calcul affich\u00e9. Cette fonction est tr\u00e8s utile pour le traitement des \u00e9chelles ou des multi-r\u00e9ponses pour lesquelles on souhaite ajouter un nombre moyen ou un \u00e9cart-type (etc.). Attention : Ne pas utiliser cette fonction sur une variable dimensionn\u00e9e. Syntaxe : Q01.TOMOD(Calculations; Label; PreserveTitle) ou _TOMOD(Q01; Calculations; Label; PreserveTitle) **Nom ** **Type ** Description Remarque 1 Calculations Cha\u00eene de caract\u00e8res Liste des calculs \u00e0 appliquer s\u00e9par\u00e9s par des ',' ou des ',,' NUL par d\u00e9faut 2 Label Cha\u00eene de caract\u00e8res Libell\u00e9 de la modalit\u00e9 NUL par d\u00e9faut 3 PreserveTitle Bool\u00e9en Si TRUE, cr\u00e9e un sous-titre qui correspond au titre de la variable trait\u00e9e FALSE par d\u00e9faut Remarques : Attention, TOMOD est une consigne : elle est \u00e9valu\u00e9e dynamiquement lors du calcul des tableaux (comme RECAP). Pour ajouter l'affichage des tests de significativit\u00e9 dans les tableaux, utilisez le nom de calcul TESTQ1 (TEST statistique appliqu\u00e9 au Quantit\u00e9s). Si le contr\u00f4le du calcul affich\u00e9 n'est pas n\u00e9cessaire, il est pr\u00e9f\u00e9rable d'utiliser la fonction JUXVAR . La m\u00e9thode Q01.MOD($M $Q) est plus g\u00e9n\u00e9ralisable en particulier pour les variables dimensionn\u00e9es. Exemples : _JUXVAR(Q1; Q1Q.TOMOD(\"MEAN,,TESTQ1\"; \"Moyenne et test\") Voir aussi : S\u00e9lection \"\u00e9tendue\" de modalit\u00e9s/d\u00e9tails Liste des calculs standards Utilitaires \\& divers Pr\u00e9senter les variables dans les tableaux","title":"TOMOD"},{"location":"Fonctions/TOMOD1/#tomod","text":"","title":"TOMOD"},{"location":"Fonctions/TOMOD1/#fonction-tomod","text":"La fonction TOMOD est une consigne qui permet de repr\u00e9senter une variable num\u00e9rique sous forme de modalit\u00e9 et d'en contr\u00f4ler le calcul affich\u00e9. Cette fonction est tr\u00e8s utile pour le traitement des \u00e9chelles ou des multi-r\u00e9ponses pour lesquelles on souhaite ajouter un nombre moyen ou un \u00e9cart-type (etc.).","title":"Fonction TOMOD"},{"location":"Fonctions/TOMOD1/#attention-ne-pas-utiliser-cette-fonction-sur-une-variable-dimensionnee","text":"","title":"Attention : Ne pas utiliser cette fonction sur une variable dimensionn\u00e9e."},{"location":"Fonctions/TOMOD1/#syntaxe","text":"Q01.TOMOD(Calculations; Label; PreserveTitle) ou _TOMOD(Q01; Calculations; Label; PreserveTitle) **Nom ** **Type ** Description Remarque 1 Calculations Cha\u00eene de caract\u00e8res Liste des calculs \u00e0 appliquer s\u00e9par\u00e9s par des ',' ou des ',,' NUL par d\u00e9faut 2 Label Cha\u00eene de caract\u00e8res Libell\u00e9 de la modalit\u00e9 NUL par d\u00e9faut 3 PreserveTitle Bool\u00e9en Si TRUE, cr\u00e9e un sous-titre qui correspond au titre de la variable trait\u00e9e FALSE par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TOMOD1/#remarques","text":"Attention, TOMOD est une consigne : elle est \u00e9valu\u00e9e dynamiquement lors du calcul des tableaux (comme RECAP). Pour ajouter l'affichage des tests de significativit\u00e9 dans les tableaux, utilisez le nom de calcul TESTQ1 (TEST statistique appliqu\u00e9 au Quantit\u00e9s). Si le contr\u00f4le du calcul affich\u00e9 n'est pas n\u00e9cessaire, il est pr\u00e9f\u00e9rable d'utiliser la fonction JUXVAR . La m\u00e9thode Q01.MOD($M $Q) est plus g\u00e9n\u00e9ralisable en particulier pour les variables dimensionn\u00e9es.","title":"Remarques :"},{"location":"Fonctions/TOMOD1/#exemples","text":"_JUXVAR(Q1; Q1Q.TOMOD(\"MEAN,,TESTQ1\"; \"Moyenne et test\") Voir aussi : S\u00e9lection \"\u00e9tendue\" de modalit\u00e9s/d\u00e9tails Liste des calculs standards Utilitaires \\& divers Pr\u00e9senter les variables dans les tableaux","title":"Exemples :"},{"location":"Fonctions/TPROC1/","text":"TPROC Fonction TPROC La fonction TPROC applique un traitement textuel \u00e0 une variable litt\u00e9rale. Le r\u00e9sultat est une variable litt\u00e9rale apr\u00e8s application de ce traitement. Les variables non litt\u00e9rales sont automatiquement converties lors de l'appel. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifier dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0). Syntaxe : Q01.TPROC(Expression) ou _TPROC(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire Exemples : S1.TPROC(\"TRIM, UPPER\") Retourne une variable litt\u00e9rale pour laquelle les valeurs textuelles sont successivement d\u00e9barrass\u00e9es des blancs en d\u00e9but et en fin, puis pass\u00e9es en majuscules. S1.TPROC('UPPER(LEFT(@VALUE, 2)) \\& \" !\"') Retourne une variable litt\u00e9rale qui prend les 2 premiers caract\u00e8res des textes d'origine, les passe en majuscules, puis y ajoute un point d'exclamation. Il est possible d'extraire des sous-parties via la notion de \"plages\" telles que \"1..4\", \":1..\" etc. l est \u00e9galement possible de sp\u00e9cifier un traitement de cha\u00eene de caract\u00e8res dans les masques dynamiques, par exemple [NAME:3..] pour ignorer les 2 premiers caract\u00e8es de la valeur de l'annotation [NAME] Voici quelques exemples : Expression **Description ** Valeur exemple de [NAME] R\u00e9sultat Z_[NAME] Ajoute \"Z_\" avant la valeur de NAME Q1 Z_Q1 [NAME]_R Ajoute \"_R\" apr\u00e8s la valuer de NAME Q1 Q1_R [NAME:3..] Extrait les caract\u00e8res \u00e0 partir du 3e jusqu'\u00e0 la fin Z_Q1 Q1 [NAME:..-3] Extrait les caract\u00e8res du d\u00e9but jusqu'\u00e0 3caract\u00e8res avant la fin Q1_R Q1 TPROCMOD(\"TRIM|-4..-1|UPPER\") Utulise TRIM pour supprimer les espaces, extrait les 4 derniers caract\u00e8res et les met en majuscules DATA_EXMP EXMP Q01AD.TPROC(\"LOWER|1..4\") Convertit la ch\u00e2ine en minuscule, puis extrait les caract\u00e8res en positions 1 \u00e0 4 HELLO_WORD ello Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"TPROC"},{"location":"Fonctions/TPROC1/#tproc","text":"","title":"TPROC"},{"location":"Fonctions/TPROC1/#fonction-tproc","text":"La fonction TPROC applique un traitement textuel \u00e0 une variable litt\u00e9rale. Le r\u00e9sultat est une variable litt\u00e9rale apr\u00e8s application de ce traitement. Les variables non litt\u00e9rales sont automatiquement converties lors de l'appel. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifier dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0).","title":"Fonction TPROC"},{"location":"Fonctions/TPROC1/#syntaxe","text":"Q01.TPROC(Expression) ou _TPROC(Q01; Expression) **Nom ** **Type ** Description Remarque Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TPROC1/#exemples","text":"S1.TPROC(\"TRIM, UPPER\") Retourne une variable litt\u00e9rale pour laquelle les valeurs textuelles sont successivement d\u00e9barrass\u00e9es des blancs en d\u00e9but et en fin, puis pass\u00e9es en majuscules. S1.TPROC('UPPER(LEFT(@VALUE, 2)) \\& \" !\"') Retourne une variable litt\u00e9rale qui prend les 2 premiers caract\u00e8res des textes d'origine, les passe en majuscules, puis y ajoute un point d'exclamation. Il est possible d'extraire des sous-parties via la notion de \"plages\" telles que \"1..4\", \":1..\" etc. l est \u00e9galement possible de sp\u00e9cifier un traitement de cha\u00eene de caract\u00e8res dans les masques dynamiques, par exemple [NAME:3..] pour ignorer les 2 premiers caract\u00e8es de la valeur de l'annotation [NAME] Voici quelques exemples : Expression **Description ** Valeur exemple de [NAME] R\u00e9sultat Z_[NAME] Ajoute \"Z_\" avant la valeur de NAME Q1 Z_Q1 [NAME]_R Ajoute \"_R\" apr\u00e8s la valuer de NAME Q1 Q1_R [NAME:3..] Extrait les caract\u00e8res \u00e0 partir du 3e jusqu'\u00e0 la fin Z_Q1 Q1 [NAME:..-3] Extrait les caract\u00e8res du d\u00e9but jusqu'\u00e0 3caract\u00e8res avant la fin Q1_R Q1 TPROCMOD(\"TRIM|-4..-1|UPPER\") Utulise TRIM pour supprimer les espaces, extrait les 4 derniers caract\u00e8res et les met en majuscules DATA_EXMP EXMP Q01AD.TPROC(\"LOWER|1..4\") Convertit la ch\u00e2ine en minuscule, puis extrait les caract\u00e8res en positions 1 \u00e0 4 HELLO_WORD ello","title":"Exemples :"},{"location":"Fonctions/TPROC1/#_1","text":"Voir aussi : Traiter les variables litt\u00e9rales Gestion des libell\u00e9s","title":"&nbsp;"},{"location":"Fonctions/TPROCCOL1/","text":"TPROCCOL Fonction TPROCCOL La fonction TPROCCOL applique un traitement textuel aux colonnes d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0). Syntaxe : Q01.TPROCCOL(Expression; s\u00e9lection) ou _TPROCCOL(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions NUL par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"TPROCCOL"},{"location":"Fonctions/TPROCCOL1/#tproccol","text":"","title":"TPROCCOL"},{"location":"Fonctions/TPROCCOL1/#fonction-tproccol","text":"La fonction TPROCCOL applique un traitement textuel aux colonnes d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0).","title":"Fonction TPROCCOL"},{"location":"Fonctions/TPROCCOL1/#syntaxe","text":"Q01.TPROCCOL(Expression; s\u00e9lection) ou _TPROCCOL(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions NUL par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TPROCMOD1/","text":"TPROCMOD Fonction TPROCMOD La fonction TPROCMOD applique un traitement textuel aux modalit\u00e9s d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0). Les fonctions TPROCCOL et TPROCROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source. Syntaxe : Q01.TPROCMOD(Expression; s\u00e9lection) ou _TPROCMOD(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de cha\u00eenes de caract\u00e8res S\u00e9lection des positions NUL par d\u00e9faut Exemples : S1.TPROCMOD(\"TRIM, UPPER\") Retourne une variable logique dont les modalit\u00e9s sont successivement d\u00e9barrass\u00e9es des blancs en d\u00e9but et en fin, puis pass\u00e9es en majuscules. S1.TPROCMOD('UPPER(LEFT(@VALUE, 2)) \\& \" !\"') Retourne une variable logique qui prend pour modalit\u00e9s les 2 premiers caract\u00e8res des modalit\u00e9s d'origine, les passe en majuscules, puis y ajoute un point d'exclamation. Voir aussi : Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"TPROCMOD"},{"location":"Fonctions/TPROCMOD1/#tprocmod","text":"","title":"TPROCMOD"},{"location":"Fonctions/TPROCMOD1/#fonction-tprocmod","text":"La fonction TPROCMOD applique un traitement textuel aux modalit\u00e9s d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0). Les fonctions TPROCCOL et TPROCROW fonctionnent exactement sur le m\u00eame mode, mais la premi\u00e8re s'applique \u00e0 la dimension \"colonnes\" et la seconde \u00e0 la dimension \"lignes\" de la variable source.","title":"Fonction TPROCMOD"},{"location":"Fonctions/TPROCMOD1/#syntaxe","text":"Q01.TPROCMOD(Expression; s\u00e9lection) ou _TPROCMOD(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de cha\u00eenes de caract\u00e8res S\u00e9lection des positions NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TPROCMOD1/#exemples","text":"S1.TPROCMOD(\"TRIM, UPPER\") Retourne une variable logique dont les modalit\u00e9s sont successivement d\u00e9barrass\u00e9es des blancs en d\u00e9but et en fin, puis pass\u00e9es en majuscules. S1.TPROCMOD('UPPER(LEFT(@VALUE, 2)) \\& \" !\"') Retourne une variable logique qui prend pour modalit\u00e9s les 2 premiers caract\u00e8res des modalit\u00e9s d'origine, les passe en majuscules, puis y ajoute un point d'exclamation. Voir aussi : Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/TPROCROW1/","text":"TPROCROW Fonction TPROCROW La fonction TPROCROW applique un traitement textuel aux lignes d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0). Syntaxe : Q01.TPROCROW(Expression; s\u00e9lection) ou _TPROCROW(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions NUL par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"TPROCROW"},{"location":"Fonctions/TPROCROW1/#tprocrow","text":"","title":"TPROCROW"},{"location":"Fonctions/TPROCROW1/#fonction-tprocrow","text":"La fonction TPROCROW applique un traitement textuel aux lignes d'une variable logique. Les traitements \u00e0 op\u00e9rer sont sp\u00e9cifi\u00e9s dans l'argument sous la forme d'une cha\u00eene de caract\u00e8re et suivent les traitements disponibles dans le moteur de lecture de donn\u00e9es (champ 'PREPROCESS' des DATAMAP 2.0).","title":"Fonction TPROCROW"},{"location":"Fonctions/TPROCROW1/#syntaxe","text":"Q01.TPROCROW(Expression; s\u00e9lection) ou _TPROCROW(Q01; Expression; s\u00e9lection) **Nom ** **Type ** Description Remarque 1 Expression Cha\u00eene de caract\u00e8res Instruction de traitement Obligatoire 2 s\u00e9lection Liste de valeurs S\u00e9lection des positions NUL par d\u00e9faut Voir aussi : Gestion des dimensions Gestion des libell\u00e9s Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRIM1/","text":"TRIM Fonction TRIM La fonction TRIM supprime tous les caract\u00e8res blancs (option) en d\u00e9but et en fin des r\u00e9ponses \u00e0 une variable litt\u00e9rale. Syntaxe : Q01.TRIM(Characters) ou _TRIM(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"TRIM"},{"location":"Fonctions/TRIM1/#trim","text":"","title":"TRIM"},{"location":"Fonctions/TRIM1/#fonction-trim","text":"La fonction TRIM supprime tous les caract\u00e8res blancs (option) en d\u00e9but et en fin des r\u00e9ponses \u00e0 une variable litt\u00e9rale.","title":"Fonction TRIM"},{"location":"Fonctions/TRIM1/#syntaxe","text":"Q01.TRIM(Characters) ou _TRIM(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRIMDIM1/","text":"TRIMDIM Fonction TRIMDIM La fonction TRIMDIM supprime les dimensions qui n'ont qu'un seul item. Cas d'utilisation classique : Lorsqu'on \"extrait\" un d\u00e9tail d'une batterie d'items, la variable qui en r\u00e9sulte poss\u00e8de une dimension \u00e0 un d\u00e9tail. Il est fr\u00e9quent de souhaiter supprimer cette dimension (possiblement) superflue, et c'est exactement ce que fait la fonction TRIMDIM. Syntaxe : Q01.TRIMDIM() ou _TRIMDIM(Q01) Exemples : S1.TRIMDIM() La variable qui en r\u00e9sulte n'a plus de dimensions (si les dimensions de S1 ne comportent qu'un seul d\u00e9tail !). Voir aussi : Gestion des dimensions","title":"TRIMDIM"},{"location":"Fonctions/TRIMDIM1/#trimdim","text":"","title":"TRIMDIM"},{"location":"Fonctions/TRIMDIM1/#fonction-trimdim","text":"La fonction TRIMDIM supprime les dimensions qui n'ont qu'un seul item. Cas d'utilisation classique : Lorsqu'on \"extrait\" un d\u00e9tail d'une batterie d'items, la variable qui en r\u00e9sulte poss\u00e8de une dimension \u00e0 un d\u00e9tail. Il est fr\u00e9quent de souhaiter supprimer cette dimension (possiblement) superflue, et c'est exactement ce que fait la fonction TRIMDIM.","title":"Fonction TRIMDIM"},{"location":"Fonctions/TRIMDIM1/#syntaxe","text":"Q01.TRIMDIM() ou _TRIMDIM(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRIMDIM1/#exemples","text":"S1.TRIMDIM() La variable qui en r\u00e9sulte n'a plus de dimensions (si les dimensions de S1 ne comportent qu'un seul d\u00e9tail !). Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/TRIMEND1/","text":"TRIMEND Fonction TRIMEND La fonction TRIMEND supprime tous les caract\u00e8res blancs (option) en fin des r\u00e9ponses \u00e0 une variable litt\u00e9rale. Syntaxe : Q01.TRIMEND(Characters) ou _TRIMEND(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"TRIMEND"},{"location":"Fonctions/TRIMEND1/#trimend","text":"","title":"TRIMEND"},{"location":"Fonctions/TRIMEND1/#fonction-trimend","text":"La fonction TRIMEND supprime tous les caract\u00e8res blancs (option) en fin des r\u00e9ponses \u00e0 une variable litt\u00e9rale.","title":"Fonction TRIMEND"},{"location":"Fonctions/TRIMEND1/#syntaxe","text":"Q01.TRIMEND(Characters) ou _TRIMEND(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRIMSTART1/","text":"TRIMSTART Fonction TRIMSTART La fonction TRIMSTART supprime tous les caract\u00e8res blancs (option) au d\u00e9but des r\u00e9ponses \u00e0 une variable. Syntaxe : Q01.TRIMSTART(Characters) ou _TRIMSTART(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"TRIMSTART"},{"location":"Fonctions/TRIMSTART1/#trimstart","text":"","title":"TRIMSTART"},{"location":"Fonctions/TRIMSTART1/#fonction-trimstart","text":"La fonction TRIMSTART supprime tous les caract\u00e8res blancs (option) au d\u00e9but des r\u00e9ponses \u00e0 une variable.","title":"Fonction TRIMSTART"},{"location":"Fonctions/TRIMSTART1/#syntaxe","text":"Q01.TRIMSTART(Characters) ou _TRIMSTART(Q01; Characters) **Nom ** **Type ** Description Remarque Characters Cha\u00eene de caract\u00e8res Liste des caract\u00e8res \u00e0 supprimer Supprime les blancs par d\u00e9faut S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRSDIM1/","text":"TRSDIM Fonction TRSDIM La fonction TRSDIM (TRANSPOSE DIMENSION) \u00e9change les dimensions lignes et colonnes d'une variable. Syntaxe : Q01.TRSDIM() ou _TRSDIM(Q01) Remarques : Si la variable trait\u00e9e n'a qu'une seule dimension colonnes, le r\u00e9sultat comporte une dimension lignes et une dimension colonnes d'un \u00e9l\u00e9ment. Exemples : S1.TRSDIM() La dimension colonne de la variable qui en r\u00e9sulte correspond \u00e0 la dimension lignes de S1, et vice versa. Voir aussi : Gestion des dimensions","title":"TRSDIM"},{"location":"Fonctions/TRSDIM1/#trsdim","text":"","title":"TRSDIM"},{"location":"Fonctions/TRSDIM1/#fonction-trsdim","text":"La fonction TRSDIM (TRANSPOSE DIMENSION) \u00e9change les dimensions lignes et colonnes d'une variable.","title":"Fonction TRSDIM"},{"location":"Fonctions/TRSDIM1/#syntaxe","text":"Q01.TRSDIM() ou _TRSDIM(Q01)","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TRSDIM1/#remarques","text":"Si la variable trait\u00e9e n'a qu'une seule dimension colonnes, le r\u00e9sultat comporte une dimension lignes et une dimension colonnes d'un \u00e9l\u00e9ment.","title":"Remarques :"},{"location":"Fonctions/TRSDIM1/#exemples","text":"S1.TRSDIM() La dimension colonne de la variable qui en r\u00e9sulte correspond \u00e0 la dimension lignes de S1, et vice versa. Voir aussi : Gestion des dimensions","title":"Exemples :"},{"location":"Fonctions/TTOC1/","text":"TTOC Fonction TTOC La fonction TTOC traduit une variable litt\u00e9rale en variable num\u00e9rique. Il est possible d'indiquer une valeur par d\u00e9faut pour les valeurs qui ne correspondent pas \u00e0 un format num\u00e9rique. Syntaxe : Q01.TTOC(DefaultValue) ou _TTOC(Q01; DefaultValue) **Nom ** **Type ** Description Remarque DefaultValue Nombre Valeur des sans-r\u00e9ponse Obligatoire Exemples : VALUES.TTOC(99) Retourne une variable num\u00e9rique dont les valeurs sont la traduction des textes rencontr\u00e9s dans la variable VALUES. La valeur par d\u00e9faut est 99. Voir aussi : Traiter les variables litt\u00e9rales","title":"TTOC"},{"location":"Fonctions/TTOC1/#ttoc","text":"","title":"TTOC"},{"location":"Fonctions/TTOC1/#fonction-ttoc","text":"La fonction TTOC traduit une variable litt\u00e9rale en variable num\u00e9rique. Il est possible d'indiquer une valeur par d\u00e9faut pour les valeurs qui ne correspondent pas \u00e0 un format num\u00e9rique.","title":"Fonction TTOC"},{"location":"Fonctions/TTOC1/#syntaxe","text":"Q01.TTOC(DefaultValue) ou _TTOC(Q01; DefaultValue) **Nom ** **Type ** Description Remarque DefaultValue Nombre Valeur des sans-r\u00e9ponse Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TTOC1/#exemples","text":"VALUES.TTOC(99) Retourne une variable num\u00e9rique dont les valeurs sont la traduction des textes rencontr\u00e9s dans la variable VALUES. La valeur par d\u00e9faut est 99. Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/TTOD1/","text":"TTOD Fonction TTOD La fonction TTOD est le pendant de la fonction DTOT : elle traduit une variable litt\u00e9rale (TEXT) en variable logique \u00e0 modalit\u00e9s. Il est possible de cr\u00e9er une variable multi-r\u00e9ponses en indiquant le d\u00e9limiteur de r\u00e9ponses. Enfin, la casse peut \u00eatre prise en compte ou ignor\u00e9e. Argument 1 : Si TRUE, la casse (majuscules/minuscules) est importante, si FALSE elle est ignor\u00e9e. Argument 2 (optionnel) : Le s\u00e9parateur de r\u00e9ponses utilis\u00e9 dans les textes, entre double-quotes. Syntaxe : Q01.TTOD(IgnoreCase; Delimiters) ou _TTOD(Q01; IgnoreCase; Delimiters) **Nom ** **Type ** Description Remarque 1 IgnoreCase Bool\u00e9en Insensible \u00e0 la casse si TRUE (passe les libell\u00e9s des modalit\u00e9s en majuscules) FALSE par d\u00e9faut 2 Delimiters Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser pour les multi-r\u00e9ponses NUL par d\u00e9faut Exemples : Q01A.TTOD(TRUE; \";\") Cr\u00e9e une modalit\u00e9 par texte rencontr\u00e9 dans les r\u00e9ponses, en ignorant la casse, et en consid\u00e9rant que le point-virgule est un d\u00e9limiteur de r\u00e9ponse. Cet exemple produit donc une variable multi-r\u00e9ponses. Voir aussi : Traiter les variables litt\u00e9rales","title":"TTOD"},{"location":"Fonctions/TTOD1/#ttod","text":"","title":"TTOD"},{"location":"Fonctions/TTOD1/#fonction-ttod","text":"La fonction TTOD est le pendant de la fonction DTOT : elle traduit une variable litt\u00e9rale (TEXT) en variable logique \u00e0 modalit\u00e9s. Il est possible de cr\u00e9er une variable multi-r\u00e9ponses en indiquant le d\u00e9limiteur de r\u00e9ponses. Enfin, la casse peut \u00eatre prise en compte ou ignor\u00e9e. Argument 1 : Si TRUE, la casse (majuscules/minuscules) est importante, si FALSE elle est ignor\u00e9e. Argument 2 (optionnel) : Le s\u00e9parateur de r\u00e9ponses utilis\u00e9 dans les textes, entre double-quotes.","title":"Fonction TTOD"},{"location":"Fonctions/TTOD1/#syntaxe","text":"Q01.TTOD(IgnoreCase; Delimiters) ou _TTOD(Q01; IgnoreCase; Delimiters) **Nom ** **Type ** Description Remarque 1 IgnoreCase Bool\u00e9en Insensible \u00e0 la casse si TRUE (passe les libell\u00e9s des modalit\u00e9s en majuscules) FALSE par d\u00e9faut 2 Delimiters Cha\u00eene de caract\u00e8res S\u00e9parateur \u00e0 utiliser pour les multi-r\u00e9ponses NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TTOD1/#exemples","text":"Q01A.TTOD(TRUE; \";\") Cr\u00e9e une modalit\u00e9 par texte rencontr\u00e9 dans les r\u00e9ponses, en ignorant la casse, et en consid\u00e9rant que le point-virgule est un d\u00e9limiteur de r\u00e9ponse. Cet exemple produit donc une variable multi-r\u00e9ponses. Voir aussi : Traiter les variables litt\u00e9rales","title":"Exemples :"},{"location":"Fonctions/TXT/","text":"TXT Fonction TXT Associ\u00e9e \u00e0 MOD(), la fonction TXT permet d'associer un libell\u00e9 \u00e0 une modalit\u00e9 cr\u00e9\u00e9e. Exemples : Q01.MOD(NETD(1 2).TXT(\"ST POSITIF\");NETD(3 4).TXT(\"ST NEGATIF\")) Associe les libell\u00e9s \"ST POSITIF\" et \"ST NEGATIF\" aux sous-totaux cr\u00e9\u00e9s par la commande NETD(). Q01.MOD(1.TXT(\"libell\u00e9 de 1\");$L) Associe le libell\u00e9s \"Libell\u00e9 de 1\" \u00e0 la premi\u00e8re modalit\u00e9 cr\u00e9\u00e9e. Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"TXT"},{"location":"Fonctions/TXT/#txt","text":"","title":"TXT"},{"location":"Fonctions/TXT/#fonction-txt","text":"Associ\u00e9e \u00e0 MOD(), la fonction TXT permet d'associer un libell\u00e9 \u00e0 une modalit\u00e9 cr\u00e9\u00e9e.","title":"Fonction TXT"},{"location":"Fonctions/TXT/#exemples","text":"Q01.MOD(NETD(1 2).TXT(\"ST POSITIF\");NETD(3 4).TXT(\"ST NEGATIF\")) Associe les libell\u00e9s \"ST POSITIF\" et \"ST NEGATIF\" aux sous-totaux cr\u00e9\u00e9s par la commande NETD(). Q01.MOD(1.TXT(\"libell\u00e9 de 1\");$L) Associe le libell\u00e9s \"Libell\u00e9 de 1\" \u00e0 la premi\u00e8re modalit\u00e9 cr\u00e9\u00e9e. Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"Exemples :&nbsp;"},{"location":"Fonctions/TXTCOL2/","text":"TXTCOL Fonction TXTCOL La fonction TXTCOL modifie le texte d'une ou plusieurs 'colonnes' (dimension 1) de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile. Syntaxe : Q01.TXTCOL(Key; Value; Delimiter) ou _TXTCOL(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res ; NUL par d\u00e9faut Exemples : Il est possible d'utiliser les annotations de variable pour modifier les textes des items, dans cet exemple, les libell\u00e9s des items sont enrichis de l'annotation [TITLE] : Q02C.TXTCOL(\"*\";\"[TITLE] - #\") Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"TXTCOL"},{"location":"Fonctions/TXTCOL2/#txtcol","text":"","title":"TXTCOL"},{"location":"Fonctions/TXTCOL2/#fonction-txtcol","text":"La fonction TXTCOL modifie le texte d'une ou plusieurs 'colonnes' (dimension 1) de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile.","title":"Fonction TXTCOL"},{"location":"Fonctions/TXTCOL2/#syntaxe","text":"Q01.TXTCOL(Key; Value; Delimiter) ou _TXTCOL(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res ; NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TXTCOL2/#exemples","text":"Il est possible d'utiliser les annotations de variable pour modifier les textes des items, dans cet exemple, les libell\u00e9s des items sont enrichis de l'annotation [TITLE] : Q02C.TXTCOL(\"*\";\"[TITLE] - #\") Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/TXTMOD1/","text":"TXTMOD Fonction TXTMOD La fonction TXTMOD modifie le texte d'une ou plusieurs modalit\u00e9s de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile. La fonction TXTCOL modifie un item colonne et la fonction TXTROW modifie un item ligne. Syntaxe : Q01.TXTMOD(Key; Value; Delimiter) ou _TXTMOD(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur de libell\u00e9s NUL par d\u00e9faut Exemples : S1.TXTMOD(1; \"R\u00e9pondants\") Retourne une variable logique dont la 1\u00e8re modalit\u00e9 a pour texte \"R\u00e9pondants\". TAILLE.CTOD(3).TXTMOD(1; \"Petit/Moyen/Grand\"; \"/\") Retourne une variable logique \u00e0 3 modalit\u00e9s avec les libell\u00e9s respectivement Petit, Moyen et Grand. Q1.TXTMOD(\"*\"; \"[CODE]\") Remplace les libell\u00e9s de toutes les modalit\u00e9s par leur code respectif. On peut aussi utiliser [NAME], [TITLE], [TITLE:S], [FILTER], [COMMENT]... Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"TXTMOD"},{"location":"Fonctions/TXTMOD1/#txtmod","text":"","title":"TXTMOD"},{"location":"Fonctions/TXTMOD1/#fonction-txtmod","text":"La fonction TXTMOD modifie le texte d'une ou plusieurs modalit\u00e9s de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile. La fonction TXTCOL modifie un item colonne et la fonction TXTROW modifie un item ligne.","title":"Fonction TXTMOD"},{"location":"Fonctions/TXTMOD1/#syntaxe","text":"Q01.TXTMOD(Key; Value; Delimiter) ou _TXTMOD(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res s\u00e9parateur de libell\u00e9s NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TXTMOD1/#exemples","text":"S1.TXTMOD(1; \"R\u00e9pondants\") Retourne une variable logique dont la 1\u00e8re modalit\u00e9 a pour texte \"R\u00e9pondants\". TAILLE.CTOD(3).TXTMOD(1; \"Petit/Moyen/Grand\"; \"/\") Retourne une variable logique \u00e0 3 modalit\u00e9s avec les libell\u00e9s respectivement Petit, Moyen et Grand. Q1.TXTMOD(\"*\"; \"[CODE]\") Remplace les libell\u00e9s de toutes les modalit\u00e9s par leur code respectif. On peut aussi utiliser [NAME], [TITLE], [TITLE:S], [FILTER], [COMMENT]... Voir aussi : Traiter les variables logiques (modalit\u00e9s) Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/TXTROW1/","text":"TXTROW Fonction TXTROW La fonction TXTROW modifie le texte d'une ou plusieurs 'lignes' (dimension 2) de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile. Syntaxe : Q01.TXTROW(Key; Value; Delimiter) ou _TXTROW(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res ; NUL par d\u00e9faut Exemples : Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"TXTROW"},{"location":"Fonctions/TXTROW1/#txtrow","text":"","title":"TXTROW"},{"location":"Fonctions/TXTROW1/#fonction-txtrow","text":"La fonction TXTROW modifie le texte d'une ou plusieurs 'lignes' (dimension 2) de la variable. Cette m\u00e9thode est utile pour modifier un texte particulier tout en laissant le moteur g\u00e9rer les autres textes de mani\u00e8re utile.","title":"Fonction TXTROW"},{"location":"Fonctions/TXTROW1/#syntaxe","text":"Q01.TXTROW(Key; Value; Delimiter) ou _TXTROW(Q01; Key; Value; Delimiter) **Nom ** **Type ** Description Remarque 1 Key Cha\u00eene de caract\u00e8res Positions affect\u00e9es Obligatoire 2 Value Cha\u00eene de caract\u00e8res Cha\u00eene associ\u00e9e1;Cha\u00eene associ\u00e9e2 chaine;chaine2 par d\u00e9faut 3 Delimiter Cha\u00eene de caract\u00e8res ; NUL par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/TXTROW1/#exemples","text":"Voir aussi : Gestion des dimensions Gestion des libell\u00e9s","title":"Exemples :"},{"location":"Fonctions/Touteslesfonctions/","text":"Toutes les fonctions Toutes les fonctions ALL AND ANDFLT ANNOTATE ANONYMIZE ANSWERS ANY AUTOBASE AS BANNER BASE BREAKCOL BREAKMOD BREAKROW CALC CALCABS CALCDECILE CALCINT CALCMAX CALCMEAN CALCMEDIAN CALCMIN CALCMOD CALCPERCENTILE CALCQUARTILE CALCROUND CALCSQRT CALCSQUARE CALCPOW CALCSTDEV CALCSUM CALCVARIANCE CAPITALIZE CATMOD CHGLEV CLEAN CLRCOL CLRMOD CLRROW CMBAUTO CMBDEL CMBDIM CMBMOD CMBVAR CODIFY CODMOD CODROW CODCOL COMMENT COMPOSE CONCAT CONCATEX COPYCOL COPYFROM COPYMOD COPYROW COUNT CRANGE CRIT CSVCOL CSVMOD CSVROW CTOD CTOT CUMCOL CUMMOD CUMROW DATE DATEDIST DATETIME DAY DAYOFWEEK DAYOFYEAR DAYS DELCOL DELMOD DELPREFIX DELPREFIXCOL DELPREFIXROW DELST DELSTCOL DELSTROW DEPCOL DEPTH DIST DIV DIVCOL DIVMOD DIVNA DIVROW DTOC DTOT DURATION DURATIONDIST DYNCOL DYNMOD DYNROW EXACTLY FITCOL FITMOD FITROW FIX FLATTEN FLT FLTCOL FLTROW FMTDATE FMTDURATION GENID GENST GENSTCOL GENSTROW GET GROUP GRPCOL GRPMOD GRPROW HIDECOL HIDEMOD HIDEROW HIGHCOL HIGHMOD HIGHROW HIMOD HOUR HOURS IF INSMOD INVERT JUXCOL JUXROW JUXVAR LOGINFO LOWER LOWMOD MAX MAXCOUNT MAXNA MEAN MEANNA MERGE MILLISECOND MILLISECONDS MIMAX MIN MINCOUNT MINNA MINUTE MINUTES MONTH MOD MTOD MUL MULNA MULTI NA2MEAN NA2VAL NEWLEV NEWVAR NONE NOTXT NORESP NOT NOW OR ORDCOL ORDMOD ORDROW ORFLT PINCOL PINMOD PINROW POSCOL POSROW QSRT QSRTCOL RADICAL RANDOM RANKCOL RECAP REDCOL REDELETE REDMOD REDROW REFORMAT REGET REGETCOL REGETMOD REGETROW REMATCH REMCOL REMMOD REMMRG REMROW REPLACE REREPLACE RESP REVCOL REVMOD REVROW SECOND SECONDS SELCOL SELMOD SETCOL SELROW SHORTTITLE SETROW SHOWCOL SHOWMOD SHOWROW SPLIT SRTCOL SRTCOLALPHA SRTMOD SRTMODALPHA SRTROWALPHA STANDARDIZE STAT STDEV STDEVNA STR SUB SUBNA SUBSTRING SUBTITLE SUBTITLECOL SUBTITLEROW SUM SUMNA SUMUP SYS TABCOL TABIFY TABIFYCOL TABIFYROW TABMOD TABROW TICK TICKS TIME TIMESPAN TIT2NET TITLE TITLEIZE TITMOD TODATE TODO TOGGLE TOMOD TPROC TPROCCOL TPROCROW TPROCMOD TRIM TRIMDIM TRIMEND TRIMSTART TRSDIM TTOC TTOD TXT TXTCOL TXTMOD TXTROW UNIV UPPER USNUMBER VAL XOR XORFLT YEAR","title":"Toutes les fonctions"},{"location":"Fonctions/Touteslesfonctions/#toutes-les-fonctions","text":"Toutes les fonctions ALL AND ANDFLT ANNOTATE ANONYMIZE ANSWERS ANY AUTOBASE AS BANNER BASE BREAKCOL BREAKMOD BREAKROW CALC CALCABS CALCDECILE CALCINT CALCMAX CALCMEAN CALCMEDIAN CALCMIN CALCMOD CALCPERCENTILE CALCQUARTILE CALCROUND CALCSQRT CALCSQUARE CALCPOW CALCSTDEV CALCSUM CALCVARIANCE CAPITALIZE CATMOD CHGLEV CLEAN CLRCOL CLRMOD CLRROW CMBAUTO CMBDEL CMBDIM CMBMOD CMBVAR CODIFY CODMOD CODROW CODCOL COMMENT COMPOSE CONCAT CONCATEX COPYCOL COPYFROM COPYMOD COPYROW COUNT CRANGE CRIT CSVCOL CSVMOD CSVROW CTOD CTOT CUMCOL CUMMOD CUMROW DATE DATEDIST DATETIME DAY DAYOFWEEK DAYOFYEAR DAYS DELCOL DELMOD DELPREFIX DELPREFIXCOL DELPREFIXROW DELST DELSTCOL DELSTROW DEPCOL DEPTH DIST DIV DIVCOL DIVMOD DIVNA DIVROW DTOC DTOT DURATION DURATIONDIST DYNCOL DYNMOD DYNROW EXACTLY FITCOL FITMOD FITROW FIX FLATTEN FLT FLTCOL FLTROW FMTDATE FMTDURATION GENID GENST GENSTCOL GENSTROW GET GROUP GRPCOL GRPMOD GRPROW HIDECOL HIDEMOD HIDEROW HIGHCOL HIGHMOD HIGHROW HIMOD HOUR HOURS IF INSMOD INVERT JUXCOL JUXROW JUXVAR LOGINFO LOWER LOWMOD MAX MAXCOUNT MAXNA MEAN MEANNA MERGE MILLISECOND MILLISECONDS MIMAX MIN MINCOUNT MINNA MINUTE MINUTES MONTH MOD MTOD MUL MULNA MULTI NA2MEAN NA2VAL NEWLEV NEWVAR NONE NOTXT NORESP NOT NOW OR ORDCOL ORDMOD ORDROW ORFLT PINCOL PINMOD PINROW POSCOL POSROW QSRT QSRTCOL RADICAL RANDOM RANKCOL RECAP REDCOL REDELETE REDMOD REDROW REFORMAT REGET REGETCOL REGETMOD REGETROW REMATCH REMCOL REMMOD REMMRG REMROW REPLACE REREPLACE RESP REVCOL REVMOD REVROW SECOND SECONDS SELCOL SELMOD SETCOL SELROW SHORTTITLE SETROW SHOWCOL SHOWMOD SHOWROW SPLIT SRTCOL SRTCOLALPHA SRTMOD SRTMODALPHA SRTROWALPHA STANDARDIZE STAT STDEV STDEVNA STR SUB SUBNA SUBSTRING SUBTITLE SUBTITLECOL SUBTITLEROW SUM SUMNA SUMUP SYS TABCOL TABIFY TABIFYCOL TABIFYROW TABMOD TABROW TICK TICKS TIME TIMESPAN TIT2NET TITLE TITLEIZE TITMOD TODATE TODO TOGGLE TOMOD TPROC TPROCCOL TPROCROW TPROCMOD TRIM TRIMDIM TRIMEND TRIMSTART TRSDIM TTOC TTOD TXT TXTCOL TXTMOD TXTROW UNIV UPPER USNUMBER VAL XOR XORFLT YEAR","title":"Toutes les fonctions"},{"location":"Fonctions/UNIV1/","text":"UNIV Fonction UNIV La fonction UNIV cr\u00e9er un filtre en appliquant un \"ET LOGIQUE\" aux r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions). Syntaxe : _UNIV(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : IMPORTANT : un 'UNIV' produit un FILTRE (une seule modalit\u00e9) quelles que soient les variables en argument. Exemples : _UNIV(S1; S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 tous les arguments. Voir aussi : Univers de variables","title":"UNIV"},{"location":"Fonctions/UNIV1/#univ","text":"","title":"UNIV"},{"location":"Fonctions/UNIV1/#fonction-univ","text":"La fonction UNIV cr\u00e9er un filtre en appliquant un \"ET LOGIQUE\" aux r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions).","title":"Fonction UNIV"},{"location":"Fonctions/UNIV1/#syntaxe","text":"_UNIV(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/UNIV1/#remarques","text":"IMPORTANT : un 'UNIV' produit un FILTRE (une seule modalit\u00e9) quelles que soient les variables en argument.","title":"Remarques :"},{"location":"Fonctions/UNIV1/#exemples","text":"_UNIV(S1; S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 tous les arguments. Voir aussi : Univers de variables","title":"Exemples :"},{"location":"Fonctions/UPPER1/","text":"UPPER Fonction UPPER La fonction UPPER passe tous les caract\u00e8res des r\u00e9ponses \u00e0 une variable litt\u00e9rale en majuscules. Syntaxe : Q01.UPPER() ou _UPPER(Q01) S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"UPPER"},{"location":"Fonctions/UPPER1/#upper","text":"","title":"UPPER"},{"location":"Fonctions/UPPER1/#fonction-upper","text":"La fonction UPPER passe tous les caract\u00e8res des r\u00e9ponses \u00e0 une variable litt\u00e9rale en majuscules.","title":"Fonction UPPER"},{"location":"Fonctions/UPPER1/#syntaxe","text":"Q01.UPPER() ou _UPPER(Q01) S'applique \u00e0 une variable litt\u00e9rale Voir aussi : Traiter les variables litt\u00e9rales","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/USNUMBER1/","text":"USNUMBER Fonction USNUMBER La fonction USNUMBER permet de calculer un identifiant num\u00e9rique par incr\u00e9mentation. \\ Il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable. Syntaxe : _USNUMBER(Level; FirstRecordValue) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau \u00e0 identifier NUL par d\u00e9faut 2 FirstRecordValue Entier Premi\u00e8re valeur 1 par d\u00e9faut Exemples : _USNUMBER(\"UNITS\"; 1001) Cr\u00e9e une variable num\u00e9rique qui commence \u00e0 1001 pour le 1er enregistrement puis qui incr\u00e9mente de 1 \u00e0 chaque nouvel enregistrement. Voir aussi : Utilitaires \\& divers Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"USNUMBER"},{"location":"Fonctions/USNUMBER1/#usnumber","text":"","title":"USNUMBER"},{"location":"Fonctions/USNUMBER1/#fonction-usnumber","text":"La fonction USNUMBER permet de calculer un identifiant num\u00e9rique par incr\u00e9mentation. \\ Il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable.","title":"Fonction USNUMBER"},{"location":"Fonctions/USNUMBER1/#syntaxe","text":"_USNUMBER(Level; FirstRecordValue) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Nom du niveau \u00e0 identifier NUL par d\u00e9faut 2 FirstRecordValue Entier Premi\u00e8re valeur 1 par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/USNUMBER1/#exemples","text":"_USNUMBER(\"UNITS\"; 1001) Cr\u00e9e une variable num\u00e9rique qui commence \u00e0 1001 pour le 1er enregistrement puis qui incr\u00e9mente de 1 \u00e0 chaque nouvel enregistrement. Voir aussi : Utilitaires \\& divers Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/VAL1/","text":"VAL Fonction VAL La fonction VAL cr\u00e9e une constante num\u00e9rique selon la valeur sp\u00e9cifi\u00e9e en argument. \\ Il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable. Syntaxe : Q01.VAL(Level; Value) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Nombre Valeur Obligatoire Exemples : _VAL(\"UNITS\"; 999) Cr\u00e9e une nouvelle variable bas\u00e9e sur le niveau \"UNITS\" et dont la valeur de r\u00e9ponse est 999. Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"VAL"},{"location":"Fonctions/VAL1/#val","text":"","title":"VAL"},{"location":"Fonctions/VAL1/#fonction-val","text":"La fonction VAL cr\u00e9e une constante num\u00e9rique selon la valeur sp\u00e9cifi\u00e9e en argument. \\ Il est n\u00e9cessaire de sp\u00e9cifier sur quel niveau de r\u00e9ponse on souhaite cr\u00e9er la variable.","title":"Fonction VAL"},{"location":"Fonctions/VAL1/#syntaxe","text":"Q01.VAL(Level; Value) **Nom ** **Type ** Description Remarque 1 Level Cha\u00eene de caract\u00e8res Niveau cible Obligatoire 2 Value Nombre Valeur Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/VAL1/#exemples","text":"_VAL(\"UNITS\"; 999) Cr\u00e9e une nouvelle variable bas\u00e9e sur le niveau \"UNITS\" et dont la valeur de r\u00e9ponse est 999. Voir aussi : Manipuler les variables num\u00e9riques Cr\u00e9ation de variables (Syst\u00e8me, al\u00e9atoire...)","title":"Exemples :"},{"location":"Fonctions/XOR1/","text":"XOR Fonction XOR La fonction XOR applique un \"OU LOGIQUE EXCLUSIF\" de modalit\u00e9 \u00e0 modalit\u00e9 en suivant le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions \u00e0 combiner. Syntaxe : _XOR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : Un 'XOR' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez XORFLT ! Exemples : _XOR(S1; S3) ou S1 XOR S3 ou S1 \\^ S3 Le r\u00e9sultat contient autant de modalit\u00e9s que n\u00e9cessaire pour que les modalit\u00e9s soient harmonis\u00e9es. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans un et un seul argument. Voir aussi : Op\u00e9rateurs Combiner les variables","title":"XOR"},{"location":"Fonctions/XOR1/#xor","text":"","title":"XOR"},{"location":"Fonctions/XOR1/#fonction-xor","text":"La fonction XOR applique un \"OU LOGIQUE EXCLUSIF\" de modalit\u00e9 \u00e0 modalit\u00e9 en suivant le principe d'harmonisation des modalit\u00e9s. Les arguments correspondent aux diff\u00e9rentes variables ou constructions \u00e0 combiner.","title":"Fonction XOR"},{"location":"Fonctions/XOR1/#syntaxe","text":"_XOR(Selection) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/XOR1/#remarques","text":"Un 'XOR' entre deux variables ne produit donc pas un univers ! Pour cr\u00e9er un univers, utilisez XORFLT !","title":"Remarques :"},{"location":"Fonctions/XOR1/#exemples","text":"_XOR(S1; S3) ou S1 XOR S3 ou S1 \\^ S3 Le r\u00e9sultat contient autant de modalit\u00e9s que n\u00e9cessaire pour que les modalit\u00e9s soient harmonis\u00e9es. Pour chaque r\u00e9pondant, une modalit\u00e9 est cit\u00e9e lorsqu'elle est cit\u00e9e dans un et un seul argument. Voir aussi : Op\u00e9rateurs Combiner les variables","title":"Exemples :"},{"location":"Fonctions/XORFLT1/","text":"XORFLT Fonction XORFLT La fonction XORFLT cr\u00e9e un filtre \u00e0 l'aide d'un \"OU LOGIQUE EXCLUSIF\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions). Syntaxe : _XORFLT(Q01; Q02; ...) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire Remarques : Un 'XORFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments. Exemples : _XORFLT(S1; S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 un et un seul des arguments. Voir aussi : Univers de variables Combiner les variables","title":"XORFLT"},{"location":"Fonctions/XORFLT1/#xorflt","text":"","title":"XORFLT"},{"location":"Fonctions/XORFLT1/#fonction-xorflt","text":"La fonction XORFLT cr\u00e9e un filtre \u00e0 l'aide d'un \"OU LOGIQUE EXCLUSIF\" en consid\u00e9rant les r\u00e9pondants de chacun des arguments (qui correspondent donc aux diff\u00e9rentes variables et/ou constructions).","title":"Fonction XORFLT"},{"location":"Fonctions/XORFLT1/#syntaxe","text":"_XORFLT(Q01; Q02; ...) **Nom ** **Type ** Description Remarque Selection S\u00e9lection de variables Expression de s\u00e9lection de variables (ex: '$\"S?\"') ou liste de variables s\u00e9par\u00e9es par un \";\" Obligatoire","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/XORFLT1/#remarques","text":"Un 'XORFLT' produit un FILTRE (une seule modalit\u00e9) quelques soient les variables en arguments.","title":"Remarques :"},{"location":"Fonctions/XORFLT1/#exemples","text":"_XORFLT(S1; S3) Le r\u00e9sultat contient une modalit\u00e9. Un r\u00e9pondant est \u00e0 \"VRAI\" lorsque c'est un r\u00e9pondant \u00e0 un et un seul des arguments. Voir aussi : Univers de variables Combiner les variables","title":"Exemples :"},{"location":"Fonctions/YEAR1/","text":"YEAR Fonction YEAR La fonction YEAR construit une variable num\u00e9rique retournant la composante \"ann\u00e9e\" de la date de la variable temporelle plac\u00e9e en argument. Syntaxe : Q01.YEAR(NaValue) ou _YEAR(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Sans-r\u00e9ponse par d\u00e9faut Exemples : DATES.YEAR() D\u00e9code la variable temporelle DATES et retourne les ann\u00e9es de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"YEAR"},{"location":"Fonctions/YEAR1/#year","text":"","title":"YEAR"},{"location":"Fonctions/YEAR1/#fonction-year","text":"La fonction YEAR construit une variable num\u00e9rique retournant la composante \"ann\u00e9e\" de la date de la variable temporelle plac\u00e9e en argument.","title":"Fonction YEAR"},{"location":"Fonctions/YEAR1/#syntaxe","text":"Q01.YEAR(NaValue) ou _YEAR(Q01; NaValue) **Nom ** **Type ** Description Remarque NaValue Nombre Valeur des sans-r\u00e9ponse Sans-r\u00e9ponse par d\u00e9faut","title":"Syntaxe :&nbsp;"},{"location":"Fonctions/YEAR1/#exemples","text":"DATES.YEAR() D\u00e9code la variable temporelle DATES et retourne les ann\u00e9es de la variable. Voir aussi : Manipuler les variables temporelles et de dur\u00e9es","title":"Exemples :"}]}